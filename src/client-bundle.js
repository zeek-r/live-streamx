var Client = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var es5 = createCommonjsModule(function (module, exports) {
	!function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(i,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(a=o-Math.min(i,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1;}else if(u[0][o]<u[1][o])return -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),o=1;o<i;o++)s[o-1]=arguments[o];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var a=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t];}));};for(t=0,r=s.length;t<r;t+=1)a();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default;},18:function(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var a=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),n&&o(t,n),e}();t.default=a,e.exports=t.default;},91:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=a.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=a.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=a.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=a.default.find(o.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return a.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];"string"==typeof o?(i[t]=o,s+=1):"object"==typeof o&&(r[t]=o,n+=1);})),n>0){var o=Object.keys(r),u=a.default.find(o,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=a.default.find(o,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=a.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=a.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default;},92:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default;},93:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var o=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?) Version\//],describe:function(e){var t=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return {name:s.OS_MAP.iOS,version:t}}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return {name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return {name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default;},94:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return {type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?) Version\//],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "blackberry"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return "bada"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "windows phone"===e.getBrowserName()},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3},describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return "android"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "macos"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return "windows"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "linux"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "playstation 4"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}},{test:function(e){return "roku"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default;},95:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var o=[{test:function(e){return "microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return {name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default;}})}));
	});

	unwrapExports(es5);
	var es5_1 = es5.bowser;

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = ms;

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* Active `debug` instances.
		*/
		createDebug.instances = [];

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return match;
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.enabled = createDebug.enabled(namespace);
			debug.useColors = createDebug.useColors();
			debug.color = selectColor(namespace);
			debug.destroy = destroy;
			debug.extend = extend;
			// Debug.formatArgs = formatArgs;
			// debug.rawLog = rawLog;

			// env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			createDebug.instances.push(debug);

			return debug;
		}

		function destroy() {
			const index = createDebug.instances.indexOf(this);
			if (index !== -1) {
				createDebug.instances.splice(index, 1);
				return true;
			}
			return false;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}

			for (i = 0; i < createDebug.instances.length; i++) {
				const instance = createDebug.instances[i];
				instance.enabled = createDebug.enabled(instance.namespace);
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	var common = setup;

	var browser = createCommonjsModule(function (module, exports) {
	/* eslint-env browser */

	/**
	 * This is the web browser implementation of `debug()`.
	 */

	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
		'#0000CC',
		'#0000FF',
		'#0033CC',
		'#0033FF',
		'#0066CC',
		'#0066FF',
		'#0099CC',
		'#0099FF',
		'#00CC00',
		'#00CC33',
		'#00CC66',
		'#00CC99',
		'#00CCCC',
		'#00CCFF',
		'#3300CC',
		'#3300FF',
		'#3333CC',
		'#3333FF',
		'#3366CC',
		'#3366FF',
		'#3399CC',
		'#3399FF',
		'#33CC00',
		'#33CC33',
		'#33CC66',
		'#33CC99',
		'#33CCCC',
		'#33CCFF',
		'#6600CC',
		'#6600FF',
		'#6633CC',
		'#6633FF',
		'#66CC00',
		'#66CC33',
		'#9900CC',
		'#9900FF',
		'#9933CC',
		'#9933FF',
		'#99CC00',
		'#99CC33',
		'#CC0000',
		'#CC0033',
		'#CC0066',
		'#CC0099',
		'#CC00CC',
		'#CC00FF',
		'#CC3300',
		'#CC3333',
		'#CC3366',
		'#CC3399',
		'#CC33CC',
		'#CC33FF',
		'#CC6600',
		'#CC6633',
		'#CC9900',
		'#CC9933',
		'#CCCC00',
		'#CCCC33',
		'#FF0000',
		'#FF0033',
		'#FF0066',
		'#FF0099',
		'#FF00CC',
		'#FF00FF',
		'#FF3300',
		'#FF3333',
		'#FF3366',
		'#FF3399',
		'#FF33CC',
		'#FF33FF',
		'#FF6600',
		'#FF6633',
		'#FF9900',
		'#FF9933',
		'#FFCC00',
		'#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	// eslint-disable-next-line complexity
	function useColors() {
		// NB: In an Electron preload script, document will be defined but not fully
		// initialized. Since we know we're in Chrome, we'll just detect this case
		// explicitly
		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			return true;
		}

		// Internet Explorer and Edge do not support colors.
		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			return false;
		}

		// Is webkit? http://stackoverflow.com/a/16459606/376773
		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
			// Is firebug? http://stackoverflow.com/a/398120/376773
			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
			// Is firefox >= v31?
			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
			// Double check webkit in userAgent just in case we are in a worker
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		args[0] = (this.useColors ? '%c' : '') +
			this.namespace +
			(this.useColors ? ' %c' : ' ') +
			args[0] +
			(this.useColors ? '%c ' : ' ') +
			'+' + module.exports.humanize(this.diff);

		if (!this.useColors) {
			return;
		}

		const c = 'color: ' + this.color;
		args.splice(1, 0, c, 'color: inherit');

		// The final "%c" is somewhat tricky, because there could be other
		// arguments passed either before or after the %c, so we need to
		// figure out the correct index to insert the CSS into
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, match => {
			if (match === '%%') {
				return;
			}
			index++;
			if (match === '%c') {
				// We only are interested in the *last* %c
				// (the user may have provided their own)
				lastC = index;
			}
		});

		args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	function log(...args) {
		// This hackery is required for IE8/9, where
		// the `console.log` function doesn't have 'apply'
		return typeof console === 'object' &&
			console.log &&
			console.log(...args);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		try {
			if (namespaces) {
				exports.storage.setItem('debug', namespaces);
			} else {
				exports.storage.removeItem('debug');
			}
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	function load() {
		let r;
		try {
			r = exports.storage.getItem('debug');
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}

		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		if (!r && typeof process !== 'undefined' && 'env' in process) {
			r = process.env.DEBUG;
		}

		return r;
	}

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
		try {
			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			// The Browser also has localStorage in the global context.
			return localStorage;
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	module.exports = common(exports);

	const {formatters} = module.exports;

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
		try {
			return JSON.stringify(v);
		} catch (error) {
			return '[UnexpectedJSONParseError]: ' + error.message;
		}
	};
	});
	var browser_1 = browser.log;
	var browser_2 = browser.formatArgs;
	var browser_3 = browser.save;
	var browser_4 = browser.load;
	var browser_5 = browser.useColors;
	var browser_6 = browser.storage;
	var browser_7 = browser.colors;

	var Logger_1 = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const debug_1 = __importDefault(browser);
	const APP_NAME = 'mediasoup-client';
	class Logger {
	    constructor(prefix) {
	        if (prefix) {
	            this._debug = debug_1.default(`${APP_NAME}:${prefix}`);
	            this._warn = debug_1.default(`${APP_NAME}:WARN:${prefix}`);
	            this._error = debug_1.default(`${APP_NAME}:ERROR:${prefix}`);
	        }
	        else {
	            this._debug = debug_1.default(APP_NAME);
	            this._warn = debug_1.default(`${APP_NAME}:WARN`);
	            this._error = debug_1.default(`${APP_NAME}:ERROR`);
	        }
	        /* eslint-disable no-console */
	        this._debug.log = console.info.bind(console);
	        this._warn.log = console.warn.bind(console);
	        this._error.log = console.error.bind(console);
	        /* eslint-enable no-console */
	    }
	    get debug() {
	        return this._debug;
	    }
	    get warn() {
	        return this._warn;
	    }
	    get error() {
	        return this._error;
	    }
	}
	exports.Logger = Logger;
	});

	unwrapExports(Logger_1);
	var Logger_2 = Logger_1.Logger;

	var errors = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Error indicating not support for something.
	 */
	class UnsupportedError extends Error {
	    constructor(message) {
	        super(message);
	        this.name = 'UnsupportedError';
	        if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
	         {
	            // @ts-ignore
	            Error.captureStackTrace(this, UnsupportedError);
	        }
	        else {
	            this.stack = (new Error(message)).stack;
	        }
	    }
	}
	exports.UnsupportedError = UnsupportedError;
	/**
	 * Error produced when calling a method in an invalid state.
	 */
	class InvalidStateError extends Error {
	    constructor(message) {
	        super(message);
	        this.name = 'InvalidStateError';
	        if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
	         {
	            // @ts-ignore
	            Error.captureStackTrace(this, InvalidStateError);
	        }
	        else {
	            this.stack = (new Error(message)).stack;
	        }
	    }
	}
	exports.InvalidStateError = InvalidStateError;
	});

	unwrapExports(errors);
	var errors_1 = errors.UnsupportedError;
	var errors_2 = errors.InvalidStateError;

	var h264ProfileLevelId = createCommonjsModule(function (module, exports) {
	const debug = browser('h264-profile-level-id');

	/* eslint-disable no-console */
	debug.log = console.info.bind(console);
	/* eslint-enable no-console */

	const ProfileConstrainedBaseline = 1;
	const ProfileBaseline = 2;
	const ProfileMain = 3;
	const ProfileConstrainedHigh = 4;
	const ProfileHigh = 5;

	exports.ProfileConstrainedBaseline = ProfileConstrainedBaseline;
	exports.ProfileBaseline = ProfileBaseline;
	exports.ProfileMain = ProfileMain;
	exports.ProfileConstrainedHigh = ProfileConstrainedHigh;
	exports.ProfileHigh = ProfileHigh;

	// All values are equal to ten times the level number, except level 1b which is
	// special.
	const Level1_b = 0;
	const Level1 = 10;
	const Level1_1 = 11;
	const Level1_2 = 12;
	const Level1_3 = 13;
	const Level2 = 20;
	const Level2_1 = 21;
	const Level2_2 = 22;
	const Level3 = 30;
	const Level3_1 = 31;
	const Level3_2 = 32;
	const Level4 = 40;
	const Level4_1 = 41;
	const Level4_2 = 42;
	const Level5 = 50;
	const Level5_1 = 51;
	const Level5_2 = 52;

	exports.Level1_b = Level1_b;
	exports.Level1 = Level1;
	exports.Level1_1 = Level1_1;
	exports.Level1_2 = Level1_2;
	exports.Level1_3 = Level1_3;
	exports.Level2 = Level2;
	exports.Level2_1 = Level2_1;
	exports.Level2_2 = Level2_2;
	exports.Level3 = Level3;
	exports.Level3_1 = Level3_1;
	exports.Level3_2 = Level3_2;
	exports.Level4 = Level4;
	exports.Level4_1 = Level4_1;
	exports.Level4_2 = Level4_2;
	exports.Level5 = Level5;
	exports.Level5_1 = Level5_1;
	exports.Level5_2 = Level5_2;

	class ProfileLevelId
	{
		constructor(profile, level)
		{
			this.profile = profile;
			this.level = level;
		}
	}

	exports.ProfileLevelId = ProfileLevelId;

	// Default ProfileLevelId.
	//
	// TODO: The default should really be profile Baseline and level 1 according to
	// the spec: https://tools.ietf.org/html/rfc6184#section-8.1. In order to not
	// break backwards compatibility with older versions of WebRTC where external
	// codecs don't have any parameters, use profile ConstrainedBaseline level 3_1
	// instead. This workaround will only be done in an interim period to allow
	// external clients to update their code.
	//
	// http://crbug/webrtc/6337.
	const DefaultProfileLevelId =
		new ProfileLevelId(ProfileConstrainedBaseline, Level3_1);

	// For level_idc=11 and profile_idc=0x42, 0x4D, or 0x58, the constraint set3
	// flag specifies if level 1b or level 1.1 is used.
	const ConstraintSet3Flag = 0x10;

	// Class for matching bit patterns such as "x1xx0000" where 'x' is allowed to be
	// either 0 or 1.
	class BitPattern
	{
		constructor(str)
		{
			this._mask = ~byteMaskString('x', str);
			this._maskedValue = byteMaskString('1', str);
		}

		isMatch(value)
		{
			return this._maskedValue === (value & this._mask);
		}
	}

	// Class for converting between profile_idc/profile_iop to Profile.
	class ProfilePattern
	{
		constructor(profile_idc, profile_iop, profile)
		{
			this.profile_idc = profile_idc;
			this.profile_iop = profile_iop;
			this.profile = profile;
		}
	}

	// This is from https://tools.ietf.org/html/rfc6184#section-8.1.
	const ProfilePatterns =
	[
		new ProfilePattern(0x42, new BitPattern('x1xx0000'), ProfileConstrainedBaseline),
		new ProfilePattern(0x4D, new BitPattern('1xxx0000'), ProfileConstrainedBaseline),
		new ProfilePattern(0x58, new BitPattern('11xx0000'), ProfileConstrainedBaseline),
		new ProfilePattern(0x42, new BitPattern('x0xx0000'), ProfileBaseline),
		new ProfilePattern(0x58, new BitPattern('10xx0000'), ProfileBaseline),
		new ProfilePattern(0x4D, new BitPattern('0x0x0000'), ProfileMain),
		new ProfilePattern(0x64, new BitPattern('00000000'), ProfileHigh),
		new ProfilePattern(0x64, new BitPattern('00001100'), ProfileConstrainedHigh)
	];

	/**
	 * Parse profile level id that is represented as a string of 3 hex bytes.
	 * Nothing will be returned if the string is not a recognized H264 profile
	 * level id.
	 *
	 * @param {String} str - profile-level-id value as a string of 3 hex bytes.
	 *
	 * @returns {ProfileLevelId}
	 */
	exports.parseProfileLevelId = function(str)
	{
		// The string should consist of 3 bytes in hexadecimal format.
		if (typeof str !== 'string' || str.length !== 6)
			return null;

		const profile_level_id_numeric = parseInt(str, 16);

		if (profile_level_id_numeric === 0)
			return null;

		// Separate into three bytes.
		const level_idc = profile_level_id_numeric & 0xFF;
		const profile_iop = (profile_level_id_numeric >> 8) & 0xFF;
		const profile_idc = (profile_level_id_numeric >> 16) & 0xFF;

		// Parse level based on level_idc and constraint set 3 flag.
		let level;

		switch (level_idc)
		{
			case Level1_1:
			{
				level = (profile_iop & ConstraintSet3Flag) !== 0 ? Level1_b : Level1_1;
				break;
			}
			case Level1:
			case Level1_2:
			case Level1_3:
			case Level2:
			case Level2_1:
			case Level2_2:
			case Level3:
			case Level3_1:
			case Level3_2:
			case Level4:
			case Level4_1:
			case Level4_2:
			case Level5:
			case Level5_1:
			case Level5_2:
			{
				level = level_idc;
				break;
			}
			// Unrecognized level_idc.
			default:
			{
				debug('parseProfileLevelId() | unrecognized level_idc:%s', level_idc);

				return null;
			}
		}

		// Parse profile_idc/profile_iop into a Profile enum.
		for (const pattern of ProfilePatterns)
		{
			if (
				profile_idc === pattern.profile_idc &&
				pattern.profile_iop.isMatch(profile_iop)
			)
			{
				return new ProfileLevelId(pattern.profile, level);
			}
		}

		debug('parseProfileLevelId() | unrecognized profile_idc/profile_iop combination');

		return null;
	};

	/**
	 * Returns canonical string representation as three hex bytes of the profile
	 * level id, or returns nothing for invalid profile level ids.
	 *
	 * @param {ProfileLevelId} profile_level_id
	 *
	 * @returns {String}
	 */
	exports.profileLevelIdToString = function(profile_level_id)
	{
		// Handle special case level == 1b.
		if (profile_level_id.level == Level1_b)
		{
			switch (profile_level_id.profile)
			{
				case ProfileConstrainedBaseline:
				{
					return '42f00b';
				}
				case ProfileBaseline:
				{
					return '42100b';
				}
				case ProfileMain:
				{
					return '4d100b';
				}
				// Level 1_b is not allowed for other profiles.
				default:
				{
					debug(
						'profileLevelIdToString() | Level 1_b not is allowed for profile:%s',
						profile_level_id.profile);

					return null;
				}
			}
		}

		let profile_idc_iop_string;

		switch (profile_level_id.profile)
		{
			case ProfileConstrainedBaseline:
			{
				profile_idc_iop_string = '42e0';
				break;
			}
			case ProfileBaseline:
			{
				profile_idc_iop_string = '4200';
				break;
			}
			case ProfileMain:
			{
				profile_idc_iop_string = '4d00';
				break;
			}
			case ProfileConstrainedHigh:
			{
				profile_idc_iop_string = '640c';
				break;
			}
			case ProfileHigh:
			{
				profile_idc_iop_string = '6400';
				break;
			}
			default:
			{
				debug(
					'profileLevelIdToString() | unrecognized profile:%s',
					profile_level_id.profile);

				return null;
			}
		}

		let levelStr = (profile_level_id.level).toString(16);

		if (levelStr.length === 1)
			levelStr = `0${levelStr}`;

		return `${profile_idc_iop_string}${levelStr}`;
	};

	/**
	 * Parse profile level id that is represented as a string of 3 hex bytes
	 * contained in an SDP key-value map. A default profile level id will be
	 * returned if the profile-level-id key is missing. Nothing will be returned if
	 * the key is present but the string is invalid.
	 *
	 * @param {Object} [params={}] - Codec parameters object.
	 *
	 * @returns {ProfileLevelId}
	 */
	exports.parseSdpProfileLevelId = function(params = {})
	{
		const profile_level_id = params['profile-level-id'];

		return !profile_level_id
			? DefaultProfileLevelId
			: exports.parseProfileLevelId(profile_level_id);
	};

	/**
	 * Returns true if the parameters have the same H264 profile, i.e. the same
	 * H264 profile (Baseline, High, etc).
	 *
	 * @param {Object} [params1={}] - Codec parameters object.
	 * @param {Object} [params2={}] - Codec parameters object.
	 *
	 * @returns {Boolean}
	 */
	exports.isSameProfile = function(params1 = {}, params2 = {})
	{
		const profile_level_id_1 = exports.parseSdpProfileLevelId(params1);
		const profile_level_id_2 = exports.parseSdpProfileLevelId(params2);

		// Compare H264 profiles, but not levels.
		return Boolean(
			profile_level_id_1 &&
			profile_level_id_2 &&
			profile_level_id_1.profile === profile_level_id_2.profile
		);
	};

	/**
	 * Generate codec parameters that will be used as answer in an SDP negotiation
	 * based on local supported parameters and remote offered parameters. Both
	 * local_supported_params and remote_offered_params represent sendrecv media
	 * descriptions, i.e they are a mix of both encode and decode capabilities. In
	 * theory, when the profile in local_supported_params represent a strict superset
	 * of the profile in remote_offered_params, we could limit the profile in the
	 * answer to the profile in remote_offered_params.
	 *
	 * However, to simplify the code, each supported H264 profile should be listed
	 * explicitly in the list of local supported codecs, even if they are redundant.
	 * Then each local codec in the list should be tested one at a time against the
	 * remote codec, and only when the profiles are equal should this function be
	 * called. Therefore, this function does not need to handle profile intersection,
	 * and the profile of local_supported_params and remote_offered_params must be
	 * equal before calling this function. The parameters that are used when
	 * negotiating are the level part of profile-level-id and level-asymmetry-allowed.
	 *
	 * @param {Object} [local_supported_params={}]
	 * @param {Object} [remote_offered_params={}]
	 *
	 * @returns {String} Canonical string representation as three hex bytes of the
	 *   profile level id, or null if no one of the params have profile-level-id.
	 *
	 * @throws {TypeError} If Profile mismatch or invalid params.
	 */
	exports.generateProfileLevelIdForAnswer = function(
		local_supported_params = {},
		remote_offered_params = {}
	)
	{
		// If both local and remote params do not contain profile-level-id, they are
		// both using the default profile. In this case, don't return anything.
		if (
			!local_supported_params['profile-level-id'] &&
			!remote_offered_params['profile-level-id']
		)
		{
			debug(
				'generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params');

			return null;
		}

		// Parse profile-level-ids.
		const local_profile_level_id =
			exports.parseSdpProfileLevelId(local_supported_params);
		const remote_profile_level_id =
			exports.parseSdpProfileLevelId(remote_offered_params);

		// The local and remote codec must have valid and equal H264 Profiles.
		if (!local_profile_level_id)
			throw new TypeError('invalid local_profile_level_id');

		if (!remote_profile_level_id)
			throw new TypeError('invalid remote_profile_level_id');

		if (local_profile_level_id.profile !== remote_profile_level_id.profile)
			throw new TypeError('H264 Profile mismatch');

		// Parse level information.
		const level_asymmetry_allowed = (
			isLevelAsymmetryAllowed(local_supported_params) &&
			isLevelAsymmetryAllowed(remote_offered_params)
		);

		const local_level = local_profile_level_id.level;
		const remote_level = remote_profile_level_id.level;
		const min_level = minLevel(local_level, remote_level);

		// Determine answer level. When level asymmetry is not allowed, level upgrade
		// is not allowed, i.e., the level in the answer must be equal to or lower
		// than the level in the offer.
		const answer_level = level_asymmetry_allowed ? local_level : min_level;

		debug(
			'generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]',
			local_profile_level_id.profile, answer_level);

		// Return the resulting profile-level-id for the answer parameters.
		return exports.profileLevelIdToString(
			new ProfileLevelId(local_profile_level_id.profile, answer_level));
	};

	// Convert a string of 8 characters into a byte where the positions containing
	// character c will have their bit set. For example, c = 'x', str = "x1xx0000"
	// will return 0b10110000.
	function byteMaskString(c, str)
	{
		return (
			((str[0] === c) << 7) | ((str[1] === c) << 6) | ((str[2] === c) << 5) |
			((str[3] === c) << 4)	| ((str[4] === c) << 3)	| ((str[5] === c) << 2)	|
			((str[6] === c) << 1)	| ((str[7] === c) << 0)
		);
	}

	// Compare H264 levels and handle the level 1b case.
	function isLessLevel(a, b)
	{
		if (a === Level1_b)
			return b !== Level1 && b !== Level1_b;

		if (b === Level1_b)
			return a !== Level1;

		return a < b;
	}

	function minLevel(a, b)
	{
		return isLessLevel(a, b) ? a : b;
	}

	function isLevelAsymmetryAllowed(params = {})
	{
		const level_asymmetry_allowed = params['level-asymmetry-allowed'];

		return (
			level_asymmetry_allowed === 1 ||
			level_asymmetry_allowed === '1'
		);
	}
	});
	var h264ProfileLevelId_1 = h264ProfileLevelId.ProfileConstrainedBaseline;
	var h264ProfileLevelId_2 = h264ProfileLevelId.ProfileBaseline;
	var h264ProfileLevelId_3 = h264ProfileLevelId.ProfileMain;
	var h264ProfileLevelId_4 = h264ProfileLevelId.ProfileConstrainedHigh;
	var h264ProfileLevelId_5 = h264ProfileLevelId.ProfileHigh;
	var h264ProfileLevelId_6 = h264ProfileLevelId.Level1_b;
	var h264ProfileLevelId_7 = h264ProfileLevelId.Level1;
	var h264ProfileLevelId_8 = h264ProfileLevelId.Level1_1;
	var h264ProfileLevelId_9 = h264ProfileLevelId.Level1_2;
	var h264ProfileLevelId_10 = h264ProfileLevelId.Level1_3;
	var h264ProfileLevelId_11 = h264ProfileLevelId.Level2;
	var h264ProfileLevelId_12 = h264ProfileLevelId.Level2_1;
	var h264ProfileLevelId_13 = h264ProfileLevelId.Level2_2;
	var h264ProfileLevelId_14 = h264ProfileLevelId.Level3;
	var h264ProfileLevelId_15 = h264ProfileLevelId.Level3_1;
	var h264ProfileLevelId_16 = h264ProfileLevelId.Level3_2;
	var h264ProfileLevelId_17 = h264ProfileLevelId.Level4;
	var h264ProfileLevelId_18 = h264ProfileLevelId.Level4_1;
	var h264ProfileLevelId_19 = h264ProfileLevelId.Level4_2;
	var h264ProfileLevelId_20 = h264ProfileLevelId.Level5;
	var h264ProfileLevelId_21 = h264ProfileLevelId.Level5_1;
	var h264ProfileLevelId_22 = h264ProfileLevelId.Level5_2;
	var h264ProfileLevelId_23 = h264ProfileLevelId.ProfileLevelId;
	var h264ProfileLevelId_24 = h264ProfileLevelId.parseProfileLevelId;
	var h264ProfileLevelId_25 = h264ProfileLevelId.profileLevelIdToString;
	var h264ProfileLevelId_26 = h264ProfileLevelId.parseSdpProfileLevelId;
	var h264ProfileLevelId_27 = h264ProfileLevelId.isSameProfile;
	var h264ProfileLevelId_28 = h264ProfileLevelId.generateProfileLevelIdForAnswer;

	var utils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Clones the given object/array.
	 *
	 * @param {Object|Array} obj
	 *
	 * @returns {Object|Array}
	 */
	function clone(obj) {
	    if (typeof obj !== 'object')
	        return {};
	    return JSON.parse(JSON.stringify(obj));
	}
	exports.clone = clone;
	/**
	 * Generates a random positive integer.
	 */
	function generateRandomNumber() {
	    return Math.round(Math.random() * 10000000);
	}
	exports.generateRandomNumber = generateRandomNumber;
	});

	unwrapExports(utils);
	var utils_1 = utils.clone;
	var utils_2 = utils.generateRandomNumber;

	var ortc = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const h264 = __importStar(h264ProfileLevelId);

	const RTP_PROBATOR_MID = 'probator';
	const RTP_PROBATOR_SSRC = 1234;
	const RTP_PROBATOR_CODEC_PAYLOAD_TYPE = 127;
	/**
	 * Validates RtpCapabilities. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpCapabilities(caps) {
	    if (typeof caps !== 'object')
	        throw new TypeError('caps is not an object');
	    // codecs is optional. If unset, fill with an empty array.
	    if (caps.codecs && !Array.isArray(caps.codecs))
	        throw new TypeError('caps.codecs is not an array');
	    else if (!caps.codecs)
	        caps.codecs = [];
	    for (const codec of caps.codecs) {
	        validateRtpCodecCapability(codec);
	    }
	    // headerExtensions is optional. If unset, fill with an empty array.
	    if (caps.headerExtensions && !Array.isArray(caps.headerExtensions))
	        throw new TypeError('caps.headerExtensions is not an array');
	    else if (!caps.headerExtensions)
	        caps.headerExtensions = [];
	    for (const ext of caps.headerExtensions) {
	        validateRtpHeaderExtension(ext);
	    }
	}
	exports.validateRtpCapabilities = validateRtpCapabilities;
	/**
	 * Validates RtpCodecCapability. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpCodecCapability(codec) {
	    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
	    if (typeof codec !== 'object')
	        throw new TypeError('codec is not an object');
	    // mimeType is mandatory.
	    if (!codec.mimeType || typeof codec.mimeType !== 'string')
	        throw new TypeError('missing codec.mimeType');
	    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
	    if (!mimeTypeMatch)
	        throw new TypeError('invalid codec.mimeType');
	    // Just override kind with media component of mimeType.
	    codec.kind = mimeTypeMatch[1].toLowerCase();
	    // preferredPayloadType is optional.
	    if (codec.preferredPayloadType && typeof codec.preferredPayloadType !== 'number')
	        throw new TypeError('invalid codec.preferredPayloadType');
	    // clockRate is mandatory.
	    if (typeof codec.clockRate !== 'number')
	        throw new TypeError('missing codec.clockRate');
	    // channels is optional. If unset, set it to 1 (just if audio).
	    if (codec.kind === 'audio') {
	        if (typeof codec.channels !== 'number')
	            codec.channels = 1;
	    }
	    else {
	        delete codec.channels;
	    }
	    // parameters is optional. If unset, set it to an empty object.
	    if (!codec.parameters || typeof codec.parameters !== 'object')
	        codec.parameters = {};
	    for (const key of Object.keys(codec.parameters)) {
	        let value = codec.parameters[key];
	        if (value === undefined) {
	            codec.parameters[key] = '';
	            value = '';
	        }
	        if (typeof value !== 'string' && typeof value !== 'number') {
	            throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
	        }
	        // Specific parameters validation.
	        if (key === 'apt') {
	            if (typeof value !== 'number')
	                throw new TypeError('invalid codec apt parameter');
	        }
	    }
	    // rtcpFeedback is optional. If unset, set it to an empty array.
	    if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
	        codec.rtcpFeedback = [];
	    for (const fb of codec.rtcpFeedback) {
	        validateRtcpFeedback(fb);
	    }
	}
	exports.validateRtpCodecCapability = validateRtpCodecCapability;
	/**
	 * Validates RtcpFeedback. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtcpFeedback(fb) {
	    if (typeof fb !== 'object')
	        throw new TypeError('fb is not an object');
	    // type is mandatory.
	    if (!fb.type || typeof fb.type !== 'string')
	        throw new TypeError('missing fb.type');
	    // parameter is optional. If unset set it to an empty string.
	    if (!fb.parameter || typeof fb.parameter !== 'string')
	        fb.parameter = '';
	}
	exports.validateRtcpFeedback = validateRtcpFeedback;
	/**
	 * Validates RtpHeaderExtension. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpHeaderExtension(ext) {
	    if (typeof ext !== 'object')
	        throw new TypeError('ext is not an object');
	    // kind is optional. If unset set it to an empty string.
	    if (!ext.kind || typeof ext.kind !== 'string')
	        ext.kind = '';
	    if (ext.kind !== '' && ext.kind !== 'audio' && ext.kind !== 'video')
	        throw new TypeError('invalid ext.kind');
	    // uri is mandatory.
	    if (!ext.uri || typeof ext.uri !== 'string')
	        throw new TypeError('missing ext.uri');
	    // preferredId is mandatory.
	    if (typeof ext.preferredId !== 'number')
	        throw new TypeError('missing ext.preferredId');
	    // preferredEncrypt is optional. If unset set it to false.
	    if (ext.preferredEncrypt && typeof ext.preferredEncrypt !== 'boolean')
	        throw new TypeError('invalid ext.preferredEncrypt');
	    else if (!ext.preferredEncrypt)
	        ext.preferredEncrypt = false;
	    // direction is optional. If unset set it to sendrecv.
	    if (ext.direction && typeof ext.direction !== 'string')
	        throw new TypeError('invalid ext.direction');
	    else if (!ext.direction)
	        ext.direction = 'sendrecv';
	}
	exports.validateRtpHeaderExtension = validateRtpHeaderExtension;
	/**
	 * Validates RtpParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpParameters(params) {
	    if (typeof params !== 'object')
	        throw new TypeError('params is not an object');
	    // mid is optional.
	    if (params.mid && typeof params.mid !== 'string')
	        throw new TypeError('params.mid is not a string');
	    // codecs is mandatory.
	    if (!Array.isArray(params.codecs))
	        throw new TypeError('missing params.codecs');
	    for (const codec of params.codecs) {
	        validateRtpCodecParameters(codec);
	    }
	    // headerExtensions is optional. If unset, fill with an empty array.
	    if (params.headerExtensions && !Array.isArray(params.headerExtensions))
	        throw new TypeError('params.headerExtensions is not an array');
	    else if (!params.headerExtensions)
	        params.headerExtensions = [];
	    for (const ext of params.headerExtensions) {
	        validateRtpHeaderExtensionParameters(ext);
	    }
	    // encodings is optional. If unset, fill with an empty array.
	    if (params.encodings && !Array.isArray(params.encodings))
	        throw new TypeError('params.encodings is not an array');
	    else if (!params.encodings)
	        params.encodings = [];
	    for (const encoding of params.encodings) {
	        validateRtpEncodingParameters(encoding);
	    }
	    // rtcp is optional. If unset, fill with an empty object.
	    if (params.rtcp && typeof params.rtcp !== 'object')
	        throw new TypeError('params.rtcp is not an object');
	    else if (!params.rtcp)
	        params.rtcp = {};
	    validateRtcpParameters(params.rtcp);
	}
	exports.validateRtpParameters = validateRtpParameters;
	/**
	 * Validates RtpCodecParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpCodecParameters(codec) {
	    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
	    if (typeof codec !== 'object')
	        throw new TypeError('codec is not an object');
	    // mimeType is mandatory.
	    if (!codec.mimeType || typeof codec.mimeType !== 'string')
	        throw new TypeError('missing codec.mimeType');
	    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
	    if (!mimeTypeMatch)
	        throw new TypeError('invalid codec.mimeType');
	    // payloadType is mandatory.
	    if (typeof codec.payloadType !== 'number')
	        throw new TypeError('missing codec.payloadType');
	    // clockRate is mandatory.
	    if (typeof codec.clockRate !== 'number')
	        throw new TypeError('missing codec.clockRate');
	    const kind = mimeTypeMatch[1].toLowerCase();
	    // channels is optional. If unset, set it to 1 (just if audio).
	    if (kind === 'audio') {
	        if (typeof codec.channels !== 'number')
	            codec.channels = 1;
	    }
	    else {
	        delete codec.channels;
	    }
	    // parameters is optional. If unset, set it to an empty object.
	    if (!codec.parameters || typeof codec.parameters !== 'object')
	        codec.parameters = {};
	    for (const key of Object.keys(codec.parameters)) {
	        let value = codec.parameters[key];
	        if (value === undefined) {
	            codec.parameters[key] = '';
	            value = '';
	        }
	        if (typeof value !== 'string' && typeof value !== 'number') {
	            throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
	        }
	        // Specific parameters validation.
	        if (key === 'apt') {
	            if (typeof value !== 'number')
	                throw new TypeError('invalid codec apt parameter');
	        }
	    }
	    // rtcpFeedback is optional. If unset, set it to an empty array.
	    if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
	        codec.rtcpFeedback = [];
	    for (const fb of codec.rtcpFeedback) {
	        validateRtcpFeedback(fb);
	    }
	}
	exports.validateRtpCodecParameters = validateRtpCodecParameters;
	/**
	 * Validates RtpHeaderExtensionParameteters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpHeaderExtensionParameters(ext) {
	    if (typeof ext !== 'object')
	        throw new TypeError('ext is not an object');
	    // uri is mandatory.
	    if (!ext.uri || typeof ext.uri !== 'string')
	        throw new TypeError('missing ext.uri');
	    // id is mandatory.
	    if (typeof ext.id !== 'number')
	        throw new TypeError('missing ext.id');
	    // encrypt is optional. If unset set it to false.
	    if (ext.encrypt && typeof ext.encrypt !== 'boolean')
	        throw new TypeError('invalid ext.encrypt');
	    else if (!ext.encrypt)
	        ext.encrypt = false;
	    // parameters is optional. If unset, set it to an empty object.
	    if (!ext.parameters || typeof ext.parameters !== 'object')
	        ext.parameters = {};
	    for (const key of Object.keys(ext.parameters)) {
	        let value = ext.parameters[key];
	        if (value === undefined) {
	            ext.parameters[key] = '';
	            value = '';
	        }
	        if (typeof value !== 'string' && typeof value !== 'number')
	            throw new TypeError('invalid header extension parameter');
	    }
	}
	exports.validateRtpHeaderExtensionParameters = validateRtpHeaderExtensionParameters;
	/**
	 * Validates RtpEncodingParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpEncodingParameters(encoding) {
	    if (typeof encoding !== 'object')
	        throw new TypeError('encoding is not an object');
	    // ssrc is optional.
	    if (encoding.ssrc && typeof encoding.ssrc !== 'number')
	        throw new TypeError('invalid encoding.ssrc');
	    // rid is optional.
	    if (encoding.rid && typeof encoding.rid !== 'string')
	        throw new TypeError('invalid encoding.rid');
	    // rtx is optional.
	    if (encoding.rtx && typeof encoding.rtx !== 'object') {
	        throw new TypeError('invalid encoding.rtx');
	    }
	    else if (encoding.rtx) {
	        // RTX ssrc is mandatory if rtx is present.
	        if (typeof encoding.rtx.ssrc !== 'number')
	            throw new TypeError('missing encoding.rtx.ssrc');
	    }
	    // dtx is optional. If unset set it to false.
	    if (!encoding.dtx || typeof encoding.dtx !== 'boolean')
	        encoding.dtx = false;
	    // scalabilityMode is optional.
	    if (encoding.scalabilityMode && typeof encoding.scalabilityMode !== 'string')
	        throw new TypeError('invalid encoding.scalabilityMode');
	}
	exports.validateRtpEncodingParameters = validateRtpEncodingParameters;
	/**
	 * Validates RtcpParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtcpParameters(rtcp) {
	    if (typeof rtcp !== 'object')
	        throw new TypeError('rtcp is not an object');
	    // cname is optional.
	    if (rtcp.cname && typeof rtcp.cname !== 'string')
	        throw new TypeError('invalid rtcp.cname');
	    // reducedSize is optional. If unset set it to true.
	    if (!rtcp.reducedSize || typeof rtcp.reducedSize !== 'boolean')
	        rtcp.reducedSize = true;
	}
	exports.validateRtcpParameters = validateRtcpParameters;
	/**
	 * Validates SctpCapabilities. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateSctpCapabilities(caps) {
	    if (typeof caps !== 'object')
	        throw new TypeError('caps is not an object');
	    // numStreams is mandatory.
	    if (!caps.numStreams || typeof caps.numStreams !== 'object')
	        throw new TypeError('missing caps.numStreams');
	    validateNumSctpStreams(caps.numStreams);
	}
	exports.validateSctpCapabilities = validateSctpCapabilities;
	/**
	 * Validates NumSctpStreams. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateNumSctpStreams(numStreams) {
	    if (typeof numStreams !== 'object')
	        throw new TypeError('numStreams is not an object');
	    // OS is mandatory.
	    if (typeof numStreams.OS !== 'number')
	        throw new TypeError('missing numStreams.OS');
	    // MIS is mandatory.
	    if (typeof numStreams.MIS !== 'number')
	        throw new TypeError('missing numStreams.MIS');
	}
	exports.validateNumSctpStreams = validateNumSctpStreams;
	/**
	 * Validates SctpParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateSctpParameters(params) {
	    if (typeof params !== 'object')
	        throw new TypeError('params is not an object');
	    // port is mandatory.
	    if (typeof params.port !== 'number')
	        throw new TypeError('missing params.port');
	    // OS is mandatory.
	    if (typeof params.OS !== 'number')
	        throw new TypeError('missing params.OS');
	    // MIS is mandatory.
	    if (typeof params.MIS !== 'number')
	        throw new TypeError('missing params.MIS');
	    // maxMessageSize is mandatory.
	    if (typeof params.maxMessageSize !== 'number')
	        throw new TypeError('missing params.maxMessageSize');
	}
	exports.validateSctpParameters = validateSctpParameters;
	/**
	 * Validates SctpStreamParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateSctpStreamParameters(params) {
	    if (typeof params !== 'object')
	        throw new TypeError('params is not an object');
	    // streamId is mandatory.
	    if (typeof params.streamId !== 'number')
	        throw new TypeError('missing params.streamId');
	    // ordered is optional.
	    let orderedGiven = false;
	    if (typeof params.ordered === 'boolean')
	        orderedGiven = true;
	    else
	        params.ordered = true;
	    // maxPacketLifeTime is optional.
	    if (params.maxPacketLifeTime && typeof params.maxPacketLifeTime !== 'number')
	        throw new TypeError('invalid params.maxPacketLifeTime');
	    // maxRetransmits is optional.
	    if (params.maxRetransmits && typeof params.maxRetransmits !== 'number')
	        throw new TypeError('invalid params.maxRetransmits');
	    if (params.maxPacketLifeTime && params.maxRetransmits)
	        throw new TypeError('cannot provide both maxPacketLifeTime and maxRetransmits');
	    if (orderedGiven &&
	        params.ordered &&
	        (params.maxPacketLifeTime || params.maxRetransmits)) {
	        throw new TypeError('cannot be ordered with maxPacketLifeTime or maxRetransmits');
	    }
	    else if (!orderedGiven && (params.maxPacketLifeTime || params.maxRetransmits)) {
	        params.ordered = false;
	    }
	    // priority is optional.
	    if (params.priority && typeof params.priority !== 'string')
	        throw new TypeError('invalid params.priority');
	    // label is optional.
	    if (params.label && typeof params.label !== 'string')
	        throw new TypeError('invalid params.label');
	    // protocol is optional.
	    if (params.protocol && typeof params.protocol !== 'string')
	        throw new TypeError('invalid params.protocol');
	}
	exports.validateSctpStreamParameters = validateSctpStreamParameters;
	/**
	 * Generate extended RTP capabilities for sending and receiving.
	 */
	function getExtendedRtpCapabilities(localCaps, remoteCaps) {
	    const extendedRtpCapabilities = {
	        codecs: [],
	        headerExtensions: []
	    };
	    // Match media codecs and keep the order preferred by remoteCaps.
	    for (const remoteCodec of remoteCaps.codecs || []) {
	        if (isRtxCodec(remoteCodec))
	            continue;
	        const matchingLocalCodec = (localCaps.codecs || [])
	            .find((localCodec) => (matchCodecs(localCodec, remoteCodec, { strict: true, modify: true })));
	        if (!matchingLocalCodec)
	            continue;
	        const extendedCodec = {
	            mimeType: matchingLocalCodec.mimeType,
	            kind: matchingLocalCodec.kind,
	            clockRate: matchingLocalCodec.clockRate,
	            channels: matchingLocalCodec.channels,
	            localPayloadType: matchingLocalCodec.preferredPayloadType,
	            localRtxPayloadType: undefined,
	            remotePayloadType: remoteCodec.preferredPayloadType,
	            remoteRtxPayloadType: undefined,
	            localParameters: matchingLocalCodec.parameters,
	            remoteParameters: remoteCodec.parameters,
	            rtcpFeedback: reduceRtcpFeedback(matchingLocalCodec, remoteCodec)
	        };
	        extendedRtpCapabilities.codecs.push(extendedCodec);
	    }
	    // Match RTX codecs.
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        const matchingLocalRtxCodec = localCaps.codecs
	            .find((localCodec) => (isRtxCodec(localCodec) &&
	            localCodec.parameters.apt === extendedCodec.localPayloadType));
	        const matchingRemoteRtxCodec = remoteCaps.codecs
	            .find((remoteCodec) => (isRtxCodec(remoteCodec) &&
	            remoteCodec.parameters.apt === extendedCodec.remotePayloadType));
	        if (matchingLocalRtxCodec && matchingRemoteRtxCodec) {
	            extendedCodec.localRtxPayloadType = matchingLocalRtxCodec.preferredPayloadType;
	            extendedCodec.remoteRtxPayloadType = matchingRemoteRtxCodec.preferredPayloadType;
	        }
	    }
	    // Match header extensions.
	    for (const remoteExt of remoteCaps.headerExtensions) {
	        const matchingLocalExt = localCaps.headerExtensions
	            .find((localExt) => (matchHeaderExtensions(localExt, remoteExt)));
	        if (!matchingLocalExt)
	            continue;
	        const extendedExt = {
	            kind: remoteExt.kind,
	            uri: remoteExt.uri,
	            sendId: matchingLocalExt.preferredId,
	            recvId: remoteExt.preferredId,
	            encrypt: matchingLocalExt.preferredEncrypt,
	            direction: 'sendrecv'
	        };
	        switch (remoteExt.direction) {
	            case 'sendrecv':
	                extendedExt.direction = 'sendrecv';
	                break;
	            case 'recvonly':
	                extendedExt.direction = 'sendonly';
	                break;
	            case 'sendonly':
	                extendedExt.direction = 'recvonly';
	                break;
	            case 'inactive':
	                extendedExt.direction = 'inactive';
	                break;
	        }
	        extendedRtpCapabilities.headerExtensions.push(extendedExt);
	    }
	    return extendedRtpCapabilities;
	}
	exports.getExtendedRtpCapabilities = getExtendedRtpCapabilities;
	/**
	 * Generate RTP capabilities for receiving media based on the given extended
	 * RTP capabilities.
	 */
	function getRecvRtpCapabilities(extendedRtpCapabilities) {
	    const rtpCapabilities = {
	        codecs: [],
	        headerExtensions: []
	    };
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        const codec = {
	            mimeType: extendedCodec.mimeType,
	            kind: extendedCodec.kind,
	            preferredPayloadType: extendedCodec.remotePayloadType,
	            clockRate: extendedCodec.clockRate,
	            channels: extendedCodec.channels,
	            parameters: extendedCodec.localParameters,
	            rtcpFeedback: extendedCodec.rtcpFeedback
	        };
	        rtpCapabilities.codecs.push(codec);
	        // Add RTX codec.
	        if (!extendedCodec.remoteRtxPayloadType)
	            continue;
	        const rtxCodec = {
	            mimeType: `${extendedCodec.kind}/rtx`,
	            kind: extendedCodec.kind,
	            preferredPayloadType: extendedCodec.remoteRtxPayloadType,
	            clockRate: extendedCodec.clockRate,
	            parameters: {
	                apt: extendedCodec.remotePayloadType
	            },
	            rtcpFeedback: []
	        };
	        rtpCapabilities.codecs.push(rtxCodec);
	        // TODO: In the future, we need to add FEC, CN, etc, codecs.
	    }
	    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
	        // Ignore RTP extensions not valid for receiving.
	        if (extendedExtension.direction !== 'sendrecv' &&
	            extendedExtension.direction !== 'recvonly') {
	            continue;
	        }
	        const ext = {
	            kind: extendedExtension.kind,
	            uri: extendedExtension.uri,
	            preferredId: extendedExtension.recvId,
	            preferredEncrypt: extendedExtension.encrypt,
	            direction: extendedExtension.direction
	        };
	        rtpCapabilities.headerExtensions.push(ext);
	    }
	    return rtpCapabilities;
	}
	exports.getRecvRtpCapabilities = getRecvRtpCapabilities;
	/**
	 * Generate RTP parameters of the given kind for sending media.
	 * NOTE: mid, encodings and rtcp fields are left empty.
	 */
	function getSendingRtpParameters(kind, extendedRtpCapabilities) {
	    const rtpParameters = {
	        mid: undefined,
	        codecs: [],
	        headerExtensions: [],
	        encodings: [],
	        rtcp: {}
	    };
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        if (extendedCodec.kind !== kind)
	            continue;
	        const codec = {
	            mimeType: extendedCodec.mimeType,
	            payloadType: extendedCodec.localPayloadType,
	            clockRate: extendedCodec.clockRate,
	            channels: extendedCodec.channels,
	            parameters: extendedCodec.localParameters,
	            rtcpFeedback: extendedCodec.rtcpFeedback
	        };
	        rtpParameters.codecs.push(codec);
	        // Add RTX codec.
	        if (extendedCodec.localRtxPayloadType) {
	            const rtxCodec = {
	                mimeType: `${extendedCodec.kind}/rtx`,
	                payloadType: extendedCodec.localRtxPayloadType,
	                clockRate: extendedCodec.clockRate,
	                parameters: {
	                    apt: extendedCodec.localPayloadType
	                },
	                rtcpFeedback: []
	            };
	            rtpParameters.codecs.push(rtxCodec);
	        }
	    }
	    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
	        // Ignore RTP extensions of a different kind and those not valid for sending.
	        if ((extendedExtension.kind && extendedExtension.kind !== kind) ||
	            (extendedExtension.direction !== 'sendrecv' &&
	                extendedExtension.direction !== 'sendonly')) {
	            continue;
	        }
	        const ext = {
	            uri: extendedExtension.uri,
	            id: extendedExtension.sendId,
	            encrypt: extendedExtension.encrypt,
	            parameters: {}
	        };
	        rtpParameters.headerExtensions.push(ext);
	    }
	    return rtpParameters;
	}
	exports.getSendingRtpParameters = getSendingRtpParameters;
	/**
	 * Generate RTP parameters of the given kind suitable for the remote SDP answer.
	 */
	function getSendingRemoteRtpParameters(kind, extendedRtpCapabilities) {
	    const rtpParameters = {
	        mid: undefined,
	        codecs: [],
	        headerExtensions: [],
	        encodings: [],
	        rtcp: {}
	    };
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        if (extendedCodec.kind !== kind)
	            continue;
	        const codec = {
	            mimeType: extendedCodec.mimeType,
	            payloadType: extendedCodec.localPayloadType,
	            clockRate: extendedCodec.clockRate,
	            channels: extendedCodec.channels,
	            parameters: extendedCodec.remoteParameters,
	            rtcpFeedback: extendedCodec.rtcpFeedback
	        };
	        rtpParameters.codecs.push(codec);
	        // Add RTX codec.
	        if (extendedCodec.localRtxPayloadType) {
	            const rtxCodec = {
	                mimeType: `${extendedCodec.kind}/rtx`,
	                payloadType: extendedCodec.localRtxPayloadType,
	                clockRate: extendedCodec.clockRate,
	                parameters: {
	                    apt: extendedCodec.localPayloadType
	                },
	                rtcpFeedback: []
	            };
	            rtpParameters.codecs.push(rtxCodec);
	        }
	    }
	    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
	        // Ignore RTP extensions of a different kind and those not valid for sending.
	        if ((extendedExtension.kind && extendedExtension.kind !== kind) ||
	            (extendedExtension.direction !== 'sendrecv' &&
	                extendedExtension.direction !== 'sendonly')) {
	            continue;
	        }
	        const ext = {
	            uri: extendedExtension.uri,
	            id: extendedExtension.sendId,
	            encrypt: extendedExtension.encrypt,
	            parameters: {}
	        };
	        rtpParameters.headerExtensions.push(ext);
	    }
	    // Reduce codecs' RTCP feedback. Use Transport-CC if available, REMB otherwise.
	    if (rtpParameters.headerExtensions.some((ext) => (ext.uri === 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01'))) {
	        for (const codec of rtpParameters.codecs) {
	            codec.rtcpFeedback = (codec.rtcpFeedback || [])
	                .filter((fb) => fb.type !== 'goog-remb');
	        }
	    }
	    else if (rtpParameters.headerExtensions.some((ext) => (ext.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time'))) {
	        for (const codec of rtpParameters.codecs) {
	            codec.rtcpFeedback = (codec.rtcpFeedback || [])
	                .filter((fb) => fb.type !== 'transport-cc');
	        }
	    }
	    else {
	        for (const codec of rtpParameters.codecs) {
	            codec.rtcpFeedback = (codec.rtcpFeedback || [])
	                .filter((fb) => (fb.type !== 'transport-cc' &&
	                fb.type !== 'goog-remb'));
	        }
	    }
	    return rtpParameters;
	}
	exports.getSendingRemoteRtpParameters = getSendingRemoteRtpParameters;
	/**
	 * Reduce given codecs by returning an array of codecs "compatible" with the
	 * given capability codec. If no capability codec is given, take the first
	 * one(s).
	 *
	 * Given codecs must be generated by ortc.getSendingRtpParameters() or
	 * ortc.getSendingRemoteRtpParameters().
	 *
	 * The returned array of codecs also include a RTX codec if available.
	 */
	function reduceCodecs(codecs, capCodec) {
	    const filteredCodecs = [];
	    // If no capability codec is given, take the first one (and RTX).
	    if (!capCodec) {
	        filteredCodecs.push(codecs[0]);
	        if (isRtxCodec(codecs[1]))
	            filteredCodecs.push(codecs[1]);
	    }
	    // Otherwise look for a compatible set of codecs.
	    else {
	        for (let idx = 0; idx < codecs.length; ++idx) {
	            if (matchCodecs(codecs[idx], capCodec)) {
	                filteredCodecs.push(codecs[idx]);
	                if (isRtxCodec(codecs[idx + 1]))
	                    filteredCodecs.push(codecs[idx + 1]);
	                break;
	            }
	        }
	        if (filteredCodecs.length === 0)
	            throw new TypeError('no matching codec found');
	    }
	    return filteredCodecs;
	}
	exports.reduceCodecs = reduceCodecs;
	/**
	 * Create RTP parameters for a Consumer for the RTP probator.
	 */
	function generateProbatorRtpParameters(videoRtpParameters) {
	    // Clone given reference video RTP parameters.
	    videoRtpParameters = utils.clone(videoRtpParameters);
	    // This may throw.
	    validateRtpParameters(videoRtpParameters);
	    const rtpParameters = {
	        mid: RTP_PROBATOR_MID,
	        codecs: [],
	        headerExtensions: [],
	        encodings: [{ ssrc: RTP_PROBATOR_SSRC }],
	        rtcp: { cname: 'probator' }
	    };
	    rtpParameters.codecs.push(videoRtpParameters.codecs[0]);
	    rtpParameters.codecs[0].payloadType = RTP_PROBATOR_CODEC_PAYLOAD_TYPE;
	    rtpParameters.headerExtensions = videoRtpParameters.headerExtensions;
	    return rtpParameters;
	}
	exports.generateProbatorRtpParameters = generateProbatorRtpParameters;
	/**
	 * Whether media can be sent based on the given RTP capabilities.
	 */
	function canSend(kind, extendedRtpCapabilities) {
	    return extendedRtpCapabilities.codecs.
	        some((codec) => codec.kind === kind);
	}
	exports.canSend = canSend;
	/**
	 * Whether the given RTP parameters can be received with the given RTP
	 * capabilities.
	 */
	function canReceive(rtpParameters, extendedRtpCapabilities) {
	    // This may throw.
	    validateRtpParameters(rtpParameters);
	    if (rtpParameters.codecs.length === 0)
	        return false;
	    const firstMediaCodec = rtpParameters.codecs[0];
	    return extendedRtpCapabilities.codecs
	        .some((codec) => codec.remotePayloadType === firstMediaCodec.payloadType);
	}
	exports.canReceive = canReceive;
	function isRtxCodec(codec) {
	    if (!codec)
	        return false;
	    return /.+\/rtx$/i.test(codec.mimeType);
	}
	function matchCodecs(aCodec, bCodec, { strict = false, modify = false } = {}) {
	    const aMimeType = aCodec.mimeType.toLowerCase();
	    const bMimeType = bCodec.mimeType.toLowerCase();
	    if (aMimeType !== bMimeType)
	        return false;
	    if (aCodec.clockRate !== bCodec.clockRate)
	        return false;
	    if (aCodec.channels !== bCodec.channels)
	        return false;
	    // Per codec special checks.
	    switch (aMimeType) {
	        case 'video/h264':
	            {
	                const aPacketizationMode = aCodec.parameters['packetization-mode'] || 0;
	                const bPacketizationMode = bCodec.parameters['packetization-mode'] || 0;
	                if (aPacketizationMode !== bPacketizationMode)
	                    return false;
	                // If strict matching check profile-level-id.
	                if (strict) {
	                    if (!h264.isSameProfile(aCodec.parameters, bCodec.parameters))
	                        return false;
	                    let selectedProfileLevelId;
	                    try {
	                        selectedProfileLevelId =
	                            h264.generateProfileLevelIdForAnswer(aCodec.parameters, bCodec.parameters);
	                    }
	                    catch (error) {
	                        return false;
	                    }
	                    if (modify) {
	                        if (selectedProfileLevelId)
	                            aCodec.parameters['profile-level-id'] = selectedProfileLevelId;
	                        else
	                            delete aCodec.parameters['profile-level-id'];
	                    }
	                }
	                break;
	            }
	        case 'video/vp9':
	            {
	                // If strict matching check profile-id.
	                if (strict) {
	                    const aProfileId = aCodec.parameters['profile-id'] || 0;
	                    const bProfileId = bCodec.parameters['profile-id'] || 0;
	                    if (aProfileId !== bProfileId)
	                        return false;
	                }
	                break;
	            }
	    }
	    return true;
	}
	function matchHeaderExtensions(aExt, bExt) {
	    if (aExt.kind && bExt.kind && aExt.kind !== bExt.kind)
	        return false;
	    if (aExt.uri !== bExt.uri)
	        return false;
	    return true;
	}
	function reduceRtcpFeedback(codecA, codecB) {
	    const reducedRtcpFeedback = [];
	    for (const aFb of codecA.rtcpFeedback || []) {
	        const matchingBFb = (codecB.rtcpFeedback || [])
	            .find((bFb) => (bFb.type === aFb.type &&
	            (bFb.parameter === aFb.parameter || (!bFb.parameter && !aFb.parameter))));
	        if (matchingBFb)
	            reducedRtcpFeedback.push(matchingBFb);
	    }
	    return reducedRtcpFeedback;
	}
	});

	unwrapExports(ortc);
	var ortc_1 = ortc.validateRtpCapabilities;
	var ortc_2 = ortc.validateRtpCodecCapability;
	var ortc_3 = ortc.validateRtcpFeedback;
	var ortc_4 = ortc.validateRtpHeaderExtension;
	var ortc_5 = ortc.validateRtpParameters;
	var ortc_6 = ortc.validateRtpCodecParameters;
	var ortc_7 = ortc.validateRtpHeaderExtensionParameters;
	var ortc_8 = ortc.validateRtpEncodingParameters;
	var ortc_9 = ortc.validateRtcpParameters;
	var ortc_10 = ortc.validateSctpCapabilities;
	var ortc_11 = ortc.validateNumSctpStreams;
	var ortc_12 = ortc.validateSctpParameters;
	var ortc_13 = ortc.validateSctpStreamParameters;
	var ortc_14 = ortc.getExtendedRtpCapabilities;
	var ortc_15 = ortc.getRecvRtpCapabilities;
	var ortc_16 = ortc.getSendingRtpParameters;
	var ortc_17 = ortc.getSendingRemoteRtpParameters;
	var ortc_18 = ortc.reduceCodecs;
	var ortc_19 = ortc.generateProbatorRtpParameters;
	var ortc_20 = ortc.canSend;
	var ortc_21 = ortc.canReceive;

	var lib = createCommonjsModule(function (module, exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	class AwaitQueue {
	    constructor({ ClosedErrorClass, StoppedErrorClass } = {
	        ClosedErrorClass: Error,
	        StoppedErrorClass: Error
	    }) {
	        // Closed flag.
	        this._closed = false;
	        // Queue of pending tasks.
	        this._pendingTasks = [];
	        // Error class used when rejecting a task due to AwaitQueue being closed.
	        this._ClosedErrorClass = Error;
	        // Error class used when rejecting a task due to AwaitQueue being stopped.
	        this._StoppedErrorClass = Error;
	        this._ClosedErrorClass = ClosedErrorClass;
	        this._StoppedErrorClass = StoppedErrorClass;
	    }
	    /**
	     * Closes the AwaitQueue. Pending tasks will be rejected with ClosedErrorClass
	     * error.
	     */
	    close() {
	        this._closed = true;
	    }
	    /**
	     * Accepts a task as argument and enqueues it after pending tasks. Once
	     * processed, the push() method resolves (or rejects) with the result
	     * returned by the given task.
	     *
	     * The given task must return a Promise or directly a value.
	     */
	    push(task) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (typeof task !== 'function')
	                throw new TypeError('given task is not a function');
	            return new Promise((resolve, reject) => {
	                const pendingTask = {
	                    execute: task,
	                    resolve,
	                    reject,
	                    stopped: false
	                };
	                // Append task to the queue.
	                this._pendingTasks.push(pendingTask);
	                // And run it if this is the only task in the queue.
	                if (this._pendingTasks.length === 1)
	                    this._next();
	            });
	        });
	    }
	    stop() {
	        for (const pendingTask of this._pendingTasks) {
	            pendingTask.stopped = true;
	            pendingTask.reject(new this._StoppedErrorClass('AwaitQueue stopped'));
	        }
	        // Enpty the pending tasks array.
	        this._pendingTasks.length = 0;
	    }
	    _next() {
	        return __awaiter(this, void 0, void 0, function* () {
	            // Take the first pending task.
	            const pendingTask = this._pendingTasks[0];
	            if (!pendingTask)
	                return;
	            // Execute it.
	            yield this._executeTask(pendingTask);
	            // Remove the first pending task (the completed one) from the queue.
	            this._pendingTasks.shift();
	            // And continue.
	            this._next();
	        });
	    }
	    _executeTask(pendingTask) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this._closed) {
	                pendingTask.reject(new this._ClosedErrorClass('AwaitQueue closed'));
	                return;
	            }
	            // If stop() was called for this task, ignore it.
	            if (pendingTask.stopped)
	                return;
	            try {
	                const result = yield pendingTask.execute();
	                if (this._closed) {
	                    pendingTask.reject(new this._ClosedErrorClass('AwaitQueue closed'));
	                    return;
	                }
	                // If stop() was called for this task, ignore it.
	                if (pendingTask.stopped)
	                    return;
	                // Resolve the task with the returned result (if any).
	                pendingTask.resolve(result);
	            }
	            catch (error) {
	                if (this._closed) {
	                    pendingTask.reject(new this._ClosedErrorClass('AwaitQueue closed'));
	                    return;
	                }
	                // If stop() was called for this task, ignore it.
	                if (pendingTask.stopped)
	                    return;
	                // Reject the task with its own error.
	                pendingTask.reject(error);
	            }
	        });
	    }
	}
	exports.AwaitQueue = AwaitQueue;
	});

	unwrapExports(lib);
	var lib_1 = lib.AwaitQueue;

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	var EnhancedEventEmitter_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	const logger = new Logger_1.Logger('EnhancedEventEmitter');
	class EnhancedEventEmitter extends EventEmitter.EventEmitter {
	    constructor() {
	        super();
	        this.setMaxListeners(Infinity);
	    }
	    safeEmit(event, ...args) {
	        const numListeners = this.listenerCount(event);
	        try {
	            return this.emit(event, ...args);
	        }
	        catch (error) {
	            logger.error('safeEmit() | event listener threw an error [event:%s]:%o', event, error);
	            return Boolean(numListeners);
	        }
	    }
	    async safeEmitAsPromise(event, ...args) {
	        return new Promise((resolve, reject) => (this.safeEmit(event, ...args, resolve, reject)));
	    }
	}
	exports.EnhancedEventEmitter = EnhancedEventEmitter;
	});

	unwrapExports(EnhancedEventEmitter_1);
	var EnhancedEventEmitter_2 = EnhancedEventEmitter_1.EnhancedEventEmitter;

	var Producer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	const logger = new Logger_1.Logger('Producer');
	class Producer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits trackended
	     * @emits @replacetrack - (track: MediaStreamTrack | null)
	     * @emits @setmaxspatiallayer - (spatialLayer: string)
	     * @emits @setrtpencodingparameters - (params: any)
	     * @emits @getstats
	     * @emits @close
	     */
	    constructor({ id, localId, rtpSender, track, rtpParameters, stopTracks, disableTrackOnPause, zeroRtpOnPause, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._localId = localId;
	        this._rtpSender = rtpSender;
	        this._track = track;
	        this._kind = track.kind;
	        this._rtpParameters = rtpParameters;
	        this._paused = disableTrackOnPause ? !track.enabled : false;
	        this._maxSpatialLayer = undefined;
	        this._stopTracks = stopTracks;
	        this._disableTrackOnPause = disableTrackOnPause;
	        this._zeroRtpOnPause = zeroRtpOnPause;
	        this._appData = appData;
	        this._onTrackEnded = this._onTrackEnded.bind(this);
	        // NOTE: Minor issue. If zeroRtpOnPause is true, we cannot emit the
	        // '@replacetrack' event here, so RTCRtpSender.track won't be null.
	        this._handleTrack();
	    }
	    /**
	     * Producer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Local id.
	     */
	    get localId() {
	        return this._localId;
	    }
	    /**
	     * Whether the Producer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * Media kind.
	     */
	    get kind() {
	        return this._kind;
	    }
	    /**
	     * Associated RTCRtpSender.
	     */
	    get rtpSender() {
	        return this._rtpSender;
	    }
	    /**
	     * The associated track.
	     */
	    get track() {
	        return this._track;
	    }
	    /**
	     * RTP parameters.
	     */
	    get rtpParameters() {
	        return this._rtpParameters;
	    }
	    /**
	     * Whether the Producer is paused.
	     */
	    get paused() {
	        return this._paused;
	    }
	    /**
	     * Max spatial layer.
	     *
	     * @type {Number | undefined}
	     */
	    get maxSpatialLayer() {
	        return this._maxSpatialLayer;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the Producer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._destroyTrack();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._destroyTrack();
	        this.safeEmit('transportclose');
	    }
	    /**
	     * Get associated RTCRtpSender stats.
	     */
	    async getStats() {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        return this.safeEmitAsPromise('@getstats');
	    }
	    /**
	     * Pauses sending media.
	     */
	    pause() {
	        logger.debug('pause()');
	        if (this._closed) {
	            logger.error('pause() | Producer closed');
	            return;
	        }
	        this._paused = true;
	        if (this._track && this._disableTrackOnPause) {
	            this._track.enabled = false;
	        }
	        if (this._zeroRtpOnPause) {
	            this.safeEmitAsPromise('@replacetrack', null)
	                .catch(() => { });
	        }
	    }
	    /**
	     * Resumes sending media.
	     */
	    resume() {
	        logger.debug('resume()');
	        if (this._closed) {
	            logger.error('resume() | Producer closed');
	            return;
	        }
	        this._paused = false;
	        if (this._track && this._disableTrackOnPause) {
	            this._track.enabled = true;
	        }
	        if (this._zeroRtpOnPause) {
	            this.safeEmitAsPromise('@replacetrack', this._track)
	                .catch(() => { });
	        }
	    }
	    /**
	     * Replaces the current track with a new one or null.
	     */
	    async replaceTrack({ track }) {
	        logger.debug('replaceTrack() [track:%o]', track);
	        if (this._closed) {
	            // This must be done here. Otherwise there is no chance to stop the given
	            // track.
	            if (track && this._stopTracks) {
	                try {
	                    track.stop();
	                }
	                catch (error) { }
	            }
	            throw new errors.InvalidStateError('closed');
	        }
	        else if (track && track.readyState === 'ended') {
	            throw new errors.InvalidStateError('track ended');
	        }
	        // Do nothing if this is the same track as the current handled one.
	        if (track === this._track) {
	            logger.debug('replaceTrack() | same track, ignored');
	            return;
	        }
	        if (!this._zeroRtpOnPause || !this._paused) {
	            await this.safeEmitAsPromise('@replacetrack', track);
	        }
	        // Destroy the previous track.
	        this._destroyTrack();
	        // Set the new track.
	        this._track = track;
	        // If this Producer was paused/resumed and the state of the new
	        // track does not match, fix it.
	        if (track && this._disableTrackOnPause) {
	            if (!this._paused)
	                this._track.enabled = true;
	            else if (this._paused)
	                this._track.enabled = false;
	        }
	        // Handle the effective track.
	        this._handleTrack();
	    }
	    /**
	     * Sets the video max spatial layer to be sent.
	     */
	    async setMaxSpatialLayer(spatialLayer) {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (this._kind !== 'video')
	            throw new errors.UnsupportedError('not a video Producer');
	        else if (typeof spatialLayer !== 'number')
	            throw new TypeError('invalid spatialLayer');
	        if (spatialLayer === this._maxSpatialLayer)
	            return;
	        await this.safeEmitAsPromise('@setmaxspatiallayer', spatialLayer);
	        this._maxSpatialLayer = spatialLayer;
	    }
	    /**
	     * Sets the DSCP value.
	     */
	    async setRtpEncodingParameters(params) {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (typeof params !== 'object')
	            throw new TypeError('invalid params');
	        await this.safeEmitAsPromise('@setrtpencodingparameters', params);
	    }
	    _onTrackEnded() {
	        logger.debug('track "ended" event');
	        this.safeEmit('trackended');
	    }
	    _handleTrack() {
	        if (!this._track)
	            return;
	        this._track.addEventListener('ended', this._onTrackEnded);
	    }
	    _destroyTrack() {
	        if (!this._track)
	            return;
	        try {
	            this._track.removeEventListener('ended', this._onTrackEnded);
	            // Just stop the track unless the app set stopTracks: false.
	            if (this._stopTracks)
	                this._track.stop();
	        }
	        catch (error) { }
	    }
	}
	exports.Producer = Producer;
	});

	unwrapExports(Producer_1);
	var Producer_2 = Producer_1.Producer;

	var Consumer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	const logger = new Logger_1.Logger('Consumer');
	class Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits trackended
	     * @emits @getstats
	     * @emits @close
	     */
	    constructor({ id, localId, producerId, rtpReceiver, track, rtpParameters, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._localId = localId;
	        this._producerId = producerId;
	        this._rtpReceiver = rtpReceiver;
	        this._track = track;
	        this._rtpParameters = rtpParameters;
	        this._paused = !track.enabled;
	        this._appData = appData;
	        this._onTrackEnded = this._onTrackEnded.bind(this);
	        this._handleTrack();
	    }
	    /**
	     * Consumer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Local id.
	     */
	    get localId() {
	        return this._localId;
	    }
	    /**
	     * Associated Producer id.
	     */
	    get producerId() {
	        return this._producerId;
	    }
	    /**
	     * Whether the Consumer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * Media kind.
	     */
	    get kind() {
	        return this._track.kind;
	    }
	    /**
	     * Associated RTCRtpReceiver.
	     */
	    get rtpReceiver() {
	        return this._rtpReceiver;
	    }
	    /**
	     * The associated track.
	     */
	    get track() {
	        return this._track;
	    }
	    /**
	     * RTP parameters.
	     */
	    get rtpParameters() {
	        return this._rtpParameters;
	    }
	    /**
	     * Whether the Consumer is paused.
	     */
	    get paused() {
	        return this._paused;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the Consumer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._destroyTrack();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._destroyTrack();
	        this.safeEmit('transportclose');
	    }
	    /**
	     * Get associated RTCRtpReceiver stats.
	     */
	    async getStats() {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        return this.safeEmitAsPromise('@getstats');
	    }
	    /**
	     * Pauses receiving media.
	     */
	    pause() {
	        logger.debug('pause()');
	        if (this._closed) {
	            logger.error('pause() | Consumer closed');
	            return;
	        }
	        this._paused = true;
	        this._track.enabled = false;
	    }
	    /**
	     * Resumes receiving media.
	     */
	    resume() {
	        logger.debug('resume()');
	        if (this._closed) {
	            logger.error('resume() | Consumer closed');
	            return;
	        }
	        this._paused = false;
	        this._track.enabled = true;
	    }
	    _onTrackEnded() {
	        logger.debug('track "ended" event');
	        this.safeEmit('trackended');
	    }
	    _handleTrack() {
	        this._track.addEventListener('ended', this._onTrackEnded);
	    }
	    _destroyTrack() {
	        try {
	            this._track.removeEventListener('ended', this._onTrackEnded);
	            this._track.stop();
	        }
	        catch (error) { }
	    }
	}
	exports.Consumer = Consumer;
	});

	unwrapExports(Consumer_1);
	var Consumer_2 = Consumer_1.Consumer;

	var DataProducer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	const logger = new Logger_1.Logger('DataProducer');
	class DataProducer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits open
	     * @emits error - (error: Error)
	     * @emits close
	     * @emits bufferedamountlow
	     * @emits @close
	     */
	    constructor({ id, dataChannel, sctpStreamParameters, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._dataChannel = dataChannel;
	        this._sctpStreamParameters = sctpStreamParameters;
	        this._appData = appData;
	        this._handleDataChannel();
	    }
	    /**
	     * DataProducer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Whether the DataProducer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * SCTP stream parameters.
	     */
	    get sctpStreamParameters() {
	        return this._sctpStreamParameters;
	    }
	    /**
	     * DataChannel readyState.
	     */
	    get readyState() {
	        return this._dataChannel.readyState;
	    }
	    /**
	     * DataChannel label.
	     */
	    get label() {
	        return this._dataChannel.label;
	    }
	    /**
	     * DataChannel protocol.
	     */
	    get protocol() {
	        return this._dataChannel.protocol;
	    }
	    /**
	     * DataChannel bufferedAmount.
	     */
	    get bufferedAmount() {
	        return this._dataChannel.bufferedAmount;
	    }
	    /**
	     * DataChannel bufferedAmountLowThreshold.
	     */
	    get bufferedAmountLowThreshold() {
	        return this._dataChannel.bufferedAmountLowThreshold;
	    }
	    /**
	     * Set DataChannel bufferedAmountLowThreshold.
	     */
	    set bufferedAmountLowThreshold(bufferedAmountLowThreshold) {
	        this._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the DataProducer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.safeEmit('transportclose');
	    }
	    /**
	     * Send a message.
	     *
	     * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.
	     */
	    send(data) {
	        logger.debug('send()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        this._dataChannel.send(data);
	    }
	    _handleDataChannel() {
	        this._dataChannel.addEventListener('open', () => {
	            if (this._closed)
	                return;
	            logger.debug('DataChannel "open" event');
	            this.safeEmit('open');
	        });
	        this._dataChannel.addEventListener('error', (event) => {
	            if (this._closed)
	                return;
	            let { error } = event;
	            if (!error)
	                error = new Error('unknown DataChannel error');
	            if (error.errorDetail === 'sctp-failure') {
	                logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);
	            }
	            else {
	                logger.error('DataChannel "error" event: %o', error);
	            }
	            this.safeEmit('error', error);
	        });
	        this._dataChannel.addEventListener('close', () => {
	            if (this._closed)
	                return;
	            logger.warn('DataChannel "close" event');
	            this._closed = true;
	            this.emit('@close');
	            this.safeEmit('close');
	        });
	        this._dataChannel.addEventListener('message', () => {
	            if (this._closed)
	                return;
	            logger.warn('DataChannel "message" event in a DataProducer, message discarded');
	        });
	        this._dataChannel.addEventListener('bufferedamountlow', () => {
	            if (this._closed)
	                return;
	            this.safeEmit('bufferedamountlow');
	        });
	    }
	}
	exports.DataProducer = DataProducer;
	});

	unwrapExports(DataProducer_1);
	var DataProducer_2 = DataProducer_1.DataProducer;

	var DataConsumer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	const logger = new Logger_1.Logger('DataConsumer');
	class DataConsumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits open
	     * @emits error - (error: Error)
	     * @emits close
	     * @emits message - (message: any)
	     * @emits @close
	     */
	    constructor({ id, dataProducerId, dataChannel, sctpStreamParameters, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._dataProducerId = dataProducerId;
	        this._dataChannel = dataChannel;
	        this._sctpStreamParameters = sctpStreamParameters;
	        this._appData = appData;
	        this._handleDataChannel();
	    }
	    /**
	     * DataConsumer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Associated DataProducer id.
	     */
	    get dataProducerId() {
	        return this._dataProducerId;
	    }
	    /**
	     * Whether the DataConsumer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * SCTP stream parameters.
	     */
	    get sctpStreamParameters() {
	        return this._sctpStreamParameters;
	    }
	    /**
	     * DataChannel readyState.
	     */
	    get readyState() {
	        return this._dataChannel.readyState;
	    }
	    /**
	     * DataChannel label.
	     */
	    get label() {
	        return this._dataChannel.label;
	    }
	    /**
	     * DataChannel protocol.
	     */
	    get protocol() {
	        return this._dataChannel.protocol;
	    }
	    /**
	     * DataChannel binaryType.
	     */
	    get binaryType() {
	        return this._dataChannel.binaryType;
	    }
	    /**
	     * Set DataChannel binaryType.
	     */
	    set binaryType(binaryType) {
	        this._dataChannel.binaryType = binaryType;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the DataConsumer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.safeEmit('transportclose');
	    }
	    _handleDataChannel() {
	        this._dataChannel.addEventListener('open', () => {
	            if (this._closed)
	                return;
	            logger.debug('DataChannel "open" event');
	            this.safeEmit('open');
	        });
	        this._dataChannel.addEventListener('error', (event) => {
	            if (this._closed)
	                return;
	            let { error } = event;
	            if (!error)
	                error = new Error('unknown DataChannel error');
	            if (error.errorDetail === 'sctp-failure') {
	                logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);
	            }
	            else {
	                logger.error('DataChannel "error" event: %o', error);
	            }
	            this.safeEmit('error', error);
	        });
	        this._dataChannel.addEventListener('close', () => {
	            if (this._closed)
	                return;
	            logger.warn('DataChannel "close" event');
	            this._closed = true;
	            this.emit('@close');
	            this.safeEmit('close');
	        });
	        this._dataChannel.addEventListener('message', (event) => {
	            if (this._closed)
	                return;
	            this.safeEmit('message', event.data);
	        });
	    }
	}
	exports.DataConsumer = DataConsumer;
	});

	unwrapExports(DataConsumer_1);
	var DataConsumer_2 = DataConsumer_1.DataConsumer;

	var Transport_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);




	const logger = new Logger_1.Logger('Transport');
	class Transport extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits connect - (transportLocalParameters: any, callback: Function, errback: Function)
	     * @emits connectionstatechange - (connectionState: ConnectionState)
	     * @emits produce - (producerLocalParameters: any, callback: Function, errback: Function)
	     * @emits producedata - (dataProducerLocalParameters: any, callback: Function, errback: Function)
	     */
	    constructor({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, handlerFactory, extendedRtpCapabilities, canProduceByKind }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        // Transport connection state.
	        this._connectionState = 'new';
	        // Map of Producers indexed by id.
	        this._producers = new Map();
	        // Map of Consumers indexed by id.
	        this._consumers = new Map();
	        // Map of DataProducers indexed by id.
	        this._dataProducers = new Map();
	        // Map of DataConsumers indexed by id.
	        this._dataConsumers = new Map();
	        // Whether the Consumer for RTP probation has been created.
	        this._probatorConsumerCreated = false;
	        // AwaitQueue instance to make async tasks happen sequentially.
	        this._awaitQueue = new lib.AwaitQueue({ ClosedErrorClass: errors.InvalidStateError });
	        logger.debug('constructor() [id:%s, direction:%s]', id, direction);
	        this._id = id;
	        this._direction = direction;
	        this._extendedRtpCapabilities = extendedRtpCapabilities;
	        this._canProduceByKind = canProduceByKind;
	        this._maxSctpMessageSize =
	            sctpParameters ? sctpParameters.maxMessageSize : null;
	        // Clone and sanitize additionalSettings.
	        additionalSettings = utils$1.clone(additionalSettings);
	        delete additionalSettings.iceServers;
	        delete additionalSettings.iceTransportPolicy;
	        delete additionalSettings.bundlePolicy;
	        delete additionalSettings.rtcpMuxPolicy;
	        delete additionalSettings.sdpSemantics;
	        this._handler = handlerFactory();
	        this._handler.run({
	            direction,
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            iceServers,
	            iceTransportPolicy,
	            additionalSettings,
	            proprietaryConstraints,
	            extendedRtpCapabilities
	        });
	        this._appData = appData;
	        this._handleHandler();
	    }
	    /**
	     * Transport id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Whether the Transport is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * Transport direction.
	     */
	    get direction() {
	        return this._direction;
	    }
	    /**
	     * RTC handler instance.
	     */
	    get handler() {
	        return this._handler;
	    }
	    /**
	     * Connection state.
	     */
	    get connectionState() {
	        return this._connectionState;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Close the Transport.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        // Close the AwaitQueue.
	        this._awaitQueue.close();
	        // Close the handler.
	        this._handler.close();
	        // Close all Producers.
	        for (const producer of this._producers.values()) {
	            producer.transportClosed();
	        }
	        this._producers.clear();
	        // Close all Consumers.
	        for (const consumer of this._consumers.values()) {
	            consumer.transportClosed();
	        }
	        this._consumers.clear();
	        // Close all DataProducers.
	        for (const dataProducer of this._dataProducers.values()) {
	            dataProducer.transportClosed();
	        }
	        this._dataProducers.clear();
	        // Close all DataConsumers.
	        for (const dataConsumer of this._dataConsumers.values()) {
	            dataConsumer.transportClosed();
	        }
	        this._dataConsumers.clear();
	    }
	    /**
	     * Get associated Transport (RTCPeerConnection) stats.
	     *
	     * @returns {RTCStatsReport}
	     */
	    async getStats() {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        return this._handler.getTransportStats();
	    }
	    /**
	     * Restart ICE connection.
	     */
	    async restartIce({ iceParameters }) {
	        logger.debug('restartIce()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (!iceParameters)
	            throw new TypeError('missing iceParameters');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => this._handler.restartIce(iceParameters));
	    }
	    /**
	     * Update ICE servers.
	     */
	    async updateIceServers({ iceServers } = {}) {
	        logger.debug('updateIceServers()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (!Array.isArray(iceServers))
	            throw new TypeError('missing iceServers');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => this._handler.updateIceServers(iceServers));
	    }
	    /**
	     * Create a Producer.
	     */
	    async produce({ track, encodings, codecOptions, codec, stopTracks = true, disableTrackOnPause = true, zeroRtpOnPause = false, appData = {} } = {}) {
	        logger.debug('produce() [track:%o]', track);
	        if (!track)
	            throw new TypeError('missing track');
	        else if (this._direction !== 'send')
	            throw new errors.UnsupportedError('not a sending Transport');
	        else if (!this._canProduceByKind[track.kind])
	            throw new errors.UnsupportedError(`cannot produce ${track.kind}`);
	        else if (track.readyState === 'ended')
	            throw new errors.InvalidStateError('track ended');
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (this.listenerCount('produce') === 0)
	            throw new TypeError('no "produce" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            let normalizedEncodings;
	            if (encodings && !Array.isArray(encodings)) {
	                throw TypeError('encodings must be an array');
	            }
	            else if (encodings && encodings.length === 0) {
	                normalizedEncodings = undefined;
	            }
	            else if (encodings) {
	                normalizedEncodings = encodings
	                    .map((encoding) => {
	                    const normalizedEncoding = { active: true };
	                    if (encoding.active === false)
	                        normalizedEncoding.active = false;
	                    if (typeof encoding.maxBitrate === 'number')
	                        normalizedEncoding.maxBitrate = encoding.maxBitrate;
	                    if (typeof encoding.maxFramerate === 'number')
	                        normalizedEncoding.maxFramerate = encoding.maxFramerate;
	                    if (typeof encoding.scaleResolutionDownBy === 'number')
	                        normalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;
	                    if (typeof encoding.dtx === 'boolean')
	                        normalizedEncoding.dtx = encoding.dtx;
	                    if (typeof encoding.scalabilityMode === 'string')
	                        normalizedEncoding.scalabilityMode = encoding.scalabilityMode;
	                    if (typeof encoding.priority === 'string')
	                        normalizedEncoding.priority = encoding.priority;
	                    if (typeof encoding.networkPriority === 'string')
	                        normalizedEncoding.networkPriority = encoding.networkPriority;
	                    return normalizedEncoding;
	                });
	            }
	            const { localId, rtpParameters, rtpSender } = await this._handler.send({
	                track,
	                encodings: normalizedEncodings,
	                codecOptions,
	                codec
	            });
	            try {
	                // This will fill rtpParameters's missing fields with default values.
	                ortc$1.validateRtpParameters(rtpParameters);
	                const { id } = await this.safeEmitAsPromise('produce', {
	                    kind: track.kind,
	                    rtpParameters,
	                    appData
	                });
	                const producer = new Producer_1.Producer({
	                    id,
	                    localId,
	                    rtpSender,
	                    track,
	                    rtpParameters,
	                    stopTracks,
	                    disableTrackOnPause,
	                    zeroRtpOnPause,
	                    appData
	                });
	                this._producers.set(producer.id, producer);
	                this._handleProducer(producer);
	                return producer;
	            }
	            catch (error) {
	                this._handler.stopSending(localId)
	                    .catch(() => { });
	                throw error;
	            }
	        })
	            // This catch is needed to stop the given track if the command above
	            // failed due to closed Transport.
	            .catch((error) => {
	            if (stopTracks) {
	                try {
	                    track.stop();
	                }
	                catch (error2) { }
	            }
	            throw error;
	        });
	    }
	    /**
	     * Create a Consumer to consume a remote Producer.
	     */
	    async consume({ id, producerId, kind, rtpParameters, appData = {} } = {}) {
	        logger.debug('consume()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (this._direction !== 'recv')
	            throw new errors.UnsupportedError('not a receiving Transport');
	        else if (typeof id !== 'string')
	            throw new TypeError('missing id');
	        else if (typeof producerId !== 'string')
	            throw new TypeError('missing producerId');
	        else if (kind !== 'audio' && kind !== 'video')
	            throw new TypeError(`invalid kind '${kind}'`);
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            // Ensure the device can consume it.
	            const canConsume = ortc$1.canReceive(rtpParameters, this._extendedRtpCapabilities);
	            if (!canConsume)
	                throw new errors.UnsupportedError('cannot consume this Producer');
	            const { localId, rtpReceiver, track } = await this._handler.receive({ trackId: id, kind, rtpParameters });
	            const consumer = new Consumer_1.Consumer({
	                id,
	                localId,
	                producerId,
	                rtpReceiver,
	                track,
	                rtpParameters,
	                appData
	            });
	            this._consumers.set(consumer.id, consumer);
	            this._handleConsumer(consumer);
	            // If this is the first video Consumer and the Consumer for RTP probation
	            // has not yet been created, create it now.
	            if (!this._probatorConsumerCreated && kind === 'video') {
	                try {
	                    const probatorRtpParameters = ortc$1.generateProbatorRtpParameters(consumer.rtpParameters);
	                    await this._handler.receive({
	                        trackId: 'probator',
	                        kind: 'video',
	                        rtpParameters: probatorRtpParameters
	                    });
	                    logger.debug('consume() | Consumer for RTP probation created');
	                    this._probatorConsumerCreated = true;
	                }
	                catch (error) {
	                    logger.error('consume() | failed to create Consumer for RTP probation:%o', error);
	                }
	            }
	            return consumer;
	        });
	    }
	    /**
	     * Create a DataProducer
	     */
	    async produceData({ ordered = true, maxPacketLifeTime, maxRetransmits, priority = 'low', label = '', protocol = '', appData = {} } = {}) {
	        logger.debug('produceData()');
	        if (this._direction !== 'send')
	            throw new errors.UnsupportedError('not a sending Transport');
	        else if (!this._maxSctpMessageSize)
	            throw new errors.UnsupportedError('SCTP not enabled by remote Transport');
	        else if (!['very-low', 'low', 'medium', 'high'].includes(priority))
	            throw new TypeError('wrong priority');
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (this.listenerCount('producedata') === 0)
	            throw new TypeError('no "producedata" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        if (maxPacketLifeTime || maxRetransmits)
	            ordered = false;
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            const { dataChannel, sctpStreamParameters } = await this._handler.sendDataChannel({
	                ordered,
	                maxPacketLifeTime,
	                maxRetransmits,
	                priority,
	                label,
	                protocol
	            });
	            // This will fill sctpStreamParameters's missing fields with default values.
	            ortc$1.validateSctpStreamParameters(sctpStreamParameters);
	            const { id } = await this.safeEmitAsPromise('producedata', {
	                sctpStreamParameters,
	                label,
	                protocol,
	                appData
	            });
	            const dataProducer = new DataProducer_1.DataProducer({ id, dataChannel, sctpStreamParameters, appData });
	            this._dataProducers.set(dataProducer.id, dataProducer);
	            this._handleDataProducer(dataProducer);
	            return dataProducer;
	        });
	    }
	    /**
	     * Create a DataConsumer
	     */
	    async consumeData({ id, dataProducerId, sctpStreamParameters, label = '', protocol = '', appData = {} }) {
	        logger.debug('consumeData()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (this._direction !== 'recv')
	            throw new errors.UnsupportedError('not a receiving Transport');
	        else if (!this._maxSctpMessageSize)
	            throw new errors.UnsupportedError('SCTP not enabled by remote Transport');
	        else if (typeof id !== 'string')
	            throw new TypeError('missing id');
	        else if (typeof dataProducerId !== 'string')
	            throw new TypeError('missing dataProducerId');
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // This may throw.
	        ortc$1.validateSctpStreamParameters(sctpStreamParameters);
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            const { dataChannel } = await this._handler.receiveDataChannel({
	                sctpStreamParameters,
	                label,
	                protocol
	            });
	            const dataConsumer = new DataConsumer_1.DataConsumer({
	                id,
	                dataProducerId,
	                dataChannel,
	                sctpStreamParameters,
	                appData
	            });
	            this._dataConsumers.set(dataConsumer.id, dataConsumer);
	            this._handleDataConsumer(dataConsumer);
	            return dataConsumer;
	        });
	    }
	    _handleHandler() {
	        const handler = this._handler;
	        handler.on('@connect', ({ dtlsParameters }, callback, errback) => {
	            if (this._closed) {
	                errback(new errors.InvalidStateError('closed'));
	                return;
	            }
	            this.safeEmit('connect', { dtlsParameters }, callback, errback);
	        });
	        handler.on('@connectionstatechange', (connectionState) => {
	            if (connectionState === this._connectionState)
	                return;
	            logger.debug('connection state changed to %s', connectionState);
	            this._connectionState = connectionState;
	            if (!this._closed)
	                this.safeEmit('connectionstatechange', connectionState);
	        });
	    }
	    _handleProducer(producer) {
	        producer.on('@close', () => {
	            this._producers.delete(producer.id);
	            if (this._closed)
	                return;
	            this._awaitQueue.push(async () => this._handler.stopSending(producer.localId))
	                .catch((error) => logger.warn('producer.close() failed:%o', error));
	        });
	        producer.on('@replacetrack', (track, callback, errback) => {
	            this._awaitQueue.push(async () => this._handler.replaceTrack(producer.localId, track))
	                .then(callback)
	                .catch(errback);
	        });
	        producer.on('@setmaxspatiallayer', (spatialLayer, callback, errback) => {
	            this._awaitQueue.push(async () => (this._handler.setMaxSpatialLayer(producer.localId, spatialLayer)))
	                .then(callback)
	                .catch(errback);
	        });
	        producer.on('@setrtpencodingparameters', (params, callback, errback) => {
	            this._awaitQueue.push(async () => (this._handler.setRtpEncodingParameters(producer.localId, params)))
	                .then(callback)
	                .catch(errback);
	        });
	        producer.on('@getstats', (callback, errback) => {
	            if (this._closed)
	                return errback(new errors.InvalidStateError('closed'));
	            this._handler.getSenderStats(producer.localId)
	                .then(callback)
	                .catch(errback);
	        });
	    }
	    _handleConsumer(consumer) {
	        consumer.on('@close', () => {
	            this._consumers.delete(consumer.id);
	            if (this._closed)
	                return;
	            this._awaitQueue.push(async () => this._handler.stopReceiving(consumer.localId))
	                .catch(() => { });
	        });
	        consumer.on('@getstats', (callback, errback) => {
	            if (this._closed)
	                return errback(new errors.InvalidStateError('closed'));
	            this._handler.getReceiverStats(consumer.localId)
	                .then(callback)
	                .catch(errback);
	        });
	    }
	    _handleDataProducer(dataProducer) {
	        dataProducer.on('@close', () => {
	            this._dataProducers.delete(dataProducer.id);
	        });
	    }
	    _handleDataConsumer(dataConsumer) {
	        dataConsumer.on('@close', () => {
	            this._dataConsumers.delete(dataConsumer.id);
	        });
	    }
	}
	exports.Transport = Transport;
	});

	unwrapExports(Transport_1);
	var Transport_2 = Transport_1.Transport;

	var grammar_1 = createCommonjsModule(function (module) {
	var grammar = module.exports = {
	  v: [{
	    name: 'version',
	    reg: /^(\d*)$/
	  }],
	  o: [{
	    // o=- 20518 0 IN IP4 203.0.113.1
	    // NB: sessionId will be a String in most cases because it is huge
	    name: 'origin',
	    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
	    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
	    format: '%s %s %d %s IP%d %s'
	  }],
	  // default parsing of these only (though some of these feel outdated)
	  s: [{ name: 'name' }],
	  i: [{ name: 'description' }],
	  u: [{ name: 'uri' }],
	  e: [{ name: 'email' }],
	  p: [{ name: 'phone' }],
	  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...
	  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly
	  // k: [{}], // outdated thing ignored
	  t: [{
	    // t=0 0
	    name: 'timing',
	    reg: /^(\d*) (\d*)/,
	    names: ['start', 'stop'],
	    format: '%d %d'
	  }],
	  c: [{
	    // c=IN IP4 10.47.197.26
	    name: 'connection',
	    reg: /^IN IP(\d) (\S*)/,
	    names: ['version', 'ip'],
	    format: 'IN IP%d %s'
	  }],
	  b: [{
	    // b=AS:4000
	    push: 'bandwidth',
	    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
	    names: ['type', 'limit'],
	    format: '%s:%s'
	  }],
	  m: [{
	    // m=video 51744 RTP/AVP 126 97 98 34 31
	    // NB: special - pushes to session
	    // TODO: rtp/fmtp should be filtered by the payloads found here?
	    reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
	    names: ['type', 'port', 'protocol', 'payloads'],
	    format: '%s %d %s %s'
	  }],
	  a: [
	    {
	      // a=rtpmap:110 opus/48000/2
	      push: 'rtp',
	      reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
	      names: ['payload', 'codec', 'rate', 'encoding'],
	      format: function (o) {
	        return (o.encoding)
	          ? 'rtpmap:%d %s/%s/%s'
	          : o.rate
	            ? 'rtpmap:%d %s/%s'
	            : 'rtpmap:%d %s';
	      }
	    },
	    {
	      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
	      // a=fmtp:111 minptime=10; useinbandfec=1
	      push: 'fmtp',
	      reg: /^fmtp:(\d*) ([\S| ]*)/,
	      names: ['payload', 'config'],
	      format: 'fmtp:%d %s'
	    },
	    {
	      // a=control:streamid=0
	      name: 'control',
	      reg: /^control:(.*)/,
	      format: 'control:%s'
	    },
	    {
	      // a=rtcp:65179 IN IP4 193.84.77.194
	      name: 'rtcp',
	      reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
	      names: ['port', 'netType', 'ipVer', 'address'],
	      format: function (o) {
	        return (o.address != null)
	          ? 'rtcp:%d %s IP%d %s'
	          : 'rtcp:%d';
	      }
	    },
	    {
	      // a=rtcp-fb:98 trr-int 100
	      push: 'rtcpFbTrrInt',
	      reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
	      names: ['payload', 'value'],
	      format: 'rtcp-fb:%d trr-int %d'
	    },
	    {
	      // a=rtcp-fb:98 nack rpsi
	      push: 'rtcpFb',
	      reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
	      names: ['payload', 'type', 'subtype'],
	      format: function (o) {
	        return (o.subtype != null)
	          ? 'rtcp-fb:%s %s %s'
	          : 'rtcp-fb:%s %s';
	      }
	    },
	    {
	      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
	      // a=extmap:1/recvonly URI-gps-string
	      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
	      push: 'ext',
	      reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
	      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],
	      format: function (o) {
	        return (
	          'extmap:%d' +
	          (o.direction ? '/%s' : '%v') +
	          (o['encrypt-uri'] ? ' %s' : '%v') +
	          ' %s' +
	          (o.config ? ' %s' : '')
	        );
	      }
	    },
	    {
	      // a=extmap-allow-mixed
	      name: 'extmapAllowMixed',
	      reg: /^(extmap-allow-mixed)/
	    },
	    {
	      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
	      push: 'crypto',
	      reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
	      names: ['id', 'suite', 'config', 'sessionConfig'],
	      format: function (o) {
	        return (o.sessionConfig != null)
	          ? 'crypto:%d %s %s %s'
	          : 'crypto:%d %s %s';
	      }
	    },
	    {
	      // a=setup:actpass
	      name: 'setup',
	      reg: /^setup:(\w*)/,
	      format: 'setup:%s'
	    },
	    {
	      // a=connection:new
	      name: 'connectionType',
	      reg: /^connection:(new|existing)/,
	      format: 'connection:%s'
	    },
	    {
	      // a=mid:1
	      name: 'mid',
	      reg: /^mid:([^\s]*)/,
	      format: 'mid:%s'
	    },
	    {
	      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
	      name: 'msid',
	      reg: /^msid:(.*)/,
	      format: 'msid:%s'
	    },
	    {
	      // a=ptime:20
	      name: 'ptime',
	      reg: /^ptime:(\d*(?:\.\d*)*)/,
	      format: 'ptime:%d'
	    },
	    {
	      // a=maxptime:60
	      name: 'maxptime',
	      reg: /^maxptime:(\d*(?:\.\d*)*)/,
	      format: 'maxptime:%d'
	    },
	    {
	      // a=sendrecv
	      name: 'direction',
	      reg: /^(sendrecv|recvonly|sendonly|inactive)/
	    },
	    {
	      // a=ice-lite
	      name: 'icelite',
	      reg: /^(ice-lite)/
	    },
	    {
	      // a=ice-ufrag:F7gI
	      name: 'iceUfrag',
	      reg: /^ice-ufrag:(\S*)/,
	      format: 'ice-ufrag:%s'
	    },
	    {
	      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
	      name: 'icePwd',
	      reg: /^ice-pwd:(\S*)/,
	      format: 'ice-pwd:%s'
	    },
	    {
	      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
	      name: 'fingerprint',
	      reg: /^fingerprint:(\S*) (\S*)/,
	      names: ['type', 'hash'],
	      format: 'fingerprint:%s %s'
	    },
	    {
	      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
	      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
	      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
	      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
	      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
	      push:'candidates',
	      reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
	      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
	      format: function (o) {
	        var str = 'candidate:%s %d %s %d %s %d typ %s';

	        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';

	        // NB: candidate has three optional chunks, so %void middles one if it's missing
	        str += (o.tcptype != null) ? ' tcptype %s' : '%v';

	        if (o.generation != null) {
	          str += ' generation %d';
	        }

	        str += (o['network-id'] != null) ? ' network-id %d' : '%v';
	        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';
	        return str;
	      }
	    },
	    {
	      // a=end-of-candidates (keep after the candidates line for readability)
	      name: 'endOfCandidates',
	      reg: /^(end-of-candidates)/
	    },
	    {
	      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
	      name: 'remoteCandidates',
	      reg: /^remote-candidates:(.*)/,
	      format: 'remote-candidates:%s'
	    },
	    {
	      // a=ice-options:google-ice
	      name: 'iceOptions',
	      reg: /^ice-options:(\S*)/,
	      format: 'ice-options:%s'
	    },
	    {
	      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
	      push: 'ssrcs',
	      reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
	      names: ['id', 'attribute', 'value'],
	      format: function (o) {
	        var str = 'ssrc:%d';
	        if (o.attribute != null) {
	          str += ' %s';
	          if (o.value != null) {
	            str += ':%s';
	          }
	        }
	        return str;
	      }
	    },
	    {
	      // a=ssrc-group:FEC 1 2
	      // a=ssrc-group:FEC-FR 3004364195 1080772241
	      push: 'ssrcGroups',
	      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
	      reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
	      names: ['semantics', 'ssrcs'],
	      format: 'ssrc-group:%s %s'
	    },
	    {
	      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
	      name: 'msidSemantic',
	      reg: /^msid-semantic:\s?(\w*) (\S*)/,
	      names: ['semantic', 'token'],
	      format: 'msid-semantic: %s %s' // space after ':' is not accidental
	    },
	    {
	      // a=group:BUNDLE audio video
	      push: 'groups',
	      reg: /^group:(\w*) (.*)/,
	      names: ['type', 'mids'],
	      format: 'group:%s %s'
	    },
	    {
	      // a=rtcp-mux
	      name: 'rtcpMux',
	      reg: /^(rtcp-mux)/
	    },
	    {
	      // a=rtcp-rsize
	      name: 'rtcpRsize',
	      reg: /^(rtcp-rsize)/
	    },
	    {
	      // a=sctpmap:5000 webrtc-datachannel 1024
	      name: 'sctpmap',
	      reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
	      names: ['sctpmapNumber', 'app', 'maxMessageSize'],
	      format: function (o) {
	        return (o.maxMessageSize != null)
	          ? 'sctpmap:%s %s %s'
	          : 'sctpmap:%s %s';
	      }
	    },
	    {
	      // a=x-google-flag:conference
	      name: 'xGoogleFlag',
	      reg: /^x-google-flag:([^\s]*)/,
	      format: 'x-google-flag:%s'
	    },
	    {
	      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
	      push: 'rids',
	      reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
	      names: ['id', 'direction', 'params'],
	      format: function (o) {
	        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';
	      }
	    },
	    {
	      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
	      // a=imageattr:* send [x=800,y=640] recv *
	      // a=imageattr:100 recv [x=320,y=240]
	      push: 'imageattrs',
	      reg: new RegExp(
	        // a=imageattr:97
	        '^imageattr:(\\d+|\\*)' +
	        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
	        '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
	        // recv [x=330,y=250]
	        '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'
	      ),
	      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
	      format: function (o) {
	        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
	      }
	    },
	    {
	      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
	      // a=simulcast:recv 1;4,5 send 6;7
	      name: 'simulcast',
	      reg: new RegExp(
	        // a=simulcast:
	        '^simulcast:' +
	        // send 1,2,3;~4,~5
	        '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
	        // space + recv 6;~7,~8
	        '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
	        // end
	        '$'
	      ),
	      names: ['dir1', 'list1', 'dir2', 'list2'],
	      format: function (o) {
	        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
	      }
	    },
	    {
	      // old simulcast draft 03 (implemented by Firefox)
	      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
	      // a=simulcast: recv pt=97;98 send pt=97
	      // a=simulcast: send rid=5;6;7 paused=6,7
	      name: 'simulcast_03',
	      reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
	      names: ['value'],
	      format: 'simulcast: %s'
	    },
	    {
	      // a=framerate:25
	      // a=framerate:29.97
	      name: 'framerate',
	      reg: /^framerate:(\d+(?:$|\.\d+))/,
	      format: 'framerate:%s'
	    },
	    {
	      // RFC4570
	      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
	      name: 'sourceFilter',
	      reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
	      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
	      format: 'source-filter: %s %s %s %s %s'
	    },
	    {
	      // a=bundle-only
	      name: 'bundleOnly',
	      reg: /^(bundle-only)/
	    },
	    {
	      // a=label:1
	      name: 'label',
	      reg: /^label:(.+)/,
	      format: 'label:%s'
	    },
	    {
	      // RFC version 26 for SCTP over DTLS
	      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
	      name: 'sctpPort',
	      reg: /^sctp-port:(\d+)$/,
	      format: 'sctp-port:%s'
	    },
	    {
	      // RFC version 26 for SCTP over DTLS
	      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
	      name: 'maxMessageSize',
	      reg: /^max-message-size:(\d+)$/,
	      format: 'max-message-size:%s'
	    },
	    {
	      // RFC7273
	      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
	      push:'tsRefClocks',
	      reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
	      names: ['clksrc', 'clksrcExt'],
	      format: function (o) {
	        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');
	      }
	    },
	    {
	      // RFC7273
	      // a=mediaclk:direct=963214424
	      name:'mediaClk',
	      reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
	      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],
	      format: function (o) {
	        var str = 'mediaclk:';
	        str += (o.id != null ? 'id=%s %s' : '%v%s');
	        str += (o.mediaClockValue != null ? '=%s' : '');
	        str += (o.rateNumerator != null ? ' rate=%s' : '');
	        str += (o.rateDenominator != null ? '/%s' : '');
	        return str;
	      }
	    },
	    {
	      // a=keywds:keywords
	      name: 'keywords',
	      reg: /^keywds:(.+)$/,
	      format: 'keywds:%s'
	    },
	    {
	      // a=content:main
	      name: 'content',
	      reg: /^content:(.+)/,
	      format: 'content:%s'
	    },
	    // BFCP https://tools.ietf.org/html/rfc4583
	    {
	      // a=floorctrl:c-s
	      name: 'bfcpFloorCtrl',
	      reg: /^floorctrl:(c-only|s-only|c-s)/,
	      format: 'floorctrl:%s'
	    },
	    {
	      // a=confid:1
	      name: 'bfcpConfId',
	      reg: /^confid:(\d+)/,
	      format: 'confid:%s'
	    },
	    {
	      // a=userid:1
	      name: 'bfcpUserId',
	      reg: /^userid:(\d+)/,
	      format: 'userid:%s'
	    },
	    {
	      // a=floorid:1
	      name: 'bfcpFloorId',
	      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
	      names: ['id', 'mStream'],
	      format: 'floorid:%s mstrm:%s'
	    },
	    {
	      // any a= that we don't understand is kept verbatim on media.invalid
	      push: 'invalid',
	      names: ['value']
	    }
	  ]
	};

	// set sensible defaults to avoid polluting the grammar with boring details
	Object.keys(grammar).forEach(function (key) {
	  var objs = grammar[key];
	  objs.forEach(function (obj) {
	    if (!obj.reg) {
	      obj.reg = /(.*)/;
	    }
	    if (!obj.format) {
	      obj.format = '%s';
	    }
	  });
	});
	});
	var grammar_2 = grammar_1.v;
	var grammar_3 = grammar_1.o;
	var grammar_4 = grammar_1.s;
	var grammar_5 = grammar_1.i;
	var grammar_6 = grammar_1.u;
	var grammar_7 = grammar_1.e;
	var grammar_8 = grammar_1.p;
	var grammar_9 = grammar_1.z;
	var grammar_10 = grammar_1.r;
	var grammar_11 = grammar_1.t;
	var grammar_12 = grammar_1.c;
	var grammar_13 = grammar_1.b;
	var grammar_14 = grammar_1.m;
	var grammar_15 = grammar_1.a;

	var parser = createCommonjsModule(function (module, exports) {
	var toIntIfInt = function (v) {
	  return String(Number(v)) === v ? Number(v) : v;
	};

	var attachProperties = function (match, location, names, rawName) {
	  if (rawName && !names) {
	    location[rawName] = toIntIfInt(match[1]);
	  }
	  else {
	    for (var i = 0; i < names.length; i += 1) {
	      if (match[i+1] != null) {
	        location[names[i]] = toIntIfInt(match[i+1]);
	      }
	    }
	  }
	};

	var parseReg = function (obj, location, content) {
	  var needsBlank = obj.name && obj.names;
	  if (obj.push && !location[obj.push]) {
	    location[obj.push] = [];
	  }
	  else if (needsBlank && !location[obj.name]) {
	    location[obj.name] = {};
	  }
	  var keyLocation = obj.push ?
	    {} :  // blank object that will be pushed
	    needsBlank ? location[obj.name] : location; // otherwise, named location or root

	  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

	  if (obj.push) {
	    location[obj.push].push(keyLocation);
	  }
	};


	var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

	exports.parse = function (sdp) {
	  var session = {}
	    , media = []
	    , location = session; // points at where properties go under (one of the above)

	  // parse lines we understand
	  sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
	    var type = l[0];
	    var content = l.slice(2);
	    if (type === 'm') {
	      media.push({rtp: [], fmtp: []});
	      location = media[media.length-1]; // point at latest media line
	    }

	    for (var j = 0; j < (grammar_1[type] || []).length; j += 1) {
	      var obj = grammar_1[type][j];
	      if (obj.reg.test(content)) {
	        return parseReg(obj, location, content);
	      }
	    }
	  });

	  session.media = media; // link it up
	  return session;
	};

	var paramReducer = function (acc, expr) {
	  var s = expr.split(/=(.+)/, 2);
	  if (s.length === 2) {
	    acc[s[0]] = toIntIfInt(s[1]);
	  } else if (s.length === 1 && expr.length > 1) {
	    acc[s[0]] = undefined;
	  }
	  return acc;
	};

	exports.parseParams = function (str) {
	  return str.split(/;\s?/).reduce(paramReducer, {});
	};

	// For backward compatibility - alias will be removed in 3.0.0
	exports.parseFmtpConfig = exports.parseParams;

	exports.parsePayloads = function (str) {
	  return str.toString().split(' ').map(Number);
	};

	exports.parseRemoteCandidates = function (str) {
	  var candidates = [];
	  var parts = str.split(' ').map(toIntIfInt);
	  for (var i = 0; i < parts.length; i += 3) {
	    candidates.push({
	      component: parts[i],
	      ip: parts[i + 1],
	      port: parts[i + 2]
	    });
	  }
	  return candidates;
	};

	exports.parseImageAttributes = function (str) {
	  return str.split(' ').map(function (item) {
	    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});
	  });
	};

	exports.parseSimulcastStreamList = function (str) {
	  return str.split(';').map(function (stream) {
	    return stream.split(',').map(function (format) {
	      var scid, paused = false;

	      if (format[0] !== '~') {
	        scid = toIntIfInt(format);
	      } else {
	        scid = toIntIfInt(format.substring(1, format.length));
	        paused = true;
	      }

	      return {
	        scid: scid,
	        paused: paused
	      };
	    });
	  });
	};
	});
	var parser_1 = parser.parse;
	var parser_2 = parser.parseParams;
	var parser_3 = parser.parseFmtpConfig;
	var parser_4 = parser.parsePayloads;
	var parser_5 = parser.parseRemoteCandidates;
	var parser_6 = parser.parseImageAttributes;
	var parser_7 = parser.parseSimulcastStreamList;

	// customized util.format - discards excess arguments and can void middle ones
	var formatRegExp = /%[sdv%]/g;
	var format = function (formatStr) {
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  return formatStr.replace(formatRegExp, function (x) {
	    if (i >= len) {
	      return x; // missing argument
	    }
	    var arg = args[i];
	    i += 1;
	    switch (x) {
	    case '%%':
	      return '%';
	    case '%s':
	      return String(arg);
	    case '%d':
	      return Number(arg);
	    case '%v':
	      return '';
	    }
	  });
	  // NB: we discard excess arguments - they are typically undefined from makeLine
	};

	var makeLine = function (type, obj, location) {
	  var str = obj.format instanceof Function ?
	    (obj.format(obj.push ? location : location[obj.name])) :
	    obj.format;

	  var args = [type + '=' + str];
	  if (obj.names) {
	    for (var i = 0; i < obj.names.length; i += 1) {
	      var n = obj.names[i];
	      if (obj.name) {
	        args.push(location[obj.name][n]);
	      }
	      else { // for mLine and push attributes
	        args.push(location[obj.names[i]]);
	      }
	    }
	  }
	  else {
	    args.push(location[obj.name]);
	  }
	  return format.apply(null, args);
	};

	// RFC specified order
	// TODO: extend this with all the rest
	var defaultOuterOrder = [
	  'v', 'o', 's', 'i',
	  'u', 'e', 'p', 'c',
	  'b', 't', 'r', 'z', 'a'
	];
	var defaultInnerOrder = ['i', 'c', 'b', 'a'];


	var writer = function (session, opts) {
	  opts = opts || {};
	  // ensure certain properties exist
	  if (session.version == null) {
	    session.version = 0; // 'v=0' must be there (only defined version atm)
	  }
	  if (session.name == null) {
	    session.name = ' '; // 's= ' must be there if no meaningful name set
	  }
	  session.media.forEach(function (mLine) {
	    if (mLine.payloads == null) {
	      mLine.payloads = '';
	    }
	  });

	  var outerOrder = opts.outerOrder || defaultOuterOrder;
	  var innerOrder = opts.innerOrder || defaultInnerOrder;
	  var sdp = [];

	  // loop through outerOrder for matching properties on session
	  outerOrder.forEach(function (type) {
	    grammar_1[type].forEach(function (obj) {
	      if (obj.name in session && session[obj.name] != null) {
	        sdp.push(makeLine(type, obj, session));
	      }
	      else if (obj.push in session && session[obj.push] != null) {
	        session[obj.push].forEach(function (el) {
	          sdp.push(makeLine(type, obj, el));
	        });
	      }
	    });
	  });

	  // then for each media line, follow the innerOrder
	  session.media.forEach(function (mLine) {
	    sdp.push(makeLine('m', grammar_1.m[0], mLine));

	    innerOrder.forEach(function (type) {
	      grammar_1[type].forEach(function (obj) {
	        if (obj.name in mLine && mLine[obj.name] != null) {
	          sdp.push(makeLine(type, obj, mLine));
	        }
	        else if (obj.push in mLine && mLine[obj.push] != null) {
	          mLine[obj.push].forEach(function (el) {
	            sdp.push(makeLine(type, obj, el));
	          });
	        }
	      });
	    });
	  });

	  return sdp.join('\r\n') + '\r\n';
	};

	var write = writer;
	var parse$1 = parser.parse;
	var parseParams = parser.parseParams;
	var parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().
	var parsePayloads = parser.parsePayloads;
	var parseRemoteCandidates = parser.parseRemoteCandidates;
	var parseImageAttributes = parser.parseImageAttributes;
	var parseSimulcastStreamList = parser.parseSimulcastStreamList;

	var lib$1 = {
		write: write,
		parse: parse$1,
		parseParams: parseParams,
		parseFmtpConfig: parseFmtpConfig,
		parsePayloads: parsePayloads,
		parseRemoteCandidates: parseRemoteCandidates,
		parseImageAttributes: parseImageAttributes,
		parseSimulcastStreamList: parseSimulcastStreamList
	};

	var commonUtils = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);
	function extractRtpCapabilities({ sdpObject }) {
	    // Map of RtpCodecParameters indexed by payload type.
	    const codecsMap = new Map();
	    // Array of RtpHeaderExtensions.
	    const headerExtensions = [];
	    // Whether a m=audio/video section has been already found.
	    let gotAudio = false;
	    let gotVideo = false;
	    for (const m of sdpObject.media) {
	        const kind = m.type;
	        switch (kind) {
	            case 'audio':
	                {
	                    if (gotAudio)
	                        continue;
	                    gotAudio = true;
	                    break;
	                }
	            case 'video':
	                {
	                    if (gotVideo)
	                        continue;
	                    gotVideo = true;
	                    break;
	                }
	            default:
	                {
	                    continue;
	                }
	        }
	        // Get codecs.
	        for (const rtp of m.rtp) {
	            const codec = {
	                kind: kind,
	                mimeType: `${kind}/${rtp.codec}`,
	                preferredPayloadType: rtp.payload,
	                clockRate: rtp.rate,
	                channels: rtp.encoding,
	                parameters: {},
	                rtcpFeedback: []
	            };
	            codecsMap.set(codec.preferredPayloadType, codec);
	        }
	        // Get codec parameters.
	        for (const fmtp of m.fmtp || []) {
	            const parameters = sdpTransform.parseParams(fmtp.config);
	            const codec = codecsMap.get(fmtp.payload);
	            if (!codec)
	                continue;
	            // Specials case to convert parameter value to string.
	            if (parameters && parameters['profile-level-id'])
	                parameters['profile-level-id'] = String(parameters['profile-level-id']);
	            codec.parameters = parameters;
	        }
	        // Get RTCP feedback for each codec.
	        for (const fb of m.rtcpFb || []) {
	            const codec = codecsMap.get(fb.payload);
	            if (!codec)
	                continue;
	            const feedback = {
	                type: fb.type,
	                parameter: fb.subtype
	            };
	            if (!feedback.parameter)
	                delete feedback.parameter;
	            codec.rtcpFeedback.push(feedback);
	        }
	        // Get RTP header extensions.
	        for (const ext of m.ext || []) {
	            // Ignore encrypted extensions (not yet supported in mediasoup).
	            if (ext['encrypt-uri'])
	                continue;
	            const headerExtension = {
	                kind: kind,
	                uri: ext.uri,
	                preferredId: ext.value
	            };
	            headerExtensions.push(headerExtension);
	        }
	    }
	    const rtpCapabilities = {
	        codecs: Array.from(codecsMap.values()),
	        headerExtensions: headerExtensions
	    };
	    return rtpCapabilities;
	}
	exports.extractRtpCapabilities = extractRtpCapabilities;
	function extractDtlsParameters({ sdpObject }) {
	    const mediaObject = (sdpObject.media || [])
	        .find((m) => (m.iceUfrag && m.port !== 0));
	    if (!mediaObject)
	        throw new Error('no active media section found');
	    const fingerprint = mediaObject.fingerprint || sdpObject.fingerprint;
	    let role;
	    switch (mediaObject.setup) {
	        case 'active':
	            role = 'client';
	            break;
	        case 'passive':
	            role = 'server';
	            break;
	        case 'actpass':
	            role = 'auto';
	            break;
	    }
	    const dtlsParameters = {
	        role,
	        fingerprints: [
	            {
	                algorithm: fingerprint.type,
	                value: fingerprint.hash
	            }
	        ]
	    };
	    return dtlsParameters;
	}
	exports.extractDtlsParameters = extractDtlsParameters;
	function getCname({ offerMediaObject }) {
	    const ssrcCnameLine = (offerMediaObject.ssrcs || [])
	        .find((line) => line.attribute === 'cname');
	    if (!ssrcCnameLine)
	        return '';
	    return ssrcCnameLine.value;
	}
	exports.getCname = getCname;
	/**
	 * Apply codec parameters in the given SDP m= section answer based on the
	 * given RTP parameters of an offer.
	 */
	function applyCodecParameters({ offerRtpParameters, answerMediaObject }) {
	    for (const codec of offerRtpParameters.codecs) {
	        const mimeType = codec.mimeType.toLowerCase();
	        // Avoid parsing codec parameters for unhandled codecs.
	        if (mimeType !== 'audio/opus')
	            continue;
	        const rtp = (answerMediaObject.rtp || [])
	            .find((r) => r.payload === codec.payloadType);
	        if (!rtp)
	            continue;
	        // Just in case.
	        answerMediaObject.fmtp = answerMediaObject.fmtp || [];
	        let fmtp = answerMediaObject.fmtp
	            .find((f) => f.payload === codec.payloadType);
	        if (!fmtp) {
	            fmtp = { payload: codec.payloadType, config: '' };
	            answerMediaObject.fmtp.push(fmtp);
	        }
	        const parameters = sdpTransform.parseParams(fmtp.config);
	        switch (mimeType) {
	            case 'audio/opus':
	                {
	                    const spropStereo = codec.parameters['sprop-stereo'];
	                    if (spropStereo !== undefined)
	                        parameters.stereo = spropStereo ? 1 : 0;
	                    break;
	                }
	        }
	        // Write the codec fmtp.config back.
	        fmtp.config = '';
	        for (const key of Object.keys(parameters)) {
	            if (fmtp.config)
	                fmtp.config += ';';
	            fmtp.config += `${key}=${parameters[key]}`;
	        }
	    }
	}
	exports.applyCodecParameters = applyCodecParameters;
	});

	unwrapExports(commonUtils);
	var commonUtils_1 = commonUtils.extractRtpCapabilities;
	var commonUtils_2 = commonUtils.extractDtlsParameters;
	var commonUtils_3 = commonUtils.getCname;
	var commonUtils_4 = commonUtils.applyCodecParameters;

	var unifiedPlanUtils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function getRtpEncodings({ offerMediaObject }) {
	    const ssrcs = new Set();
	    for (const line of offerMediaObject.ssrcs || []) {
	        const ssrc = line.id;
	        ssrcs.add(ssrc);
	    }
	    if (ssrcs.size === 0)
	        throw new Error('no a=ssrc lines found');
	    const ssrcToRtxSsrc = new Map();
	    // First assume RTX is used.
	    for (const line of offerMediaObject.ssrcGroups || []) {
	        if (line.semantics !== 'FID')
	            continue;
	        let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
	        ssrc = Number(ssrc);
	        rtxSsrc = Number(rtxSsrc);
	        if (ssrcs.has(ssrc)) {
	            // Remove both the SSRC and RTX SSRC from the set so later we know that they
	            // are already handled.
	            ssrcs.delete(ssrc);
	            ssrcs.delete(rtxSsrc);
	            // Add to the map.
	            ssrcToRtxSsrc.set(ssrc, rtxSsrc);
	        }
	    }
	    // If the set of SSRCs is not empty it means that RTX is not being used, so take
	    // media SSRCs from there.
	    for (const ssrc of ssrcs) {
	        // Add to the map.
	        ssrcToRtxSsrc.set(ssrc, null);
	    }
	    const encodings = [];
	    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
	        const encoding = { ssrc };
	        if (rtxSsrc)
	            encoding.rtx = { ssrc: rtxSsrc };
	        encodings.push(encoding);
	    }
	    return encodings;
	}
	exports.getRtpEncodings = getRtpEncodings;
	/**
	 * Adds multi-ssrc based simulcast into the given SDP media section offer.
	 */
	function addLegacySimulcast({ offerMediaObject, numStreams }) {
	    if (numStreams <= 1)
	        throw new TypeError('numStreams must be greater than 1');
	    // Get the SSRC.
	    const ssrcMsidLine = (offerMediaObject.ssrcs || [])
	        .find((line) => line.attribute === 'msid');
	    if (!ssrcMsidLine)
	        throw new Error('a=ssrc line with msid information not found');
	    const [streamId, trackId] = ssrcMsidLine.value.split(' ')[0];
	    const firstSsrc = ssrcMsidLine.id;
	    let firstRtxSsrc;
	    // Get the SSRC for RTX.
	    (offerMediaObject.ssrcGroups || [])
	        .some((line) => {
	        if (line.semantics !== 'FID')
	            return false;
	        const ssrcs = line.ssrcs.split(/\s+/);
	        if (Number(ssrcs[0]) === firstSsrc) {
	            firstRtxSsrc = Number(ssrcs[1]);
	            return true;
	        }
	        else {
	            return false;
	        }
	    });
	    const ssrcCnameLine = offerMediaObject.ssrcs
	        .find((line) => line.attribute === 'cname');
	    if (!ssrcCnameLine)
	        throw new Error('a=ssrc line with cname information not found');
	    const cname = ssrcCnameLine.value;
	    const ssrcs = [];
	    const rtxSsrcs = [];
	    for (let i = 0; i < numStreams; ++i) {
	        ssrcs.push(firstSsrc + i);
	        if (firstRtxSsrc)
	            rtxSsrcs.push(firstRtxSsrc + i);
	    }
	    offerMediaObject.ssrcGroups = [];
	    offerMediaObject.ssrcs = [];
	    offerMediaObject.ssrcGroups.push({
	        semantics: 'SIM',
	        ssrcs: ssrcs.join(' ')
	    });
	    for (let i = 0; i < ssrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'msid',
	            value: `${streamId} ${trackId}`
	        });
	    }
	    for (let i = 0; i < rtxSsrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        const rtxSsrc = rtxSsrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'msid',
	            value: `${streamId} ${trackId}`
	        });
	        offerMediaObject.ssrcGroups.push({
	            semantics: 'FID',
	            ssrcs: `${ssrc} ${rtxSsrc}`
	        });
	    }
	}
	exports.addLegacySimulcast = addLegacySimulcast;
	});

	unwrapExports(unifiedPlanUtils);
	var unifiedPlanUtils_1 = unifiedPlanUtils.getRtpEncodings;
	var unifiedPlanUtils_2 = unifiedPlanUtils.addLegacySimulcast;

	var HandlerInterface_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	class HandlerInterface extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits @connect - (
	     *     { dtlsParameters: DtlsParameters },
	     *     callback: Function,
	     *     errback: Function
	     *   )
	     * @emits @connectionstatechange - (connectionState: ConnectionState)
	     */
	    constructor() {
	        super();
	    }
	}
	exports.HandlerInterface = HandlerInterface;
	});

	unwrapExports(HandlerInterface_1);
	var HandlerInterface_2 = HandlerInterface_1.HandlerInterface;

	var MediaSection_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils$1 = __importStar(utils);
	class MediaSection {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {
	        this._mediaObject = {};
	        this._planB = planB;
	        if (iceParameters) {
	            this.setIceParameters(iceParameters);
	        }
	        if (iceCandidates) {
	            this._mediaObject.candidates = [];
	            for (const candidate of iceCandidates) {
	                const candidateObject = {};
	                // mediasoup does mandates rtcp-mux so candidates component is always
	                // RTP (1).
	                candidateObject.component = 1;
	                candidateObject.foundation = candidate.foundation;
	                candidateObject.ip = candidate.ip;
	                candidateObject.port = candidate.port;
	                candidateObject.priority = candidate.priority;
	                candidateObject.transport = candidate.protocol;
	                candidateObject.type = candidate.type;
	                if (candidate.tcpType)
	                    candidateObject.tcptype = candidate.tcpType;
	                this._mediaObject.candidates.push(candidateObject);
	            }
	            this._mediaObject.endOfCandidates = 'end-of-candidates';
	            this._mediaObject.iceOptions = 'renomination';
	        }
	        if (dtlsParameters) {
	            this.setDtlsRole(dtlsParameters.role);
	        }
	    }
	    get mid() {
	        return String(this._mediaObject.mid);
	    }
	    get closed() {
	        return this._mediaObject.port === 0;
	    }
	    getObject() {
	        return this._mediaObject;
	    }
	    setIceParameters(iceParameters) {
	        this._mediaObject.iceUfrag = iceParameters.usernameFragment;
	        this._mediaObject.icePwd = iceParameters.password;
	    }
	    disable() {
	        this._mediaObject.direction = 'inactive';
	        delete this._mediaObject.ext;
	        delete this._mediaObject.ssrcs;
	        delete this._mediaObject.ssrcGroups;
	        delete this._mediaObject.simulcast;
	        delete this._mediaObject.simulcast_03;
	        delete this._mediaObject.rids;
	    }
	    close() {
	        this._mediaObject.direction = 'inactive';
	        this._mediaObject.port = 0;
	        delete this._mediaObject.ext;
	        delete this._mediaObject.ssrcs;
	        delete this._mediaObject.ssrcGroups;
	        delete this._mediaObject.simulcast;
	        delete this._mediaObject.simulcast_03;
	        delete this._mediaObject.rids;
	        delete this._mediaObject.extmapAllowMixed;
	    }
	}
	exports.MediaSection = MediaSection;
	class AnswerMediaSection extends MediaSection {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {
	        super({ iceParameters, iceCandidates, dtlsParameters, planB });
	        this._mediaObject.mid = String(offerMediaObject.mid);
	        this._mediaObject.type = offerMediaObject.type;
	        this._mediaObject.protocol = offerMediaObject.protocol;
	        if (!plainRtpParameters) {
	            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
	            this._mediaObject.port = 7;
	        }
	        else {
	            this._mediaObject.connection =
	                {
	                    ip: plainRtpParameters.ip,
	                    version: plainRtpParameters.ipVersion
	                };
	            this._mediaObject.port = plainRtpParameters.port;
	        }
	        switch (offerMediaObject.type) {
	            case 'audio':
	            case 'video':
	                {
	                    this._mediaObject.direction = 'recvonly';
	                    this._mediaObject.rtp = [];
	                    this._mediaObject.rtcpFb = [];
	                    this._mediaObject.fmtp = [];
	                    for (const codec of answerRtpParameters.codecs) {
	                        const rtp = {
	                            payload: codec.payloadType,
	                            codec: getCodecName(codec),
	                            rate: codec.clockRate
	                        };
	                        if (codec.channels > 1)
	                            rtp.encoding = codec.channels;
	                        this._mediaObject.rtp.push(rtp);
	                        const codecParameters = utils$1.clone(codec.parameters || {});
	                        if (codecOptions) {
	                            const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusPtime, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate } = codecOptions;
	                            const offerCodec = offerRtpParameters.codecs
	                                .find((c) => (c.payloadType === codec.payloadType));
	                            switch (codec.mimeType.toLowerCase()) {
	                                case 'audio/opus':
	                                    {
	                                        if (opusStereo !== undefined) {
	                                            offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;
	                                            codecParameters.stereo = opusStereo ? 1 : 0;
	                                        }
	                                        if (opusFec !== undefined) {
	                                            offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;
	                                            codecParameters.useinbandfec = opusFec ? 1 : 0;
	                                        }
	                                        if (opusDtx !== undefined) {
	                                            offerCodec.parameters.usedtx = opusDtx ? 1 : 0;
	                                            codecParameters.usedtx = opusDtx ? 1 : 0;
	                                        }
	                                        if (opusMaxPlaybackRate !== undefined) {
	                                            codecParameters.maxplaybackrate = opusMaxPlaybackRate;
	                                        }
	                                        if (opusPtime !== undefined) {
	                                            offerCodec.parameters.ptime = opusPtime;
	                                            codecParameters.ptime = opusPtime;
	                                        }
	                                        break;
	                                    }
	                                case 'video/vp8':
	                                case 'video/vp9':
	                                case 'video/h264':
	                                case 'video/h265':
	                                    {
	                                        if (videoGoogleStartBitrate !== undefined)
	                                            codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;
	                                        if (videoGoogleMaxBitrate !== undefined)
	                                            codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;
	                                        if (videoGoogleMinBitrate !== undefined)
	                                            codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;
	                                        break;
	                                    }
	                            }
	                        }
	                        const fmtp = {
	                            payload: codec.payloadType,
	                            config: ''
	                        };
	                        for (const key of Object.keys(codecParameters)) {
	                            if (fmtp.config)
	                                fmtp.config += ';';
	                            fmtp.config += `${key}=${codecParameters[key]}`;
	                        }
	                        if (fmtp.config)
	                            this._mediaObject.fmtp.push(fmtp);
	                        for (const fb of codec.rtcpFeedback) {
	                            this._mediaObject.rtcpFb.push({
	                                payload: codec.payloadType,
	                                type: fb.type,
	                                subtype: fb.parameter
	                            });
	                        }
	                    }
	                    this._mediaObject.payloads = answerRtpParameters.codecs
	                        .map((codec) => codec.payloadType)
	                        .join(' ');
	                    this._mediaObject.ext = [];
	                    for (const ext of answerRtpParameters.headerExtensions) {
	                        // Don't add a header extension if not present in the offer.
	                        const found = (offerMediaObject.ext || [])
	                            .some((localExt) => localExt.uri === ext.uri);
	                        if (!found)
	                            continue;
	                        this._mediaObject.ext.push({
	                            uri: ext.uri,
	                            value: ext.id
	                        });
	                    }
	                    // Allow both 1 byte and 2 bytes length header extensions.
	                    if (extmapAllowMixed &&
	                        offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {
	                        this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';
	                    }
	                    // Simulcast.
	                    if (offerMediaObject.simulcast) {
	                        this._mediaObject.simulcast =
	                            {
	                                dir1: 'recv',
	                                list1: offerMediaObject.simulcast.list1
	                            };
	                        this._mediaObject.rids = [];
	                        for (const rid of offerMediaObject.rids || []) {
	                            if (rid.direction !== 'send')
	                                continue;
	                            this._mediaObject.rids.push({
	                                id: rid.id,
	                                direction: 'recv'
	                            });
	                        }
	                    }
	                    // Simulcast (draft version 03).
	                    else if (offerMediaObject.simulcast_03) {
	                        // eslint-disable-next-line camelcase, @typescript-eslint/camelcase
	                        this._mediaObject.simulcast_03 =
	                            {
	                                value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')
	                            };
	                        this._mediaObject.rids = [];
	                        for (const rid of offerMediaObject.rids || []) {
	                            if (rid.direction !== 'send')
	                                continue;
	                            this._mediaObject.rids.push({
	                                id: rid.id,
	                                direction: 'recv'
	                            });
	                        }
	                    }
	                    this._mediaObject.rtcpMux = 'rtcp-mux';
	                    this._mediaObject.rtcpRsize = 'rtcp-rsize';
	                    if (this._planB && this._mediaObject.type === 'video')
	                        this._mediaObject.xGoogleFlag = 'conference';
	                    break;
	                }
	            case 'application':
	                {
	                    // New spec.
	                    if (typeof offerMediaObject.sctpPort === 'number') {
	                        this._mediaObject.payloads = 'webrtc-datachannel';
	                        this._mediaObject.sctpPort = sctpParameters.port;
	                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;
	                    }
	                    // Old spec.
	                    else if (offerMediaObject.sctpmap) {
	                        this._mediaObject.payloads = sctpParameters.port;
	                        this._mediaObject.sctpmap =
	                            {
	                                app: 'webrtc-datachannel',
	                                sctpmapNumber: sctpParameters.port,
	                                maxMessageSize: sctpParameters.maxMessageSize
	                            };
	                    }
	                    break;
	                }
	        }
	    }
	    setDtlsRole(role) {
	        switch (role) {
	            case 'client':
	                this._mediaObject.setup = 'active';
	                break;
	            case 'server':
	                this._mediaObject.setup = 'passive';
	                break;
	            case 'auto':
	                this._mediaObject.setup = 'actpass';
	                break;
	        }
	    }
	}
	exports.AnswerMediaSection = AnswerMediaSection;
	class OfferMediaSection extends MediaSection {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false }) {
	        super({ iceParameters, iceCandidates, dtlsParameters, planB });
	        this._mediaObject.mid = String(mid);
	        this._mediaObject.type = kind;
	        if (!plainRtpParameters) {
	            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
	            if (!sctpParameters)
	                this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';
	            else
	                this._mediaObject.protocol = 'UDP/DTLS/SCTP';
	            this._mediaObject.port = 7;
	        }
	        else {
	            this._mediaObject.connection =
	                {
	                    ip: plainRtpParameters.ip,
	                    version: plainRtpParameters.ipVersion
	                };
	            this._mediaObject.protocol = 'RTP/AVP';
	            this._mediaObject.port = plainRtpParameters.port;
	        }
	        switch (kind) {
	            case 'audio':
	            case 'video':
	                {
	                    this._mediaObject.direction = 'sendonly';
	                    this._mediaObject.rtp = [];
	                    this._mediaObject.rtcpFb = [];
	                    this._mediaObject.fmtp = [];
	                    if (!this._planB)
	                        this._mediaObject.msid = `${streamId || '-'} ${trackId}`;
	                    for (const codec of offerRtpParameters.codecs) {
	                        const rtp = {
	                            payload: codec.payloadType,
	                            codec: getCodecName(codec),
	                            rate: codec.clockRate
	                        };
	                        if (codec.channels > 1)
	                            rtp.encoding = codec.channels;
	                        this._mediaObject.rtp.push(rtp);
	                        const fmtp = {
	                            payload: codec.payloadType,
	                            config: ''
	                        };
	                        for (const key of Object.keys(codec.parameters)) {
	                            if (fmtp.config)
	                                fmtp.config += ';';
	                            fmtp.config += `${key}=${codec.parameters[key]}`;
	                        }
	                        if (fmtp.config)
	                            this._mediaObject.fmtp.push(fmtp);
	                        for (const fb of codec.rtcpFeedback) {
	                            this._mediaObject.rtcpFb.push({
	                                payload: codec.payloadType,
	                                type: fb.type,
	                                subtype: fb.parameter
	                            });
	                        }
	                    }
	                    this._mediaObject.payloads = offerRtpParameters.codecs
	                        .map((codec) => codec.payloadType)
	                        .join(' ');
	                    this._mediaObject.ext = [];
	                    for (const ext of offerRtpParameters.headerExtensions) {
	                        this._mediaObject.ext.push({
	                            uri: ext.uri,
	                            value: ext.id
	                        });
	                    }
	                    this._mediaObject.rtcpMux = 'rtcp-mux';
	                    this._mediaObject.rtcpRsize = 'rtcp-rsize';
	                    const encoding = offerRtpParameters.encodings[0];
	                    const ssrc = encoding.ssrc;
	                    const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
	                        ? encoding.rtx.ssrc
	                        : undefined;
	                    this._mediaObject.ssrcs = [];
	                    this._mediaObject.ssrcGroups = [];
	                    if (offerRtpParameters.rtcp.cname) {
	                        this._mediaObject.ssrcs.push({
	                            id: ssrc,
	                            attribute: 'cname',
	                            value: offerRtpParameters.rtcp.cname
	                        });
	                    }
	                    if (this._planB) {
	                        this._mediaObject.ssrcs.push({
	                            id: ssrc,
	                            attribute: 'msid',
	                            value: `${streamId || '-'} ${trackId}`
	                        });
	                    }
	                    if (rtxSsrc) {
	                        if (offerRtpParameters.rtcp.cname) {
	                            this._mediaObject.ssrcs.push({
	                                id: rtxSsrc,
	                                attribute: 'cname',
	                                value: offerRtpParameters.rtcp.cname
	                            });
	                        }
	                        if (this._planB) {
	                            this._mediaObject.ssrcs.push({
	                                id: rtxSsrc,
	                                attribute: 'msid',
	                                value: `${streamId || '-'} ${trackId}`
	                            });
	                        }
	                        // Associate original and retransmission SSRCs.
	                        this._mediaObject.ssrcGroups.push({
	                            semantics: 'FID',
	                            ssrcs: `${ssrc} ${rtxSsrc}`
	                        });
	                    }
	                    break;
	                }
	            case 'application':
	                {
	                    // New spec.
	                    if (!oldDataChannelSpec) {
	                        this._mediaObject.payloads = 'webrtc-datachannel';
	                        this._mediaObject.sctpPort = sctpParameters.port;
	                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;
	                    }
	                    // Old spec.
	                    else {
	                        this._mediaObject.payloads = sctpParameters.port;
	                        this._mediaObject.sctpmap =
	                            {
	                                app: 'webrtc-datachannel',
	                                sctpmapNumber: sctpParameters.port,
	                                maxMessageSize: sctpParameters.maxMessageSize
	                            };
	                    }
	                    break;
	                }
	        }
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    setDtlsRole(role) {
	        // Always 'actpass'.
	        this._mediaObject.setup = 'actpass';
	    }
	    planBReceive({ offerRtpParameters, streamId, trackId }) {
	        const encoding = offerRtpParameters.encodings[0];
	        const ssrc = encoding.ssrc;
	        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
	            ? encoding.rtx.ssrc
	            : undefined;
	        if (offerRtpParameters.rtcp.cname) {
	            this._mediaObject.ssrcs.push({
	                id: ssrc,
	                attribute: 'cname',
	                value: offerRtpParameters.rtcp.cname
	            });
	        }
	        this._mediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'msid',
	            value: `${streamId || '-'} ${trackId}`
	        });
	        if (rtxSsrc) {
	            if (offerRtpParameters.rtcp.cname) {
	                this._mediaObject.ssrcs.push({
	                    id: rtxSsrc,
	                    attribute: 'cname',
	                    value: offerRtpParameters.rtcp.cname
	                });
	            }
	            this._mediaObject.ssrcs.push({
	                id: rtxSsrc,
	                attribute: 'msid',
	                value: `${streamId || '-'} ${trackId}`
	            });
	            // Associate original and retransmission SSRCs.
	            this._mediaObject.ssrcGroups.push({
	                semantics: 'FID',
	                ssrcs: `${ssrc} ${rtxSsrc}`
	            });
	        }
	    }
	    planBStopReceiving({ offerRtpParameters }) {
	        const encoding = offerRtpParameters.encodings[0];
	        const ssrc = encoding.ssrc;
	        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
	            ? encoding.rtx.ssrc
	            : undefined;
	        this._mediaObject.ssrcs = this._mediaObject.ssrcs
	            .filter((s) => s.id !== ssrc && s.id !== rtxSsrc);
	        if (rtxSsrc) {
	            this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups
	                .filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);
	        }
	    }
	}
	exports.OfferMediaSection = OfferMediaSection;
	function getCodecName(codec) {
	    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
	    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
	    if (!mimeTypeMatch)
	        throw new TypeError('invalid codec.mimeType');
	    return mimeTypeMatch[2];
	}
	});

	unwrapExports(MediaSection_1);
	var MediaSection_2 = MediaSection_1.MediaSection;
	var MediaSection_3 = MediaSection_1.AnswerMediaSection;
	var MediaSection_4 = MediaSection_1.OfferMediaSection;

	var RemoteSdp_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);


	const logger = new Logger_1.Logger('RemoteSdp');
	class RemoteSdp {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false }) {
	        // MediaSection instances.
	        this._mediaSections = [];
	        // MediaSection indices indexed by MID.
	        this._midToIndex = new Map();
	        this._iceParameters = iceParameters;
	        this._iceCandidates = iceCandidates;
	        this._dtlsParameters = dtlsParameters;
	        this._sctpParameters = sctpParameters;
	        this._plainRtpParameters = plainRtpParameters;
	        this._planB = planB;
	        this._sdpObject =
	            {
	                version: 0,
	                origin: {
	                    address: '0.0.0.0',
	                    ipVer: 4,
	                    netType: 'IN',
	                    sessionId: 10000,
	                    sessionVersion: 0,
	                    username: 'mediasoup-client'
	                },
	                name: '-',
	                timing: { start: 0, stop: 0 },
	                media: []
	            };
	        // If ICE parameters are given, add ICE-Lite indicator.
	        if (iceParameters && iceParameters.iceLite) {
	            this._sdpObject.icelite = 'ice-lite';
	        }
	        // If DTLS parameters are given, assume WebRTC and BUNDLE.
	        if (dtlsParameters) {
	            this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };
	            // NOTE: We take the latest fingerprint.
	            const numFingerprints = this._dtlsParameters.fingerprints.length;
	            this._sdpObject.fingerprint =
	                {
	                    type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,
	                    hash: dtlsParameters.fingerprints[numFingerprints - 1].value
	                };
	            this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];
	        }
	        // If there are plain RPT parameters, override SDP origin.
	        if (plainRtpParameters) {
	            this._sdpObject.origin.address = plainRtpParameters.ip;
	            this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;
	        }
	    }
	    updateIceParameters(iceParameters) {
	        logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);
	        this._iceParameters = iceParameters;
	        this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;
	        for (const mediaSection of this._mediaSections) {
	            mediaSection.setIceParameters(iceParameters);
	        }
	    }
	    updateDtlsRole(role) {
	        logger.debug('updateDtlsRole() [role:%s]', role);
	        this._dtlsParameters.role = role;
	        for (const mediaSection of this._mediaSections) {
	            mediaSection.setDtlsRole(role);
	        }
	    }
	    getNextMediaSectionIdx() {
	        // If a closed media section is found, return its index.
	        for (let idx = 0; idx < this._mediaSections.length; ++idx) {
	            const mediaSection = this._mediaSections[idx];
	            if (mediaSection.closed)
	                return { idx, reuseMid: mediaSection.mid };
	        }
	        // If no closed media section is found, return next one.
	        return { idx: this._mediaSections.length };
	    }
	    send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {
	        const mediaSection = new MediaSection_1.AnswerMediaSection({
	            iceParameters: this._iceParameters,
	            iceCandidates: this._iceCandidates,
	            dtlsParameters: this._dtlsParameters,
	            plainRtpParameters: this._plainRtpParameters,
	            planB: this._planB,
	            offerMediaObject,
	            offerRtpParameters,
	            answerRtpParameters,
	            codecOptions,
	            extmapAllowMixed
	        });
	        // Unified-Plan with closed media section replacement.
	        if (reuseMid) {
	            this._replaceMediaSection(mediaSection, reuseMid);
	        }
	        // Unified-Plan or Plan-B with different media kind.
	        else if (!this._midToIndex.has(mediaSection.mid)) {
	            this._addMediaSection(mediaSection);
	        }
	        // Plan-B with same media kind.
	        else {
	            this._replaceMediaSection(mediaSection);
	        }
	    }
	    receive({ mid, kind, offerRtpParameters, streamId, trackId }) {
	        const idx = this._midToIndex.get(mid);
	        let mediaSection;
	        if (idx !== undefined)
	            mediaSection = this._mediaSections[idx];
	        // Unified-Plan or different media kind.
	        if (!mediaSection) {
	            mediaSection = new MediaSection_1.OfferMediaSection({
	                iceParameters: this._iceParameters,
	                iceCandidates: this._iceCandidates,
	                dtlsParameters: this._dtlsParameters,
	                plainRtpParameters: this._plainRtpParameters,
	                planB: this._planB,
	                mid,
	                kind,
	                offerRtpParameters,
	                streamId,
	                trackId
	            });
	            this._addMediaSection(mediaSection);
	        }
	        // Plan-B.
	        else {
	            mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });
	            this._replaceMediaSection(mediaSection);
	        }
	    }
	    disableMediaSection(mid) {
	        const idx = this._midToIndex.get(mid);
	        const mediaSection = this._mediaSections[idx];
	        mediaSection.disable();
	    }
	    closeMediaSection(mid) {
	        const idx = this._midToIndex.get(mid);
	        const mediaSection = this._mediaSections[idx];
	        // NOTE: Closing the first m section is a pain since it invalidates the
	        // bundled transport, so let's avoid it.
	        if (mid === this._firstMid) {
	            logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);
	            this.disableMediaSection(mid);
	            return;
	        }
	        mediaSection.close();
	        // Regenerate BUNDLE mids.
	        this._regenerateBundleMids();
	    }
	    planBStopReceiving({ mid, offerRtpParameters }) {
	        const idx = this._midToIndex.get(mid);
	        const mediaSection = this._mediaSections[idx];
	        mediaSection.planBStopReceiving({ offerRtpParameters });
	        this._replaceMediaSection(mediaSection);
	    }
	    sendSctpAssociation({ offerMediaObject }) {
	        const mediaSection = new MediaSection_1.AnswerMediaSection({
	            iceParameters: this._iceParameters,
	            iceCandidates: this._iceCandidates,
	            dtlsParameters: this._dtlsParameters,
	            sctpParameters: this._sctpParameters,
	            plainRtpParameters: this._plainRtpParameters,
	            offerMediaObject
	        });
	        this._addMediaSection(mediaSection);
	    }
	    receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {
	        const mediaSection = new MediaSection_1.OfferMediaSection({
	            iceParameters: this._iceParameters,
	            iceCandidates: this._iceCandidates,
	            dtlsParameters: this._dtlsParameters,
	            sctpParameters: this._sctpParameters,
	            plainRtpParameters: this._plainRtpParameters,
	            mid: 'datachannel',
	            kind: 'application',
	            oldDataChannelSpec
	        });
	        this._addMediaSection(mediaSection);
	    }
	    getSdp() {
	        // Increase SDP version.
	        this._sdpObject.origin.sessionVersion++;
	        return sdpTransform.write(this._sdpObject);
	    }
	    _addMediaSection(newMediaSection) {
	        if (!this._firstMid)
	            this._firstMid = newMediaSection.mid;
	        // Add to the vector.
	        this._mediaSections.push(newMediaSection);
	        // Add to the map.
	        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);
	        // Add to the SDP object.
	        this._sdpObject.media.push(newMediaSection.getObject());
	        // Regenerate BUNDLE mids.
	        this._regenerateBundleMids();
	    }
	    _replaceMediaSection(newMediaSection, reuseMid) {
	        // Store it in the map.
	        if (reuseMid) {
	            const idx = this._midToIndex.get(reuseMid);
	            const oldMediaSection = this._mediaSections[idx];
	            // Replace the index in the vector with the new media section.
	            this._mediaSections[idx] = newMediaSection;
	            // Update the map.
	            this._midToIndex.delete(oldMediaSection.mid);
	            this._midToIndex.set(newMediaSection.mid, idx);
	            // Update the SDP object.
	            this._sdpObject.media[idx] = newMediaSection.getObject();
	            // Regenerate BUNDLE mids.
	            this._regenerateBundleMids();
	        }
	        else {
	            const idx = this._midToIndex.get(newMediaSection.mid);
	            // Replace the index in the vector with the new media section.
	            this._mediaSections[idx] = newMediaSection;
	            // Update the SDP object.
	            this._sdpObject.media[idx] = newMediaSection.getObject();
	        }
	    }
	    _regenerateBundleMids() {
	        if (!this._dtlsParameters)
	            return;
	        this._sdpObject.groups[0].mids = this._mediaSections
	            .filter((mediaSection) => !mediaSection.closed)
	            .map((mediaSection) => mediaSection.mid)
	            .join(' ');
	    }
	}
	exports.RemoteSdp = RemoteSdp;
	});

	unwrapExports(RemoteSdp_1);
	var RemoteSdp_2 = RemoteSdp_1.RemoteSdp;

	var scalabilityModes = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const ScalabilityModeRegex = new RegExp('^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})');
	function parse(scalabilityMode) {
	    const match = ScalabilityModeRegex.exec(scalabilityMode);
	    if (match) {
	        return {
	            spatialLayers: Number(match[1]),
	            temporalLayers: Number(match[2])
	        };
	    }
	    else {
	        return {
	            spatialLayers: 1,
	            temporalLayers: 1
	        };
	    }
	}
	exports.parse = parse;
	});

	unwrapExports(scalabilityModes);
	var scalabilityModes_1 = scalabilityModes.parse;

	var Chrome74_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);

	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpUnifiedPlanUtils = __importStar(unifiedPlanUtils);



	const logger = new Logger_1.Logger('Chrome74');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome74 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome74();
	    }
	    get name() {
	        return 'Chrome74';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan'
	        });
	        try {
	            pc.addTransceiver('audio');
	            pc.addTransceiver('video');
	            const offer = await pc.createOffer();
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (encodings && encodings.length > 1) {
	            encodings.forEach((encoding, idx) => {
	                encoding.rid = `r${idx}`;
	            });
	        }
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, {
	            direction: 'sendonly',
	            streams: [this._sendStream],
	            sendEncodings: encodings
	        });
	        let offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        let offerMediaObject;
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        // Special case for VP9 with SVC.
	        let hackVp9Svc = false;
	        const layers = scalabilityModes.parse((encodings || [{}])[0].scalabilityMode);
	        if (encodings &&
	            encodings.length === 1 &&
	            layers.spatialLayers > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {
	            logger.debug('send() | enabling legacy simulcast for VP9 SVC');
	            hackVp9Svc = true;
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            sdpUnifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: layers.spatialLayers
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings by parsing the SDP offer if no encodings are given.
	        if (!encodings) {
	            sendingRtpParameters.encodings =
	                sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        }
	        // Set RTP encodings by parsing the SDP offer and complete them with given
	        // one if just a single encoding has been given.
	        else if (encodings.length === 1) {
	            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	            Object.assign(newEncodings[0], encodings[0]);
	            // Hack for VP9 SVC.
	            if (hackVp9Svc)
	                newEncodings = [newEncodings[0]];
	            sendingRtpParameters.encodings = newEncodings;
	        }
	        // Otherwise if more than 1 encoding are given use them verbatim.
	        else {
	            sendingRtpParameters.encodings = encodings;
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            reuseMid: mediaSectionIdx.reuseMid,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions,
	            extmapAllowMixed: true
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome74 = Chrome74;
	});

	unwrapExports(Chrome74_1);
	var Chrome74_2 = Chrome74_1.Chrome74;

	var Chrome70_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);

	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpUnifiedPlanUtils = __importStar(unifiedPlanUtils);



	const logger = new Logger_1.Logger('Chrome70');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome70 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome70();
	    }
	    get name() {
	        return 'Chrome70';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan'
	        });
	        try {
	            pc.addTransceiver('audio');
	            pc.addTransceiver('video');
	            const offer = await pc.createOffer();
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
	        let offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        let offerMediaObject;
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (encodings && encodings.length > 1) {
	            logger.debug('send() | enabling legacy simulcast');
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            sdpUnifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        // Special case for VP9 with SVC.
	        let hackVp9Svc = false;
	        const layers = scalabilityModes.parse((encodings || [{}])[0].scalabilityMode);
	        if (encodings &&
	            encodings.length === 1 &&
	            layers.spatialLayers > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {
	            logger.debug('send() | enabling legacy simulcast for VP9 SVC');
	            hackVp9Svc = true;
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            sdpUnifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: layers.spatialLayers
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // Hack for VP9 SVC.
	        if (hackVp9Svc) {
	            sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            reuseMid: mediaSectionIdx.reuseMid,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome70 = Chrome70;
	});

	unwrapExports(Chrome70_1);
	var Chrome70_2 = Chrome70_1.Chrome70;

	var planBUtils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function getRtpEncodings({ offerMediaObject, track }) {
	    const ssrcs = new Set();
	    for (const line of offerMediaObject.ssrcs || []) {
	        if (line.attribute !== 'msid')
	            continue;
	        const trackId = line.value.split(' ')[1];
	        if (trackId === track.id) {
	            const ssrc = line.id;
	            ssrcs.add(ssrc);
	        }
	    }
	    if (ssrcs.size === 0)
	        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);
	    const ssrcToRtxSsrc = new Map();
	    // First assume RTX is used.
	    for (const line of offerMediaObject.ssrcGroups || []) {
	        if (line.semantics !== 'FID')
	            continue;
	        let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
	        ssrc = Number(ssrc);
	        rtxSsrc = Number(rtxSsrc);
	        if (ssrcs.has(ssrc)) {
	            // Remove both the SSRC and RTX SSRC from the set so later we know that they
	            // are already handled.
	            ssrcs.delete(ssrc);
	            ssrcs.delete(rtxSsrc);
	            // Add to the map.
	            ssrcToRtxSsrc.set(ssrc, rtxSsrc);
	        }
	    }
	    // If the set of SSRCs is not empty it means that RTX is not being used, so take
	    // media SSRCs from there.
	    for (const ssrc of ssrcs) {
	        // Add to the map.
	        ssrcToRtxSsrc.set(ssrc, null);
	    }
	    const encodings = [];
	    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
	        const encoding = { ssrc };
	        if (rtxSsrc)
	            encoding.rtx = { ssrc: rtxSsrc };
	        encodings.push(encoding);
	    }
	    return encodings;
	}
	exports.getRtpEncodings = getRtpEncodings;
	/**
	 * Adds multi-ssrc based simulcast into the given SDP media section offer.
	 */
	function addLegacySimulcast({ offerMediaObject, track, numStreams }) {
	    if (numStreams <= 1)
	        throw new TypeError('numStreams must be greater than 1');
	    let firstSsrc;
	    let firstRtxSsrc;
	    let streamId;
	    // Get the SSRC.
	    const ssrcMsidLine = (offerMediaObject.ssrcs || [])
	        .find((line) => {
	        if (line.attribute !== 'msid')
	            return false;
	        const trackId = line.value.split(' ')[1];
	        if (trackId === track.id) {
	            firstSsrc = line.id;
	            streamId = line.value.split(' ')[0];
	            return true;
	        }
	        else {
	            return false;
	        }
	    });
	    if (!ssrcMsidLine)
	        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);
	    // Get the SSRC for RTX.
	    (offerMediaObject.ssrcGroups || [])
	        .some((line) => {
	        if (line.semantics !== 'FID')
	            return false;
	        const ssrcs = line.ssrcs.split(/\s+/);
	        if (Number(ssrcs[0]) === firstSsrc) {
	            firstRtxSsrc = Number(ssrcs[1]);
	            return true;
	        }
	        else {
	            return false;
	        }
	    });
	    const ssrcCnameLine = offerMediaObject.ssrcs
	        .find((line) => (line.attribute === 'cname' && line.id === firstSsrc));
	    if (!ssrcCnameLine)
	        throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);
	    const cname = ssrcCnameLine.value;
	    const ssrcs = [];
	    const rtxSsrcs = [];
	    for (let i = 0; i < numStreams; ++i) {
	        ssrcs.push(firstSsrc + i);
	        if (firstRtxSsrc)
	            rtxSsrcs.push(firstRtxSsrc + i);
	    }
	    offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];
	    offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];
	    offerMediaObject.ssrcGroups.push({
	        semantics: 'SIM',
	        ssrcs: ssrcs.join(' ')
	    });
	    for (let i = 0; i < ssrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'msid',
	            value: `${streamId} ${track.id}`
	        });
	    }
	    for (let i = 0; i < rtxSsrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        const rtxSsrc = rtxSsrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'msid',
	            value: `${streamId} ${track.id}`
	        });
	        offerMediaObject.ssrcGroups.push({
	            semantics: 'FID',
	            ssrcs: `${ssrc} ${rtxSsrc}`
	        });
	    }
	}
	exports.addLegacySimulcast = addLegacySimulcast;
	});

	unwrapExports(planBUtils);
	var planBUtils_1 = planBUtils.getRtpEncodings;
	var planBUtils_2 = planBUtils.addLegacySimulcast;

	var Chrome67_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);

	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpPlanBUtils = __importStar(planBUtils);


	const logger = new Logger_1.Logger('Chrome67');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome67 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of RTCRtpSender indexed by localId.
	        this._mapSendLocalIdRtpSender = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome67();
	    }
	    get name() {
	        return 'Chrome67';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addTrack(track, this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'video');
	            sdpPlanBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 and there is effective simulcast, add scalabilityMode to each
	        // encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        const rtpSender = this._pc.getSenders()
	            .find((s) => s.track === track);
	        // Insert into the map.
	        this._mapSendLocalIdRtpSender.set(localId, rtpSender);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        this._pc.removeTrack(rtpSender);
	        if (rtpSender.track)
	            this._sendStream.removeTrack(rtpSender.track);
	        this._mapSendLocalIdRtpSender.delete(localId);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const oldTrack = rtpSender.track;
	        await rtpSender.replaceTrack(track);
	        // Remove the old track from the local stream.
	        if (oldTrack)
	            this._sendStream.removeTrack(oldTrack);
	        // Add the new track to the local stream.
	        if (track)
	            this._sendStream.addTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        return rtpSender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const rtpReceiver = this._pc.getReceivers()
	            .find((r) => r.track && r.track.id === localId);
	        if (!rtpReceiver)
	            throw new Error('new RTCRtpReceiver not');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });
	        return {
	            localId,
	            track: rtpReceiver.track,
	            rtpReceiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId);
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId);
	        if (!rtpReceiver)
	            throw new Error('associated RTCRtpReceiver not found');
	        return rtpReceiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome67 = Chrome67;
	});

	unwrapExports(Chrome67_1);
	var Chrome67_2 = Chrome67_1.Chrome67;

	var Chrome55_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);


	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpPlanBUtils = __importStar(planBUtils);


	const logger = new Logger_1.Logger('Chrome55');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome55 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of sending MediaStreamTracks indexed by localId.
	        this._mapSendLocalIdTrack = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome55();
	    }
	    get name() {
	        return 'Chrome55';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addStream(this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
	            sdpPlanBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 and there is effective simulcast, add scalabilityMode to each
	        // encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        // Insert into the map.
	        this._mapSendLocalIdTrack.set(localId, track);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const track = this._mapSendLocalIdTrack.get(localId);
	        if (!track)
	            throw new Error('track not found');
	        this._mapSendLocalIdTrack.delete(localId);
	        this._sendStream.removeTrack(track);
	        this._pc.addStream(this._sendStream);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    localId, track) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        throw new errors.UnsupportedError(' not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setRtpEncodingParameters(localId, params) {
	        throw new errors.UnsupportedError('not supported');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getSenderStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        const streamId = rtpParameters.rtcp.cname;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const stream = this._pc.getRemoteStreams()
	            .find((s) => s.id === streamId);
	        const track = stream.getTrackById(localId);
	        if (!track)
	            throw new Error('remote track not found');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
	        return { localId, track };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId);
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getReceiverStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome55 = Chrome55;
	});

	unwrapExports(Chrome55_1);
	var Chrome55_2 = Chrome55_1.Chrome55;

	var Firefox60_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);


	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpUnifiedPlanUtils = __importStar(unifiedPlanUtils);


	const logger = new Logger_1.Logger('Firefox60');
	const SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };
	class Firefox60 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Firefox60();
	    }
	    get name() {
	        return 'Firefox60';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require'
	        });
	        // NOTE: We need to add a real video track to get the RID extension mapping.
	        const canvas = document.createElement('canvas');
	        // NOTE: Otherwise Firefox fails in next line.
	        canvas.getContext('2d');
	        const fakeStream = canvas.captureStream();
	        const fakeVideoTrack = fakeStream.getVideoTracks()[0];
	        try {
	            pc.addTransceiver('audio', { direction: 'sendrecv' });
	            const videoTransceiver = pc.addTransceiver(fakeVideoTrack, { direction: 'sendrecv' });
	            const parameters = videoTransceiver.sender.getParameters();
	            const encodings = [
	                { rid: 'r0', maxBitrate: 100000 },
	                { rid: 'r1', maxBitrate: 500000 }
	            ];
	            parameters.encodings = encodings;
	            await videoTransceiver.sender.setParameters(parameters);
	            const offer = await pc.createOffer();
	            try {
	                canvas.remove();
	            }
	            catch (error) { }
	            try {
	                fakeVideoTrack.stop();
	            }
	            catch (error) { }
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                canvas.remove();
	            }
	            catch (error2) { }
	            try {
	                fakeVideoTrack.stop();
	            }
	            catch (error2) { }
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async updateIceServers(iceServers) {
	        // NOTE: Firefox does not implement pc.setConfiguration().
	        throw new errors.UnsupportedError('not supported');
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        let reverseEncodings;
	        if (encodings && encodings.length > 1) {
	            encodings.forEach((encoding, idx) => {
	                encoding.rid = `r${idx}`;
	            });
	            // Clone the encodings and reverse them because Firefox likes them
	            // from high to low.
	            reverseEncodings = utils$1.clone(encodings).reverse();
	        }
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        // NOTE: Firefox fails sometimes to properly anticipate the closed media
	        // section that it should use, so don't reuse closed media sections.
	        //   https://github.com/versatica/mediasoup-client/issues/104
	        //
	        // const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
	        // NOTE: This is not spec compliants. Encodings should be given in addTransceiver
	        // second argument, but Firefox does not support it.
	        if (reverseEncodings) {
	            const parameters = transceiver.sender.getParameters();
	            parameters.encodings = reverseEncodings;
	            await transceiver.sender.setParameters(parameters);
	        }
	        const offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        // In Firefox use DTLS role client even if we are the "offerer" since
	        // Firefox does not respect ICE-Lite.
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        const offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings by parsing the SDP offer if no encodings are given.
	        if (!encodings) {
	            sendingRtpParameters.encodings =
	                sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        }
	        // Set RTP encodings by parsing the SDP offer and complete them with given
	        // one if just a single encoding has been given.
	        else if (encodings.length === 1) {
	            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	            Object.assign(newEncodings[0], encodings[0]);
	            sendingRtpParameters.encodings = newEncodings;
	        }
	        // Otherwise if more than 1 encoding are given use them verbatim.
	        else {
	            sendingRtpParameters.encodings = encodings;
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions,
	            extmapAllowMixed: true
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated transceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        // NOTE: Cannot use closeMediaSection() due to the the note above in send()
	        // method.
	        // this._remoteSdp.closeMediaSection(transceiver.mid);
	        this._remoteSdp.disableMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated transceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        // NOTE: We require encodings given from low to high, however Firefox
	        // requires them in reverse order, so do magic here.
	        spatialLayer = parameters.encodings.length - 1 - spatialLayer;
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx >= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Firefox60 = Firefox60;
	});

	unwrapExports(Firefox60_1);
	var Firefox60_2 = Firefox60_1.Firefox60;

	var Safari12_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);

	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpUnifiedPlanUtils = __importStar(unifiedPlanUtils);


	const logger = new Logger_1.Logger('Safari12');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Safari12 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Safari12();
	    }
	    get name() {
	        return 'Safari12';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require'
	        });
	        try {
	            pc.addTransceiver('audio');
	            pc.addTransceiver('video');
	            const offer = await pc.createOffer();
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
	        let offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        let offerMediaObject;
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (encodings && encodings.length > 1) {
	            logger.debug('send() | enabling legacy simulcast');
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            sdpUnifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            reuseMid: mediaSectionIdx.reuseMid,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Safari12 = Safari12;
	});

	unwrapExports(Safari12_1);
	var Safari12_2 = Safari12_1.Safari12;

	var Safari11_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);

	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpPlanBUtils = __importStar(planBUtils);


	const logger = new Logger_1.Logger('Safari11');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Safari11 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of RTCRtpSender indexed by localId.
	        this._mapSendLocalIdRtpSender = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Safari11();
	    }
	    get name() {
	        return 'Safari11';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addTrack(track, this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
	            sdpPlanBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 and there is effective simulcast, add scalabilityMode to each
	        // encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        const rtpSender = this._pc.getSenders()
	            .find((s) => s.track === track);
	        // Insert into the map.
	        this._mapSendLocalIdRtpSender.set(localId, rtpSender);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        if (rtpSender.track)
	            this._sendStream.removeTrack(rtpSender.track);
	        this._mapSendLocalIdRtpSender.delete(localId);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const oldTrack = rtpSender.track;
	        await rtpSender.replaceTrack(track);
	        // Remove the old track from the local stream.
	        if (oldTrack)
	            this._sendStream.removeTrack(oldTrack);
	        // Add the new track to the local stream.
	        if (track)
	            this._sendStream.addTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        return rtpSender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const rtpReceiver = this._pc.getReceivers()
	            .find((r) => r.track && r.track.id === localId);
	        if (!rtpReceiver)
	            throw new Error('new RTCRtpReceiver not');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });
	        return {
	            localId,
	            track: rtpReceiver.track,
	            rtpReceiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId);
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId);
	        if (!rtpReceiver)
	            throw new Error('associated RTCRtpReceiver not found');
	        return rtpReceiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Safari11 = Safari11;
	});

	unwrapExports(Safari11_1);
	var Safari11_2 = Safari11_1.Safari11;

	var edgeUtils = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils$1 = __importStar(utils);
	/**
	 * Normalize ORTC based Edge's RTCRtpReceiver.getCapabilities() to produce a full
	 * compliant ORTC RTCRtpCapabilities.
	 */
	function getCapabilities() {
	    const nativeCaps = RTCRtpReceiver.getCapabilities();
	    const caps = utils$1.clone(nativeCaps);
	    for (const codec of caps.codecs) {
	        // Rename numChannels to channels.
	        codec.channels = codec.numChannels;
	        delete codec.numChannels;
	        // Add mimeType.
	        codec.mimeType = codec.mimeType || `${codec.kind}/${codec.name}`;
	        // NOTE: Edge sets some numeric parameters as string rather than number. Fix them.
	        if (codec.parameters) {
	            const parameters = codec.parameters;
	            if (parameters.apt)
	                parameters.apt = Number(parameters.apt);
	            if (parameters['packetization-mode'])
	                parameters['packetization-mode'] = Number(parameters['packetization-mode']);
	        }
	        // Delete emty parameter String in rtcpFeedback.
	        for (const feedback of codec.rtcpFeedback || []) {
	            if (!feedback.parameter)
	                feedback.parameter = '';
	        }
	    }
	    return caps;
	}
	exports.getCapabilities = getCapabilities;
	/**
	 * Generate RTCRtpParameters as ORTC based Edge likes.
	 */
	function mangleRtpParameters(rtpParameters) {
	    const params = utils$1.clone(rtpParameters);
	    // Rename mid to muxId.
	    if (params.mid) {
	        params.muxId = params.mid;
	        delete params.mid;
	    }
	    for (const codec of params.codecs) {
	        // Rename channels to numChannels.
	        if (codec.channels) {
	            codec.numChannels = codec.channels;
	            delete codec.channels;
	        }
	        // Add codec.name (requried by Edge).
	        if (codec.mimeType && !codec.name)
	            codec.name = codec.mimeType.split('/')[1];
	        // Remove mimeType.
	        delete codec.mimeType;
	    }
	    return params;
	}
	exports.mangleRtpParameters = mangleRtpParameters;
	});

	unwrapExports(edgeUtils);
	var edgeUtils_1 = edgeUtils.getCapabilities;
	var edgeUtils_2 = edgeUtils.mangleRtpParameters;

	var Edge11_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const edgeUtils$1 = __importStar(edgeUtils);

	const logger = new Logger_1.Logger('Edge11');
	class Edge11 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCRtpSenders indexed by id.
	        this._rtpSenders = new Map();
	        // Map of RTCRtpReceivers indexed by id.
	        this._rtpReceivers = new Map();
	        // Next localId for sending tracks.
	        this._nextSendLocalId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Edge11();
	    }
	    get name() {
	        return 'Edge11';
	    }
	    close() {
	        logger.debug('close()');
	        // Close the ICE gatherer.
	        // NOTE: Not yet implemented by Edge.
	        try {
	            this._iceGatherer.close();
	        }
	        catch (error) { }
	        // Close the ICE transport.
	        try {
	            this._iceTransport.stop();
	        }
	        catch (error) { }
	        // Close the DTLS transport.
	        try {
	            this._dtlsTransport.stop();
	        }
	        catch (error) { }
	        // Close RTCRtpSenders.
	        for (const rtpSender of this._rtpSenders.values()) {
	            try {
	                rtpSender.stop();
	            }
	            catch (error) { }
	        }
	        // Close RTCRtpReceivers.
	        for (const rtpReceiver of this._rtpReceivers.values()) {
	            try {
	                rtpReceiver.stop();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        return edgeUtils$1.getCapabilities();
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: { OS: 0, MIS: 0 }
	        };
	    }
	    run({ direction, // eslint-disable-line @typescript-eslint/no-unused-vars
	    iceParameters, iceCandidates, dtlsParameters, sctpParameters, // eslint-disable-line @typescript-eslint/no-unused-vars
	    iceServers, iceTransportPolicy, additionalSettings, // eslint-disable-line @typescript-eslint/no-unused-vars
	    proprietaryConstraints, // eslint-disable-line @typescript-eslint/no-unused-vars
	    extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._remoteIceParameters = iceParameters;
	        this._remoteIceCandidates = iceCandidates;
	        this._remoteDtlsParameters = dtlsParameters;
	        this._cname = `CNAME-${utils$1.generateRandomNumber()}`;
	        this._setIceGatherer({ iceServers, iceTransportPolicy });
	        this._setIceTransport();
	        this._setDtlsTransport();
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async updateIceServers(iceServers) {
	        // NOTE: Edge 11 does not implement iceGatherer.gater().
	        throw new errors.UnsupportedError('not supported');
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        this._remoteIceParameters = iceParameters;
	        if (!this._transportReady)
	            return;
	        logger.debug('restartIce() | calling iceTransport.start()');
	        this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');
	        for (const candidate of this._remoteIceCandidates) {
	            this._iceTransport.addRemoteCandidate(candidate);
	        }
	        this._iceTransport.addRemoteCandidate({});
	    }
	    async getTransportStats() {
	        return this._iceTransport.getStats();
	    }
	    async send(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    { track, encodings, codecOptions, codec }) {
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server' });
	        logger.debug('send() | calling new RTCRtpSender()');
	        const rtpSender = new RTCRtpSender(track, this._dtlsTransport);
	        const rtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        rtpParameters.codecs = ortc$1.reduceCodecs(rtpParameters.codecs, codec);
	        const useRtx = rtpParameters.codecs
	            .some((_codec) => /.+\/rtx$/i.test(_codec.mimeType));
	        if (!encodings)
	            encodings = [{}];
	        for (const encoding of encodings) {
	            encoding.ssrc = utils$1.generateRandomNumber();
	            if (useRtx)
	                encoding.rtx = { ssrc: utils$1.generateRandomNumber() };
	        }
	        rtpParameters.encodings = encodings;
	        // Fill RTCRtpParameters.rtcp.
	        rtpParameters.rtcp =
	            {
	                cname: this._cname,
	                reducedSize: true,
	                mux: true
	            };
	        // NOTE: Convert our standard RTCRtpParameters into those that Edge
	        // expects.
	        const edgeRtpParameters = edgeUtils$1.mangleRtpParameters(rtpParameters);
	        logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);
	        await rtpSender.send(edgeRtpParameters);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        // Store it.
	        this._rtpSenders.set(localId, rtpSender);
	        return { localId, rtpParameters, rtpSender };
	    }
	    async stopSending(localId) {
	        logger.debug('stopSending() [localId:%s]', localId);
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        this._rtpSenders.delete(localId);
	        try {
	            logger.debug('stopSending() | calling rtpSender.stop()');
	            rtpSender.stop();
	        }
	        catch (error) {
	            logger.warn('stopSending() | rtpSender.stop() failed:%o', error);
	            throw error;
	        }
	    }
	    async replaceTrack(localId, track) {
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        rtpSender.setTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings
	            .forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        return rtpSender.getStats();
	    }
	    async sendDataChannel(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    options) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server' });
	        logger.debug('receive() | calling new RTCRtpReceiver()');
	        const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);
	        rtpReceiver.addEventListener('error', (event) => {
	            logger.error('rtpReceiver "error" event [event:%o]', event);
	        });
	        // NOTE: Convert our standard RTCRtpParameters into those that Edge
	        // expects.
	        const edgeRtpParameters = edgeUtils$1.mangleRtpParameters(rtpParameters);
	        logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);
	        await rtpReceiver.receive(edgeRtpParameters);
	        const localId = trackId;
	        // Store it.
	        this._rtpReceivers.set(localId, rtpReceiver);
	        return {
	            localId,
	            track: rtpReceiver.track,
	            rtpReceiver
	        };
	    }
	    async stopReceiving(localId) {
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const rtpReceiver = this._rtpReceivers.get(localId);
	        if (!rtpReceiver)
	            throw new Error('RTCRtpReceiver not found');
	        this._rtpReceivers.delete(localId);
	        try {
	            logger.debug('stopReceiving() | calling rtpReceiver.stop()');
	            rtpReceiver.stop();
	        }
	        catch (error) {
	            logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);
	        }
	    }
	    async getReceiverStats(localId) {
	        const rtpReceiver = this._rtpReceivers.get(localId);
	        if (!rtpReceiver)
	            throw new Error('RTCRtpReceiver not found');
	        return rtpReceiver.getStats();
	    }
	    async receiveDataChannel(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    options) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    _setIceGatherer({ iceServers, iceTransportPolicy }) {
	        const iceGatherer = new RTCIceGatherer({
	            iceServers: iceServers || [],
	            gatherPolicy: iceTransportPolicy || 'all'
	        });
	        iceGatherer.addEventListener('error', (event) => {
	            logger.error('iceGatherer "error" event [event:%o]', event);
	        });
	        // NOTE: Not yet implemented by Edge, which starts gathering automatically.
	        try {
	            iceGatherer.gather();
	        }
	        catch (error) {
	            logger.debug('_setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());
	        }
	        this._iceGatherer = iceGatherer;
	    }
	    _setIceTransport() {
	        const iceTransport = new RTCIceTransport(this._iceGatherer);
	        // NOTE: Not yet implemented by Edge.
	        iceTransport.addEventListener('statechange', () => {
	            switch (iceTransport.state) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	        // NOTE: Not standard, but implemented by Edge.
	        iceTransport.addEventListener('icestatechange', () => {
	            switch (iceTransport.state) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	        iceTransport.addEventListener('candidatepairchange', (event) => {
	            logger.debug('iceTransport "candidatepairchange" event [pair:%o]', event.pair);
	        });
	        this._iceTransport = iceTransport;
	    }
	    _setDtlsTransport() {
	        const dtlsTransport = new RTCDtlsTransport(this._iceTransport);
	        // NOTE: Not yet implemented by Edge.
	        dtlsTransport.addEventListener('statechange', () => {
	            logger.debug('dtlsTransport "statechange" event [state:%s]', dtlsTransport.state);
	        });
	        // NOTE: Not standard, but implemented by Edge.
	        dtlsTransport.addEventListener('dtlsstatechange', () => {
	            logger.debug('dtlsTransport "dtlsstatechange" event [state:%s]', dtlsTransport.state);
	            if (dtlsTransport.state === 'closed')
	                this.emit('@connectionstatechange', 'closed');
	        });
	        dtlsTransport.addEventListener('error', (event) => {
	            logger.error('dtlsTransport "error" event [event:%o]', event);
	        });
	        this._dtlsTransport = dtlsTransport;
	    }
	    async _setupTransport({ localDtlsRole }) {
	        logger.debug('_setupTransport()');
	        // Get our local DTLS parameters.
	        const dtlsParameters = this._dtlsTransport.getLocalParameters();
	        dtlsParameters.role = localDtlsRole;
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        // Start the RTCIceTransport.
	        this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');
	        // Add remote ICE candidates.
	        for (const candidate of this._remoteIceCandidates) {
	            this._iceTransport.addRemoteCandidate(candidate);
	        }
	        // Also signal a 'complete' candidate as per spec.
	        // NOTE: It should be {complete: true} but Edge prefers {}.
	        // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport
	        // won't enter the 'completed' state.
	        this._iceTransport.addRemoteCandidate({});
	        // NOTE: Edge does not like SHA less than 256.
	        this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints
	            .filter((fingerprint) => {
	            return (fingerprint.algorithm === 'sha-256' ||
	                fingerprint.algorithm === 'sha-384' ||
	                fingerprint.algorithm === 'sha-512');
	        });
	        // Start the RTCDtlsTransport.
	        this._dtlsTransport.start(this._remoteDtlsParameters);
	        this._transportReady = true;
	    }
	}
	exports.Edge11 = Edge11;
	});

	unwrapExports(Edge11_1);
	var Edge11_2 = Edge11_1.Edge11;

	var ReactNative_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const sdpTransform = __importStar(lib$1);


	const utils$1 = __importStar(utils);
	const ortc$1 = __importStar(ortc);
	const sdpCommonUtils = __importStar(commonUtils);
	const sdpPlanBUtils = __importStar(planBUtils);


	const logger = new Logger_1.Logger('ReactNative');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class ReactNative extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of sending MediaStreamTracks indexed by localId.
	        this._mapSendLocalIdTrack = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new ReactNative();
	    }
	    get name() {
	        return 'ReactNative';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = sdpTransform.parse(offer.sdp);
	            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc$1.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc$1.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addStream(this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = sdpTransform.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils$1.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils$1.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc$1.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = sdpTransform.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'video');
	            sdpPlanBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            sdpCommonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        // Insert into the map.
	        this._mapSendLocalIdTrack.set(localId, track);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const track = this._mapSendLocalIdTrack.get(localId);
	        if (!track)
	            throw new Error('track not found');
	        this._mapSendLocalIdTrack.delete(localId);
	        this._sendStream.removeTrack(track);
	        this._pc.addStream(this._sendStream);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    localId, track) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setRtpEncodingParameters(localId, params) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getSenderStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = sdpTransform.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        let streamId = rtpParameters.rtcp.cname;
	        // NOTE: In React-Native we cannot reuse the same remote MediaStream for new
	        // remote tracks. This is because react-native-webrtc does not react on new
	        // tracks generated within already existing streams, so force the streamId
	        // to be different.
	        logger.debug('receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc');
	        streamId += `-hack-${utils$1.generateRandomNumber()}`;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = sdpTransform.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        sdpCommonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const stream = this._pc.getRemoteStreams()
	            .find((s) => s.id === streamId);
	        const track = stream.getTrackById(localId);
	        if (!track)
	            throw new Error('remote track not found');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
	        return { localId, track };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId);
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getReceiverStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = sdpTransform.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.ReactNative = ReactNative;
	});

	unwrapExports(ReactNative_1);
	var ReactNative_2 = ReactNative_1.ReactNative;

	var Device_1 = createCommonjsModule(function (module, exports) {
	/* global RTCRtpTransceiver */
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	const bowser = __importStar(es5);


	const ortc$1 = __importStar(ortc);










	const logger = new Logger_1.Logger('Device');
	function detectDevice() {
	    // React-Native.
	    // NOTE: react-native-webrtc >= 1.75.0 is required.
	    if (typeof navigator === 'object' && navigator.product === 'ReactNative') {
	        if (typeof RTCPeerConnection === 'undefined') {
	            logger.warn('this._detectDevice() | unsupported ReactNative without RTCPeerConnection');
	            return undefined;
	        }
	        logger.debug('this._detectDevice() | ReactNative handler chosen');
	        return 'ReactNative';
	    }
	    // Browser.
	    else if (typeof navigator === 'object' && typeof navigator.userAgent === 'string') {
	        const ua = navigator.userAgent;
	        const browser = bowser.getParser(ua);
	        const engine = browser.getEngine();
	        // Chrome and Chromium.
	        if (browser.satisfies({ chrome: '>=74', chromium: '>=74' })) {
	            return 'Chrome74';
	        }
	        else if (browser.satisfies({ chrome: '>=70', chromium: '>=70' })) {
	            return 'Chrome70';
	        }
	        else if (browser.satisfies({ chrome: '>=67', chromium: '>=67' })) {
	            return 'Chrome67';
	        }
	        else if (browser.satisfies({ chrome: '>=55', chromium: '>=55' })) {
	            return 'Chrome55';
	        }
	        // Firefox.
	        else if (browser.satisfies({ firefox: '>=60' })) {
	            return 'Firefox60';
	        }
	        // Safari with Unified-Plan support enabled.
	        else if (browser.satisfies({ safari: '>=12.0' }) &&
	            typeof RTCRtpTransceiver !== 'undefined' &&
	            RTCRtpTransceiver.prototype.hasOwnProperty('currentDirection')) {
	            return 'Safari12';
	        }
	        // Safari with Plab-B support.
	        else if (browser.satisfies({ safari: '>=11' })) {
	            return 'Safari11';
	        }
	        // Old Edge with ORTC support.
	        else if (browser.satisfies({ 'microsoft edge': '>=11' }) &&
	            browser.satisfies({ 'microsoft edge': '<=18' })) {
	            return 'Edge11';
	        }
	        // Best effort for Chromium based browsers.
	        else if (engine.name && engine.name.toLowerCase() === 'blink') {
	            const match = ua.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
	            if (match) {
	                const version = Number(match[1]);
	                if (version >= 74) {
	                    return 'Chrome74';
	                }
	                else if (version >= 70) {
	                    return 'Chrome70';
	                }
	                else if (version >= 67) {
	                    return 'Chrome67';
	                }
	                else {
	                    return 'Chrome55';
	                }
	            }
	            else {
	                return 'Chrome74';
	            }
	        }
	        // Unsupported browser.
	        else {
	            logger.warn('this._detectDevice() | browser not supported [name:%s, version:%s]', browser.getBrowserName(), browser.getBrowserVersion());
	            return undefined;
	        }
	    }
	    // Unknown device.
	    else {
	        logger.warn('this._detectDevice() | unknown device');
	        return undefined;
	    }
	}
	exports.detectDevice = detectDevice;
	class Device {
	    /**
	     * Create a new Device to connect to mediasoup server.
	     *
	     * @throws {UnsupportedError} if device is not supported.
	     */
	    constructor({ handlerName, handlerFactory, Handler } = {}) {
	        // Loaded flag.
	        this._loaded = false;
	        logger.debug('constructor()');
	        // Handle deprecated option.
	        if (Handler) {
	            logger.warn('constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead');
	            if (typeof Handler === 'string')
	                handlerName = Handler;
	            else
	                throw new TypeError('non string Handler option no longer supported, use handlerFactory instead');
	        }
	        if (handlerName && handlerFactory) {
	            throw new TypeError('just one of handlerName or handlerInterface can be given');
	        }
	        if (handlerFactory) {
	            this._handlerFactory = handlerFactory;
	        }
	        else {
	            if (handlerName) {
	                logger.debug('constructor() | handler given: %s', handlerName);
	            }
	            else {
	                handlerName = detectDevice();
	                if (handlerName)
	                    logger.debug('constructor() | detected handler: %s', handlerName);
	                else
	                    throw new errors.UnsupportedError('device not supported');
	            }
	            switch (handlerName) {
	                case 'Chrome74':
	                    this._handlerFactory = Chrome74_1.Chrome74.createFactory();
	                    break;
	                case 'Chrome70':
	                    this._handlerFactory = Chrome70_1.Chrome70.createFactory();
	                    break;
	                case 'Chrome67':
	                    this._handlerFactory = Chrome67_1.Chrome67.createFactory();
	                    break;
	                case 'Chrome55':
	                    this._handlerFactory = Chrome55_1.Chrome55.createFactory();
	                    break;
	                case 'Firefox60':
	                    this._handlerFactory = Firefox60_1.Firefox60.createFactory();
	                    break;
	                case 'Safari12':
	                    this._handlerFactory = Safari12_1.Safari12.createFactory();
	                    break;
	                case 'Safari11':
	                    this._handlerFactory = Safari11_1.Safari11.createFactory();
	                    break;
	                case 'Edge11':
	                    this._handlerFactory = Edge11_1.Edge11.createFactory();
	                    break;
	                case 'ReactNative':
	                    this._handlerFactory = ReactNative_1.ReactNative.createFactory();
	                    break;
	                default:
	                    throw new TypeError(`unknown handlerName "${handlerName}"`);
	            }
	        }
	        // Create a temporal handler to get its name.
	        const handler = this._handlerFactory();
	        this._handlerName = handler.name;
	        handler.close();
	        this._extendedRtpCapabilities = null;
	        this._recvRtpCapabilities = undefined;
	        this._canProduceByKind =
	            {
	                audio: false,
	                video: false
	            };
	        this._sctpCapabilities = null;
	    }
	    /**
	     * The RTC handler name.
	     */
	    get handlerName() {
	        return this._handlerName;
	    }
	    /**
	     * Whether the Device is loaded.
	     */
	    get loaded() {
	        return this._loaded;
	    }
	    /**
	     * RTP capabilities of the Device for receiving media.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     */
	    get rtpCapabilities() {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        return this._recvRtpCapabilities;
	    }
	    /**
	     * SCTP capabilities of the Device.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     */
	    get sctpCapabilities() {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        return this._sctpCapabilities;
	    }
	    /**
	     * Initialize the Device.
	     */
	    async load({ routerRtpCapabilities } = {}) {
	        logger.debug('load() [routerRtpCapabilities:%o]', routerRtpCapabilities);
	        // Temporal handler to get its capabilities.
	        let handler;
	        try {
	            if (this._loaded)
	                throw new errors.InvalidStateError('already loaded');
	            // This may throw.
	            ortc$1.validateRtpCapabilities(routerRtpCapabilities);
	            handler = this._handlerFactory();
	            const nativeRtpCapabilities = await handler.getNativeRtpCapabilities();
	            logger.debug('load() | got native RTP capabilities:%o', nativeRtpCapabilities);
	            // This may throw.
	            ortc$1.validateRtpCapabilities(nativeRtpCapabilities);
	            // Get extended RTP capabilities.
	            this._extendedRtpCapabilities = ortc$1.getExtendedRtpCapabilities(nativeRtpCapabilities, routerRtpCapabilities);
	            logger.debug('load() | got extended RTP capabilities:%o', this._extendedRtpCapabilities);
	            // Check whether we can produce audio/video.
	            this._canProduceByKind.audio =
	                ortc$1.canSend('audio', this._extendedRtpCapabilities);
	            this._canProduceByKind.video =
	                ortc$1.canSend('video', this._extendedRtpCapabilities);
	            // Generate our receiving RTP capabilities for receiving media.
	            this._recvRtpCapabilities =
	                ortc$1.getRecvRtpCapabilities(this._extendedRtpCapabilities);
	            // This may throw.
	            ortc$1.validateRtpCapabilities(this._recvRtpCapabilities);
	            logger.debug('load() | got receiving RTP capabilities:%o', this._recvRtpCapabilities);
	            // Generate our SCTP capabilities.
	            this._sctpCapabilities = await handler.getNativeSctpCapabilities();
	            logger.debug('load() | got native SCTP capabilities:%o', this._sctpCapabilities);
	            // This may throw.
	            ortc$1.validateSctpCapabilities(this._sctpCapabilities);
	            logger.debug('load() succeeded');
	            this._loaded = true;
	            handler.close();
	        }
	        catch (error) {
	            if (handler)
	                handler.close();
	            throw error;
	        }
	    }
	    /**
	     * Whether we can produce audio/video.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     * @throws {TypeError} if wrong arguments.
	     */
	    canProduce(kind) {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        else if (kind !== 'audio' && kind !== 'video')
	            throw new TypeError(`invalid kind "${kind}"`);
	        return this._canProduceByKind[kind];
	    }
	    /**
	     * Creates a Transport for sending media.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     * @throws {TypeError} if wrong arguments.
	     */
	    createSendTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
	        logger.debug('createSendTransport()');
	        return this._createTransport({
	            direction: 'send',
	            id: id,
	            iceParameters: iceParameters,
	            iceCandidates: iceCandidates,
	            dtlsParameters: dtlsParameters,
	            sctpParameters: sctpParameters,
	            iceServers: iceServers,
	            iceTransportPolicy: iceTransportPolicy,
	            additionalSettings: additionalSettings,
	            proprietaryConstraints: proprietaryConstraints,
	            appData: appData
	        });
	    }
	    /**
	     * Creates a Transport for receiving media.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     * @throws {TypeError} if wrong arguments.
	     */
	    createRecvTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
	        logger.debug('createRecvTransport()');
	        return this._createTransport({
	            direction: 'recv',
	            id: id,
	            iceParameters: iceParameters,
	            iceCandidates: iceCandidates,
	            dtlsParameters: dtlsParameters,
	            sctpParameters: sctpParameters,
	            iceServers: iceServers,
	            iceTransportPolicy: iceTransportPolicy,
	            additionalSettings: additionalSettings,
	            proprietaryConstraints: proprietaryConstraints,
	            appData: appData
	        });
	    }
	    _createTransport({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        else if (typeof id !== 'string')
	            throw new TypeError('missing id');
	        else if (typeof iceParameters !== 'object')
	            throw new TypeError('missing iceParameters');
	        else if (!Array.isArray(iceCandidates))
	            throw new TypeError('missing iceCandidates');
	        else if (typeof dtlsParameters !== 'object')
	            throw new TypeError('missing dtlsParameters');
	        else if (sctpParameters && typeof sctpParameters !== 'object')
	            throw new TypeError('wrong sctpParameters');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // Create a new Transport.
	        const transport = new Transport_1.Transport({
	            direction,
	            id,
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            iceServers,
	            iceTransportPolicy,
	            additionalSettings,
	            proprietaryConstraints,
	            appData,
	            handlerFactory: this._handlerFactory,
	            extendedRtpCapabilities: this._extendedRtpCapabilities,
	            canProduceByKind: this._canProduceByKind
	        });
	        return transport;
	    }
	}
	exports.Device = Device;
	});

	unwrapExports(Device_1);
	var Device_2 = Device_1.detectDevice;
	var Device_3 = Device_1.Device;

	var types = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(Device_1);
	__export(Transport_1);
	__export(Producer_1);
	__export(Consumer_1);
	__export(DataProducer_1);
	__export(DataConsumer_1);
	__export(HandlerInterface_1);
	__export(errors);
	});

	unwrapExports(types);

	var lib$2 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.Device = Device_1.Device;
	exports.detectDevice = Device_1.detectDevice;
	const types$1 = __importStar(types);
	exports.types = types$1;
	/**
	 * Expose mediasoup-client version.
	 */
	exports.version = '3.6.5';
	/**
	 * Expose parseScalabilityMode() function.
	 */

	exports.parseScalabilityMode = scalabilityModes.parse;
	});

	unwrapExports(lib$2);
	var lib_1$1 = lib$2.Device;
	var lib_2 = lib$2.detectDevice;
	var lib_3 = lib$2.types;
	var lib_4 = lib$2.version;
	var lib_5 = lib$2.parseScalabilityMode;

	var toStr = Object.prototype.toString;

	var isArguments = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	var keysShim;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr$1 = Object.prototype.toString;
		var isArgs = isArguments; // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr$1.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr$1.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	var implementation = keysShim;

	var slice = Array.prototype.slice;


	var origKeys = Object.keys;
	var keysShim$1 = origKeys ? function keys(o) { return origKeys(o); } : implementation;

	var originalKeys = Object.keys;

	keysShim$1.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArguments(object)) {
						return originalKeys(slice.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim$1;
		}
		return Object.keys || keysShim$1;
	};

	var objectKeys = keysShim$1;

	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	var toStr$2 = Object.prototype.toString;

	var isStandardArguments = function isArguments(value) {
		if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
			return false;
		}
		return toStr$2.call(value) === '[object Arguments]';
	};

	var isLegacyArguments = function isArguments(value) {
		if (isStandardArguments(value)) {
			return true;
		}
		return value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr$2.call(value) !== '[object Array]' &&
			toStr$2.call(value.callee) === '[object Function]';
	};

	var supportsStandardArguments = (function () {
		return isStandardArguments(arguments);
	}());

	isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

	var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

	var toStr$3 = Object.prototype.toString;

	var isArguments$2 = function isArguments(value) {
		var str = toStr$3.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr$3.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	var keysShim$2;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has$1 = Object.prototype.hasOwnProperty;
		var toStr$4 = Object.prototype.toString;
		var isArgs$1 = isArguments$2; // eslint-disable-line global-require
		var isEnumerable$1 = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug$1 = !isEnumerable$1.call({ toString: null }, 'toString');
		var hasProtoEnumBug$1 = isEnumerable$1.call(function () {}, 'prototype');
		var dontEnums$1 = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype$1 = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys$1 = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug$1 = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys$1['$' + k] && has$1.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype$1(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy$1 = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug$1) {
				return equalsConstructorPrototype$1(o);
			}
			try {
				return equalsConstructorPrototype$1(o);
			} catch (e) {
				return false;
			}
		};

		keysShim$2 = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr$4.call(object) === '[object Function]';
			var isArguments = isArgs$1(object);
			var isString = isObject && toStr$4.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug$1 && isFunction;
			if (isString && object.length > 0 && !has$1.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has$1.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug$1) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy$1(object);

				for (var k = 0; k < dontEnums$1.length; ++k) {
					if (!(skipConstructor && dontEnums$1[k] === 'constructor') && has$1.call(object, dontEnums$1[k])) {
						theKeys.push(dontEnums$1[k]);
					}
				}
			}
			return theKeys;
		};
	}
	var implementation$1 = keysShim$2;

	var slice$1 = Array.prototype.slice;


	var origKeys$1 = Object.keys;
	var keysShim$3 = origKeys$1 ? function keys(o) { return origKeys$1(o); } : implementation$1;

	var originalKeys$1 = Object.keys;

	keysShim$3.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArguments$2(object)) {
						return originalKeys$1(slice$1.call(object));
					}
					return originalKeys$1(object);
				};
			}
		} else {
			Object.keys = keysShim$3;
		}
		return Object.keys || keysShim$3;
	};

	var objectKeys$1 = keysShim$3;

	var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr$5 = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr$5.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			origDefineProperty(obj, 'x', { enumerable: false, value: obj });
			// eslint-disable-next-line no-unused-vars, no-restricted-syntax
			for (var _ in obj) { // jscs:ignore disallowUnusedVariables
				return false;
			}
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = objectKeys$1(map);
		if (hasSymbols) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	var defineProperties_1 = defineProperties;

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice$2 = Array.prototype.slice;
	var toStr$6 = Object.prototype.toString;
	var funcType = '[object Function]';

	var implementation$2 = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr$6.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice$2.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice$2.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice$2.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};

	var functionBind = Function.prototype.bind || implementation$2;

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	var shams = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};

	var origSymbol = commonjsGlobal.Symbol;


	var hasSymbols$1 = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return shams();
	};

	/* globals
		Atomics,
		SharedArrayBuffer,
	*/

	var undefined$1;

	var $TypeError = TypeError;

	var $gOPD = Object.getOwnPropertyDescriptor;
	if ($gOPD) {
		try {
			$gOPD({}, '');
		} catch (e) {
			$gOPD = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError = function () { throw new $TypeError(); };
	var ThrowTypeError = $gOPD
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols$2 = hasSymbols$1();

	var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
	var generatorFunction =  undefined$1;
	var asyncFunction =  undefined$1;
	var asyncGenFunction =  undefined$1;

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

	var INTRINSICS = {
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
		'%ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer.prototype,
		'%ArrayIteratorPrototype%': hasSymbols$2 ? getProto([][Symbol.iterator]()) : undefined$1,
		'%ArrayPrototype%': Array.prototype,
		'%ArrayProto_entries%': Array.prototype.entries,
		'%ArrayProto_forEach%': Array.prototype.forEach,
		'%ArrayProto_keys%': Array.prototype.keys,
		'%ArrayProto_values%': Array.prototype.values,
		'%AsyncFromSyncIteratorPrototype%': undefined$1,
		'%AsyncFunction%': asyncFunction,
		'%AsyncFunctionPrototype%':  undefined$1,
		'%AsyncGenerator%':  undefined$1,
		'%AsyncGeneratorFunction%': asyncGenFunction,
		'%AsyncGeneratorPrototype%':  undefined$1,
		'%AsyncIteratorPrototype%':  undefined$1,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
		'%Boolean%': Boolean,
		'%BooleanPrototype%': Boolean.prototype,
		'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
		'%DataViewPrototype%': typeof DataView === 'undefined' ? undefined$1 : DataView.prototype,
		'%Date%': Date,
		'%DatePrototype%': Date.prototype,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%ErrorPrototype%': Error.prototype,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%EvalErrorPrototype%': EvalError.prototype,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
		'%Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array.prototype,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
		'%Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array.prototype,
		'%Function%': Function,
		'%FunctionPrototype%': Function.prototype,
		'%Generator%':  undefined$1,
		'%GeneratorFunction%': generatorFunction,
		'%GeneratorPrototype%':  undefined$1,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
		'%Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array.prototype,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
		'%Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined$1 : Int8Array.prototype,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
		'%Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array.prototype,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols$2 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
		'%JSONParse%': typeof JSON === 'object' ? JSON.parse : undefined$1,
		'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
		'%MapPrototype%': typeof Map === 'undefined' ? undefined$1 : Map.prototype,
		'%Math%': Math,
		'%Number%': Number,
		'%NumberPrototype%': Number.prototype,
		'%Object%': Object,
		'%ObjectPrototype%': Object.prototype,
		'%ObjProto_toString%': Object.prototype.toString,
		'%ObjProto_valueOf%': Object.prototype.valueOf,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
		'%PromisePrototype%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype,
		'%PromiseProto_then%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype.then,
		'%Promise_all%': typeof Promise === 'undefined' ? undefined$1 : Promise.all,
		'%Promise_reject%': typeof Promise === 'undefined' ? undefined$1 : Promise.reject,
		'%Promise_resolve%': typeof Promise === 'undefined' ? undefined$1 : Promise.resolve,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
		'%RangeError%': RangeError,
		'%RangeErrorPrototype%': RangeError.prototype,
		'%ReferenceError%': ReferenceError,
		'%ReferenceErrorPrototype%': ReferenceError.prototype,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
		'%RegExp%': RegExp,
		'%RegExpPrototype%': RegExp.prototype,
		'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
		'%SetPrototype%': typeof Set === 'undefined' ? undefined$1 : Set.prototype,
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
		'%SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer.prototype,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols$2 ? getProto(''[Symbol.iterator]()) : undefined$1,
		'%StringPrototype%': String.prototype,
		'%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
		'%SymbolPrototype%': hasSymbols$2 ? Symbol.prototype : undefined$1,
		'%SyntaxError%': SyntaxError,
		'%SyntaxErrorPrototype%': SyntaxError.prototype,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined$1,
		'%TypeError%': $TypeError,
		'%TypeErrorPrototype%': $TypeError.prototype,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
		'%Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array.prototype,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
		'%Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray.prototype,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
		'%Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array.prototype,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
		'%Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array.prototype,
		'%URIError%': URIError,
		'%URIErrorPrototype%': URIError.prototype,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
		'%WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap.prototype,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
		'%WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet.prototype
	};


	var $replace = functionBind.call(Function.call, String.prototype.replace);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : (number || match);
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		if (!(name in INTRINSICS)) {
			throw new SyntaxError('intrinsic ' + name + ' does not exist!');
		}

		// istanbul ignore if // hopefully this is impossible to test :-)
		if (typeof INTRINSICS[name] === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return INTRINSICS[name];
	};

	var GetIntrinsic = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new TypeError('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new TypeError('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath(name);

		var value = getBaseIntrinsic('%' + (parts.length > 0 ? parts[0] : '') + '%', allowMissing);
		for (var i = 1; i < parts.length; i += 1) {
			if (value != null) {
				if ($gOPD && (i + 1) >= parts.length) {
					var desc = $gOPD(value, parts[i]);
					if (!allowMissing && !(parts[i] in value)) {
						throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					value = desc ? (desc.get || desc.value) : value[parts[i]];
				} else {
					value = value[parts[i]];
				}
			}
		}
		return value;
	};

	var $Function = GetIntrinsic('%Function%');
	var $apply = $Function.apply;
	var $call = $Function.call;

	var callBind = function callBind() {
		return functionBind.apply($call, arguments);
	};

	var apply = function applyBind() {
		return functionBind.apply($apply, arguments);
	};
	callBind.apply = apply;

	var numberIsNaN = function (value) {
		return value !== value;
	};

	var implementation$3 = function is(a, b) {
		if (a === 0 && b === 0) {
			return 1 / a === 1 / b;
		}
		if (a === b) {
			return true;
		}
		if (numberIsNaN(a) && numberIsNaN(b)) {
			return true;
		}
		return false;
	};

	var polyfill = function getPolyfill() {
		return typeof Object.is === 'function' ? Object.is : implementation$3;
	};

	var shim = function shimObjectIs() {
		var polyfill$1 = polyfill();
		defineProperties_1(Object, { is: polyfill$1 }, {
			is: function testObjectIs() {
				return Object.is !== polyfill$1;
			}
		});
		return polyfill$1;
	};

	var polyfill$1 = callBind(polyfill(), Object);

	defineProperties_1(polyfill$1, {
		getPolyfill: polyfill,
		implementation: implementation$3,
		shim: shim
	});

	var objectIs = polyfill$1;

	var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

	var regexExec = RegExp.prototype.exec;
	var gOPD = Object.getOwnPropertyDescriptor;

	var tryRegexExecCall = function tryRegexExec(value) {
		try {
			var lastIndex = value.lastIndex;
			value.lastIndex = 0; // eslint-disable-line no-param-reassign

			regexExec.call(value);
			return true;
		} catch (e) {
			return false;
		} finally {
			value.lastIndex = lastIndex; // eslint-disable-line no-param-reassign
		}
	};
	var toStr$7 = Object.prototype.toString;
	var regexClass = '[object RegExp]';
	var hasToStringTag$1 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isRegex = function isRegex(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}
		if (!hasToStringTag$1) {
			return toStr$7.call(value) === regexClass;
		}

		var descriptor = gOPD(value, 'lastIndex');
		var hasLastIndexDataProperty = descriptor && src(descriptor, 'value');
		if (!hasLastIndexDataProperty) {
			return false;
		}

		return tryRegexExecCall(value);
	};

	var $Object = Object;
	var $TypeError$1 = TypeError;

	var implementation$4 = function flags() {
		if (this != null && this !== $Object(this)) {
			throw new $TypeError$1('RegExp.prototype.flags getter called on non-object');
		}
		var result = '';
		if (this.global) {
			result += 'g';
		}
		if (this.ignoreCase) {
			result += 'i';
		}
		if (this.multiline) {
			result += 'm';
		}
		if (this.dotAll) {
			result += 's';
		}
		if (this.unicode) {
			result += 'u';
		}
		if (this.sticky) {
			result += 'y';
		}
		return result;
	};

	var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
	var $gOPD$1 = Object.getOwnPropertyDescriptor;
	var $TypeError$2 = TypeError;

	var polyfill$2 = function getPolyfill() {
		if (!supportsDescriptors$1) {
			throw new $TypeError$2('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		if ((/a/mig).flags === 'gim') {
			var descriptor = $gOPD$1(RegExp.prototype, 'flags');
			if (descriptor && typeof descriptor.get === 'function' && typeof (/a/).dotAll === 'boolean') {
				return descriptor.get;
			}
		}
		return implementation$4;
	};

	var supportsDescriptors$2 = defineProperties_1.supportsDescriptors;

	var gOPD$1 = Object.getOwnPropertyDescriptor;
	var defineProperty$1 = Object.defineProperty;
	var TypeErr = TypeError;
	var getProto$1 = Object.getPrototypeOf;
	var regex = /a/;

	var shim$1 = function shimFlags() {
		if (!supportsDescriptors$2 || !getProto$1) {
			throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		var polyfill = polyfill$2();
		var proto = getProto$1(regex);
		var descriptor = gOPD$1(proto, 'flags');
		if (!descriptor || descriptor.get !== polyfill) {
			defineProperty$1(proto, 'flags', {
				configurable: true,
				enumerable: false,
				get: polyfill
			});
		}
		return polyfill;
	};

	var flagsBound = callBind(implementation$4);

	defineProperties_1(flagsBound, {
		getPolyfill: polyfill$2,
		implementation: implementation$4,
		shim: shim$1
	});

	var regexp_prototype_flags = flagsBound;

	var toString = {}.toString;

	var isarray = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	var getDay = Date.prototype.getDay;
	var tryDateObject = function tryDateGetDayCall(value) {
		try {
			getDay.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};

	var toStr$8 = Object.prototype.toString;
	var dateClass = '[object Date]';
	var hasToStringTag$2 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isDateObject = function isDateObject(value) {
		if (typeof value !== 'object' || value === null) {
			return false;
		}
		return hasToStringTag$2 ? tryDateObject(value) : toStr$8.call(value) === dateClass;
	};

	var strValue = String.prototype.valueOf;
	var tryStringObject = function tryStringObject(value) {
		try {
			strValue.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr$9 = Object.prototype.toString;
	var strClass = '[object String]';
	var hasToStringTag$3 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isString = function isString(value) {
		if (typeof value === 'string') {
			return true;
		}
		if (typeof value !== 'object') {
			return false;
		}
		return hasToStringTag$3 ? tryStringObject(value) : toStr$9.call(value) === strClass;
	};

	var numToStr = Number.prototype.toString;
	var tryNumberObject = function tryNumberObject(value) {
		try {
			numToStr.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr$a = Object.prototype.toString;
	var numClass = '[object Number]';
	var hasToStringTag$4 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isNumberObject = function isNumberObject(value) {
		if (typeof value === 'number') {
			return true;
		}
		if (typeof value !== 'object') {
			return false;
		}
		return hasToStringTag$4 ? tryNumberObject(value) : toStr$a.call(value) === numClass;
	};

	var boolToStr = Boolean.prototype.toString;

	var tryBooleanObject = function booleanBrandCheck(value) {
		try {
			boolToStr.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr$b = Object.prototype.toString;
	var boolClass = '[object Boolean]';
	var hasToStringTag$5 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isBooleanObject = function isBoolean(value) {
		if (typeof value === 'boolean') {
			return true;
		}
		if (value === null || typeof value !== 'object') {
			return false;
		}
		return hasToStringTag$5 && Symbol.toStringTag in value ? tryBooleanObject(value) : toStr$b.call(value) === boolClass;
	};

	var isSymbol = createCommonjsModule(function (module) {

	var toStr = Object.prototype.toString;
	var hasSymbols = hasSymbols$1();

	if (hasSymbols) {
		var symToStr = Symbol.prototype.toString;
		var symStringRegex = /^Symbol\(.*\)$/;
		var isSymbolObject = function isRealSymbolObject(value) {
			if (typeof value.valueOf() !== 'symbol') {
				return false;
			}
			return symStringRegex.test(symToStr.call(value));
		};

		module.exports = function isSymbol(value) {
			if (typeof value === 'symbol') {
				return true;
			}
			if (toStr.call(value) !== '[object Symbol]') {
				return false;
			}
			try {
				return isSymbolObject(value);
			} catch (e) {
				return false;
			}
		};
	} else {

		module.exports = function isSymbol(value) {
			// this environment does not support Symbols.
			return false ;
		};
	}
	});

	var isBigint = createCommonjsModule(function (module) {

	if (typeof BigInt === 'function') {
		var bigIntValueOf = BigInt.prototype.valueOf;
		var tryBigInt = function tryBigIntObject(value) {
			try {
				bigIntValueOf.call(value);
				return true;
			} catch (e) {
			}
			return false;
		};

		module.exports = function isBigInt(value) {
			if (
				value === null
				|| typeof value === 'undefined'
				|| typeof value === 'boolean'
				|| typeof value === 'string'
				|| typeof value === 'number'
				|| typeof value === 'symbol'
				|| typeof value === 'function'
			) {
				return false;
			}
			if (typeof value === 'bigint') { // eslint-disable-line valid-typeof
				return true;
			}

			return tryBigInt(value);
		};
	} else {
		module.exports = function isBigInt(value) {
			return false ;
		};
	}
	});

	// eslint-disable-next-line consistent-return
	var whichBoxedPrimitive = function whichBoxedPrimitive(value) {
		// eslint-disable-next-line eqeqeq
		if (value == null || (typeof value !== 'object' && typeof value !== 'function')) {
			return null;
		}
		if (isString(value)) {
			return 'String';
		}
		if (isNumberObject(value)) {
			return 'Number';
		}
		if (isBooleanObject(value)) {
			return 'Boolean';
		}
		if (isSymbol(value)) {
			return 'Symbol';
		}
		if (isBigint(value)) {
			return 'BigInt';
		}
	};

	var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

	var callBound = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.')) {
			return callBind(intrinsic);
		}
		return intrinsic;
	};

	var $Map = typeof Map === 'function' && Map.prototype ? Map : null;
	var $Set = typeof Set === 'function' && Set.prototype ? Set : null;

	var exported;

	if (!$Map) {
		// eslint-disable-next-line no-unused-vars
		exported = function isMap(x) {
			// `Map` is not present in this environment.
			return false;
		};
	}

	var $mapHas = $Map ? Map.prototype.has : null;
	var $setHas = $Set ? Set.prototype.has : null;
	if (!exported && !$mapHas) {
		// eslint-disable-next-line no-unused-vars
		exported = function isMap(x) {
			// `Map` does not have a `has` method
			return false;
		};
	}

	var isMap = exported || function isMap(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$mapHas.call(x);
			if ($setHas) {
				try {
					$setHas.call(x);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $Map; // core-js workaround, pre-v2.5.0
		} catch (e) {}
		return false;
	};

	var $Map$1 = typeof Map === 'function' && Map.prototype ? Map : null;
	var $Set$1 = typeof Set === 'function' && Set.prototype ? Set : null;

	var exported$1;

	if (!$Set$1) {
		// eslint-disable-next-line no-unused-vars
		exported$1 = function isSet(x) {
			// `Set` is not present in this environment.
			return false;
		};
	}

	var $mapHas$1 = $Map$1 ? Map.prototype.has : null;
	var $setHas$1 = $Set$1 ? Set.prototype.has : null;
	if (!exported$1 && !$setHas$1) {
		// eslint-disable-next-line no-unused-vars
		exported$1 = function isSet(x) {
			// `Set` does not have a `has` method
			return false;
		};
	}

	var isSet = exported$1 || function isSet(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$setHas$1.call(x);
			if ($mapHas$1) {
				try {
					$mapHas$1.call(x);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $Set$1; // core-js workaround, pre-v2.5.0
		} catch (e) {}
		return false;
	};

	var $WeakMap = typeof WeakMap === 'function' && WeakMap.prototype ? WeakMap : null;
	var $WeakSet = typeof WeakSet === 'function' && WeakSet.prototype ? WeakSet : null;

	var exported$2;

	if (!$WeakMap) {
		// eslint-disable-next-line no-unused-vars
		exported$2 = function isWeakMap(x) {
			// `WeakMap` is not present in this environment.
			return false;
		};
	}

	var $mapHas$2 = $WeakMap ? $WeakMap.prototype.has : null;
	var $setHas$2 = $WeakSet ? $WeakSet.prototype.has : null;
	if (!exported$2 && !$mapHas$2) {
		// eslint-disable-next-line no-unused-vars
		exported$2 = function isWeakMap(x) {
			// `WeakMap` does not have a `has` method
			return false;
		};
	}

	var isWeakmap = exported$2 || function isWeakMap(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$mapHas$2.call(x, $mapHas$2);
			if ($setHas$2) {
				try {
					$setHas$2.call(x, $setHas$2);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $WeakMap; // core-js workaround, pre-v3
		} catch (e) {}
		return false;
	};

	var isWeakset = createCommonjsModule(function (module) {

	var $WeakMap = typeof WeakMap === 'function' && WeakMap.prototype ? WeakMap : null;
	var $WeakSet = typeof WeakSet === 'function' && WeakSet.prototype ? WeakSet : null;

	var exported;

	if (!$WeakMap) {
		// eslint-disable-next-line no-unused-vars
		exported = function isWeakSet(x) {
			// `WeakSet` is not present in this environment.
			return false;
		};
	}

	var $mapHas = $WeakMap ? $WeakMap.prototype.has : null;
	var $setHas = $WeakSet ? $WeakSet.prototype.has : null;
	if (!exported && !$setHas) {
		// eslint-disable-next-line no-unused-vars
		module.exports = function isWeakSet(x) {
			// `WeakSet` does not have a `has` method
			return false;
		};
	}

	module.exports = exported || function isWeakSet(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$setHas.call(x, $setHas);
			if ($mapHas) {
				try {
					$mapHas.call(x, $mapHas);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $WeakSet; // core-js workaround, pre-v3
		} catch (e) {}
		return false;
	};
	});

	var whichCollection = function whichCollection(value) {
		if (value && typeof value === 'object') {
			if (isMap(value)) {
				return 'Map';
			}
			if (isSet(value)) {
				return 'Set';
			}
			if (isWeakmap(value)) {
				return 'WeakMap';
			}
			if (isWeakset(value)) {
				return 'WeakSet';
			}
		}
		return false;
	};

	var toString$1 = {}.toString;

	var isarray$1 = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	var esGetIterator = createCommonjsModule(function (module) {

	/* eslint global-require: 0 */
	// the code is structured this way so that bundlers can
	// alias out `has-symbols` to `() => true` or `() => false` if your target
	// environments' Symbol capabilities are known, and then use
	// dead code elimination on the rest of this module.
	//
	// Similarly, `isarray` can be aliased to `Array.isArray` if
	// available in all target environments.



	if (hasSymbols$1() || shams()) {
		var $iterator = Symbol.iterator;
		// Symbol is available natively or shammed
		// natively:
		//  - Chrome >= 38
		//  - Edge 12-14?, Edge >= 15 for sure
		//  - FF >= 36
		//  - Safari >= 9
		//  - node >= 0.12
		module.exports = function getIterator(iterable) {
			// alternatively, `iterable[$iterator]?.()`
			if (iterable != null && typeof iterable[$iterator] !== 'undefined') {
				return iterable[$iterator]();
			}
			if (isArguments$1(iterable)) {
				// arguments objects lack Symbol.iterator
				// - node 0.12
				return Array.prototype[$iterator].call(iterable);
			}
		};
	} else {
		// Symbol is not available, native or shammed
		var isArray = isarray$1;
		var isString$1 = isString;
		var GetIntrinsic$1 = GetIntrinsic;
		var $Map = GetIntrinsic$1('%Map%', true);
		var $Set = GetIntrinsic$1('%Set%', true);
		var callBound$1 = callBound;
		var $arrayPush = callBound$1('Array.prototype.push');
		var $charCodeAt = callBound$1('String.prototype.charCodeAt');
		var $stringSlice = callBound$1('String.prototype.slice');

		var advanceStringIndex = function advanceStringIndex(S, index) {
			var length = S.length;
			if ((index + 1) >= length) {
				return index + 1;
			}

			var first = $charCodeAt(S, index);
			if (first < 0xD800 || first > 0xDBFF) {
				return index + 1;
			}

			var second = $charCodeAt(S, index + 1);
			if (second < 0xDC00 || second > 0xDFFF) {
				return index + 1;
			}

			return index + 2;
		};

		var getArrayIterator = function getArrayIterator(arraylike) {
			var i = 0;
			return {
				next: function next() {
					var done = i >= arraylike.length;
					var value;
					if (!done) {
						value = arraylike[i];
						i += 1;
					}
					return {
						done: done,
						value: value
					};
				}
			};
		};

		var getNonCollectionIterator = function getNonCollectionIterator(iterable) {
			if (isArray(iterable) || isArguments$1(iterable)) {
				return getArrayIterator(iterable);
			}
			if (isString$1(iterable)) {
				var i = 0;
				return {
					next: function next() {
						var nextIndex = advanceStringIndex(iterable, i);
						var value = $stringSlice(iterable, i, nextIndex);
						i = nextIndex;
						return {
							done: nextIndex > iterable.length,
							value: value
						};
					}
				};
			}
		};

		if (!$Map && !$Set) {
			// the only language iterables are Array, String, arguments
			// - Safari <= 6.0
			// - Chrome < 38
			// - node < 0.12
			// - FF < 13
			// - IE < 11
			// - Edge < 11

			module.exports = getNonCollectionIterator;
		} else {
			// either Map or Set are available, but Symbol is not
			// - es6-shim on an ES5 browser
			// - Safari 6.2 (maybe 6.1?)
			// - FF v[13, 36)
			// - IE 11
			// - Edge 11
			// - Safari v[6, 9)

			var isMap$1 = isMap;
			var isSet$1 = isSet;

			// Firefox >= 27, IE 11, Safari 6.2 - 9, Edge 11, es6-shim in older envs, all have forEach
			var $mapForEach = callBound$1('Map.prototype.forEach', true);
			var $setForEach = callBound$1('Set.prototype.forEach', true);
			if (typeof process === 'undefined' || !process.versions || !process.versions.node) { // "if is not node"

				// Firefox 17 - 26 has `.iterator()`, whose iterator `.next()` either
				// returns a value, or throws a StopIteration object. These browsers
				// do not have any other mechanism for iteration.
				var $mapIterator = callBound$1('Map.prototype.iterator', true);
				var $setIterator = callBound$1('Set.prototype.iterator', true);
				var getStopIterationIterator = function (iterator) {
					var done = false;
					return {
						next: function next() {
							try {
								return {
									done: done,
									value: done ? undefined : iterator.next()
								};
							} catch (e) {
								done = true;
								return {
									done: true,
									value: undefined
								};
							}
						}
					};
				};
			}
			// Firefox 27-35, and some older es6-shim versions, use a string "@@iterator" property
			// this returns a proper iterator object, so we should use it instead of forEach.
			// newer es6-shim versions use a string "_es6-shim iterator_" property.
			var $mapAtAtIterator = callBound$1('Map.prototype.@@iterator', true) || callBound$1('Map.prototype._es6-shim iterator_', true);
			var $setAtAtIterator = callBound$1('Set.prototype.@@iterator', true) || callBound$1('Set.prototype._es6-shim iterator_', true);

			var getCollectionIterator = function getCollectionIterator(iterable) {
				if (isMap$1(iterable)) {
					if ($mapIterator) {
						return getStopIterationIterator($mapIterator(iterable));
					}
					if ($mapAtAtIterator) {
						return $mapAtAtIterator(iterable);
					}
					if ($mapForEach) {
						var entries = [];
						$mapForEach(iterable, function (v, k) {
							$arrayPush(entries, [k, v]);
						});
						return getArrayIterator(entries);
					}
				}
				if (isSet$1(iterable)) {
					if ($setIterator) {
						return getStopIterationIterator($setIterator(iterable));
					}
					if ($setAtAtIterator) {
						return $setAtAtIterator(iterable);
					}
					if ($setForEach) {
						var values = [];
						$setForEach(iterable, function (v) {
							$arrayPush(values, v);
						});
						return getArrayIterator(values);
					}
				}
			};

			module.exports = function getIterator(iterable) {
				return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
			};
		}
	}
	});

	var _nodeResolve_empty = {};

	var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': _nodeResolve_empty
	});

	var require$$1 = getCjsExportFromNamespace(_nodeResolve_empty$1);

	var hasMap = typeof Map === 'function' && Map.prototype;
	var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
	var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
	var mapForEach = hasMap && Map.prototype.forEach;
	var hasSet = typeof Set === 'function' && Set.prototype;
	var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
	var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
	var setForEach = hasSet && Set.prototype.forEach;
	var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
	var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
	var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
	var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
	var booleanValueOf = Boolean.prototype.valueOf;
	var objectToString = Object.prototype.toString;
	var match = String.prototype.match;
	var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;

	var inspectCustom = require$$1.custom;
	var inspectSymbol = inspectCustom && isSymbol$1(inspectCustom) ? inspectCustom : null;

	var objectInspect = function inspect_(obj, options, depth, seen) {
	    var opts = options || {};

	    if (has$2(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
	        throw new TypeError('option "quoteStyle" must be "single" or "double"');
	    }

	    if (typeof obj === 'undefined') {
	        return 'undefined';
	    }
	    if (obj === null) {
	        return 'null';
	    }
	    if (typeof obj === 'boolean') {
	        return obj ? 'true' : 'false';
	    }

	    if (typeof obj === 'string') {
	        return inspectString(obj, opts);
	    }
	    if (typeof obj === 'number') {
	        if (obj === 0) {
	            return Infinity / obj > 0 ? '0' : '-0';
	        }
	        return String(obj);
	    }
	    if (typeof obj === 'bigint') { // eslint-disable-line valid-typeof
	        return String(obj) + 'n';
	    }

	    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
	    if (typeof depth === 'undefined') { depth = 0; }
	    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
	        return '[Object]';
	    }

	    if (typeof seen === 'undefined') {
	        seen = [];
	    } else if (indexOf(seen, obj) >= 0) {
	        return '[Circular]';
	    }

	    function inspect(value, from) {
	        if (from) {
	            seen = seen.slice();
	            seen.push(from);
	        }
	        return inspect_(value, opts, depth + 1, seen);
	    }

	    if (typeof obj === 'function') {
	        var name = nameOf(obj);
	        return '[Function' + (name ? ': ' + name : '') + ']';
	    }
	    if (isSymbol$1(obj)) {
	        var symString = Symbol.prototype.toString.call(obj);
	        return typeof obj === 'object' ? markBoxed(symString) : symString;
	    }
	    if (isElement(obj)) {
	        var s = '<' + String(obj.nodeName).toLowerCase();
	        var attrs = obj.attributes || [];
	        for (var i = 0; i < attrs.length; i++) {
	            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
	        }
	        s += '>';
	        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
	        s += '</' + String(obj.nodeName).toLowerCase() + '>';
	        return s;
	    }
	    if (isArray(obj)) {
	        if (obj.length === 0) { return '[]'; }
	        return '[ ' + arrObjKeys(obj, inspect).join(', ') + ' ]';
	    }
	    if (isError(obj)) {
	        var parts = arrObjKeys(obj, inspect);
	        if (parts.length === 0) { return '[' + String(obj) + ']'; }
	        return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
	    }
	    if (typeof obj === 'object') {
	        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
	            return obj[inspectSymbol]();
	        } else if (typeof obj.inspect === 'function') {
	            return obj.inspect();
	        }
	    }
	    if (isMap$1(obj)) {
	        var mapParts = [];
	        mapForEach.call(obj, function (value, key) {
	            mapParts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
	        });
	        return collectionOf('Map', mapSize.call(obj), mapParts);
	    }
	    if (isSet$1(obj)) {
	        var setParts = [];
	        setForEach.call(obj, function (value) {
	            setParts.push(inspect(value, obj));
	        });
	        return collectionOf('Set', setSize.call(obj), setParts);
	    }
	    if (isWeakMap(obj)) {
	        return weakCollectionOf('WeakMap');
	    }
	    if (isWeakSet(obj)) {
	        return weakCollectionOf('WeakSet');
	    }
	    if (isNumber(obj)) {
	        return markBoxed(inspect(Number(obj)));
	    }
	    if (isBigInt(obj)) {
	        return markBoxed(inspect(bigIntValueOf.call(obj)));
	    }
	    if (isBoolean(obj)) {
	        return markBoxed(booleanValueOf.call(obj));
	    }
	    if (isString$1(obj)) {
	        return markBoxed(inspect(String(obj)));
	    }
	    if (!isDate(obj) && !isRegExp(obj)) {
	        var xs = arrObjKeys(obj, inspect);
	        if (xs.length === 0) { return '{}'; }
	        return '{ ' + xs.join(', ') + ' }';
	    }
	    return String(obj);
	};

	function wrapQuotes(s, defaultStyle, opts) {
	    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
	    return quoteChar + s + quoteChar;
	}

	function quote(s) {
	    return String(s).replace(/"/g, '&quot;');
	}

	function isArray(obj) { return toStr$c(obj) === '[object Array]'; }
	function isDate(obj) { return toStr$c(obj) === '[object Date]'; }
	function isRegExp(obj) { return toStr$c(obj) === '[object RegExp]'; }
	function isError(obj) { return toStr$c(obj) === '[object Error]'; }
	function isSymbol$1(obj) { return toStr$c(obj) === '[object Symbol]'; }
	function isString$1(obj) { return toStr$c(obj) === '[object String]'; }
	function isNumber(obj) { return toStr$c(obj) === '[object Number]'; }
	function isBigInt(obj) { return toStr$c(obj) === '[object BigInt]'; }
	function isBoolean(obj) { return toStr$c(obj) === '[object Boolean]'; }

	var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
	function has$2(obj, key) {
	    return hasOwn.call(obj, key);
	}

	function toStr$c(obj) {
	    return objectToString.call(obj);
	}

	function nameOf(f) {
	    if (f.name) { return f.name; }
	    var m = match.call(f, /^function\s*([\w$]+)/);
	    if (m) { return m[1]; }
	    return null;
	}

	function indexOf(xs, x) {
	    if (xs.indexOf) { return xs.indexOf(x); }
	    for (var i = 0, l = xs.length; i < l; i++) {
	        if (xs[i] === x) { return i; }
	    }
	    return -1;
	}

	function isMap$1(x) {
	    if (!mapSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        mapSize.call(x);
	        try {
	            setSize.call(x);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof Map; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakMap(x) {
	    if (!weakMapHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakMapHas.call(x, weakMapHas);
	        try {
	            weakSetHas.call(x, weakSetHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isSet$1(x) {
	    if (!setSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        setSize.call(x);
	        try {
	            mapSize.call(x);
	        } catch (m) {
	            return true;
	        }
	        return x instanceof Set; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakSet(x) {
	    if (!weakSetHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakSetHas.call(x, weakSetHas);
	        try {
	            weakMapHas.call(x, weakMapHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isElement(x) {
	    if (!x || typeof x !== 'object') { return false; }
	    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
	        return true;
	    }
	    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
	}

	function inspectString(str, opts) {
	    // eslint-disable-next-line no-control-regex
	    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
	    return wrapQuotes(s, 'single', opts);
	}

	function lowbyte(c) {
	    var n = c.charCodeAt(0);
	    var x = {
	        8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r'
	    }[n];
	    if (x) { return '\\' + x; }
	    return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
	}

	function markBoxed(str) {
	    return 'Object(' + str + ')';
	}

	function weakCollectionOf(type) {
	    return type + ' { ? }';
	}

	function collectionOf(type, size, entries) {
	    return type + ' (' + size + ') {' + entries.join(', ') + '}';
	}

	function arrObjKeys(obj, inspect) {
	    var isArr = isArray(obj);
	    var xs = [];
	    if (isArr) {
	        xs.length = obj.length;
	        for (var i = 0; i < obj.length; i++) {
	            xs[i] = has$2(obj, i) ? inspect(obj[i], obj) : '';
	        }
	    }
	    for (var key in obj) { // eslint-disable-line no-restricted-syntax
	        if (!has$2(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if ((/[^\w$]/).test(key)) {
	            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
	        } else {
	            xs.push(key + ': ' + inspect(obj[key], obj));
	        }
	    }
	    return xs;
	}

	var $TypeError$3 = GetIntrinsic('%TypeError%');
	var $WeakMap$1 = GetIntrinsic('%WeakMap%', true);
	var $Map$2 = GetIntrinsic('%Map%', true);
	var $push = callBound('Array.prototype.push');

	var $weakMapGet = callBound('WeakMap.prototype.get', true);
	var $weakMapSet = callBound('WeakMap.prototype.set', true);
	var $weakMapHas = callBound('WeakMap.prototype.has', true);
	var $mapGet = callBound('Map.prototype.get', true);
	var $mapSet = callBound('Map.prototype.set', true);
	var $mapHas$3 = callBound('Map.prototype.has', true);
	var objectGet = function (objects, key) { // eslint-disable-line consistent-return
		for (var i = 0; i < objects.length; i += 1) {
			if (objects[i].key === key) {
				return objects[i].value;
			}
		}
	};
	var objectSet = function (objects, key, value) {
		for (var i = 0; i < objects.length; i += 1) {
			if (objects[i].key === key) {
				objects[i].value = value; // eslint-disable-line no-param-reassign
				return;
			}
		}
		$push(objects, {
			key: key,
			value: value
		});
	};
	var objectHas = function (objects, key) {
		for (var i = 0; i < objects.length; i += 1) {
			if (objects[i].key === key) {
				return true;
			}
		}
		return false;
	};

	var sideChannel = function getSideChannel() {
		var $wm;
		var $m;
		var $o;
		var channel = {
			assert: function (key) {
				if (!channel.has(key)) {
					throw new $TypeError$3('Side channel does not contain ' + objectInspect(key));
				}
			},
			get: function (key) { // eslint-disable-line consistent-return
				if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapGet($wm, key);
					}
				} else if ($Map$2) {
					if ($m) {
						return $mapGet($m, key);
					}
				} else {
					if ($o) { // eslint-disable-line no-lonely-if
						return objectGet($o, key);
					}
				}
			},
			has: function (key) {
				if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
					if ($wm) {
						return $weakMapHas($wm, key);
					}
				} else if ($Map$2) {
					if ($m) {
						return $mapHas$3($m, key);
					}
				} else {
					if ($o) { // eslint-disable-line no-lonely-if
						return objectHas($o, key);
					}
				}
				return false;
			},
			set: function (key, value) {
				if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
					if (!$wm) {
						$wm = new $WeakMap$1();
					}
					$weakMapSet($wm, key, value);
				} else if ($Map$2) {
					if (!$m) {
						$m = new $Map$2();
					}
					$mapSet($m, key, value);
				} else {
					if (!$o) {
						$o = [];
					}
					objectSet($o, key, value);
				}
			}
		};
		return channel;
	};

	var hasOwn$1 = Object.prototype.hasOwnProperty;
	var toString$2 = Object.prototype.toString;

	var foreach = function forEach (obj, fn, ctx) {
	    if (toString$2.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn$1.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};

	/**
	 * Array#filter.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Object=} self
	 * @return {Array}
	 * @throw TypeError
	 */

	var arrayFilter = function (arr, fn, self) {
	  if (arr.filter) return arr.filter(fn, self);
	  if (void 0 === arr || null === arr) throw new TypeError;
	  if ('function' != typeof fn) throw new TypeError;
	  var ret = [];
	  for (var i = 0; i < arr.length; i++) {
	    if (!hasOwn$2.call(arr, i)) continue;
	    var val = arr[i];
	    if (fn.call(self, val, i, arr)) ret.push(val);
	  }
	  return ret;
	};

	var hasOwn$2 = Object.prototype.hasOwnProperty;

	var availableTypedArrays = function availableTypedArrays() {
		return arrayFilter([
			'BigInt64Array',
			'BigUint64Array',
			'Float32Array',
			'Float64Array',
			'Int16Array',
			'Int32Array',
			'Int8Array',
			'Uint16Array',
			'Uint32Array',
			'Uint8Array',
			'Uint8ClampedArray'
		], function (typedArray) {
			return typeof commonjsGlobal[typedArray] === 'function';
		});
	};

	var $gOPD$2 = GetIntrinsic('%Object.getOwnPropertyDescriptor%');
	if ($gOPD$2) {
		try {
			$gOPD$2([], 'length');
		} catch (e) {
			// IE 8 has a broken gOPD
			$gOPD$2 = null;
		}
	}

	var getOwnPropertyDescriptor = $gOPD$2;

	var $toString = callBound('Object.prototype.toString');
	var hasSymbols$3 = hasSymbols$1();
	var hasToStringTag$6 = hasSymbols$3 && typeof Symbol.toStringTag === 'symbol';

	var typedArrays = availableTypedArrays();

	var $indexOf$1 = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
		for (var i = 0; i < array.length; i += 1) {
			if (array[i] === value) {
				return i;
			}
		}
		return -1;
	};
	var $slice = callBound('String.prototype.slice');
	var toStrTags = {};

	var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
	if (hasToStringTag$6 && getOwnPropertyDescriptor && getPrototypeOf) {
		foreach(typedArrays, function (typedArray) {
			var arr = new commonjsGlobal[typedArray]();
			if (!(Symbol.toStringTag in arr)) {
				throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
			}
			var proto = getPrototypeOf(arr);
			var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		});
	}

	var tryTypedArrays = function tryAllTypedArrays(value) {
		var anyTrue = false;
		foreach(toStrTags, function (getter, typedArray) {
			if (!anyTrue) {
				try {
					anyTrue = getter.call(value) === typedArray;
				} catch (e) { /**/ }
			}
		});
		return anyTrue;
	};

	var isTypedArray = function isTypedArray(value) {
		if (!value || typeof value !== 'object') { return false; }
		if (!hasToStringTag$6) {
			var tag = $slice($toString(value), 8, -1);
			return $indexOf$1(typedArrays, tag) > -1;
		}
		if (!getOwnPropertyDescriptor) { return false; }
		return tryTypedArrays(value);
	};

	var $toString$1 = callBound('Object.prototype.toString');
	var hasSymbols$4 = hasSymbols$1();
	var hasToStringTag$7 = hasSymbols$4 && typeof Symbol.toStringTag === 'symbol';

	var typedArrays$1 = availableTypedArrays();

	var $slice$1 = callBound('String.prototype.slice');
	var toStrTags$1 = {};

	var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');
	if (hasToStringTag$7 && getOwnPropertyDescriptor && getPrototypeOf$1) {
		foreach(typedArrays$1, function (typedArray) {
			if (typeof commonjsGlobal[typedArray] === 'function') {
				var arr = new commonjsGlobal[typedArray]();
				if (!(Symbol.toStringTag in arr)) {
					throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
				}
				var proto = getPrototypeOf$1(arr);
				var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf$1(proto);
					descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
				}
				toStrTags$1[typedArray] = descriptor.get;
			}
		});
	}

	var tryTypedArrays$1 = function tryAllTypedArrays(value) {
		var foundName = false;
		foreach(toStrTags$1, function (getter, typedArray) {
			if (!foundName) {
				try {
					var name = getter.call(value);
					if (name === typedArray) {
						foundName = name;
					}
				} catch (e) {}
			}
		});
		return foundName;
	};



	var whichTypedArray = function whichTypedArray(value) {
		if (!isTypedArray(value)) { return false; }
		if (!hasToStringTag$7) { return $slice$1($toString$1(value), 8, -1); }
		return tryTypedArrays$1(value);
	};

	var toStr$d = Object.prototype.toString;

	var isArguments$3 = function isArguments(value) {
		var str = toStr$d.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr$d.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	var keysShim$4;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has$3 = Object.prototype.hasOwnProperty;
		var toStr$e = Object.prototype.toString;
		var isArgs$2 = isArguments$3; // eslint-disable-line global-require
		var isEnumerable$2 = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug$2 = !isEnumerable$2.call({ toString: null }, 'toString');
		var hasProtoEnumBug$2 = isEnumerable$2.call(function () {}, 'prototype');
		var dontEnums$2 = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype$2 = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys$2 = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug$2 = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys$2['$' + k] && has$3.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype$2(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy$2 = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug$2) {
				return equalsConstructorPrototype$2(o);
			}
			try {
				return equalsConstructorPrototype$2(o);
			} catch (e) {
				return false;
			}
		};

		keysShim$4 = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr$e.call(object) === '[object Function]';
			var isArguments = isArgs$2(object);
			var isString = isObject && toStr$e.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug$2 && isFunction;
			if (isString && object.length > 0 && !has$3.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has$3.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug$2) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy$2(object);

				for (var k = 0; k < dontEnums$2.length; ++k) {
					if (!(skipConstructor && dontEnums$2[k] === 'constructor') && has$3.call(object, dontEnums$2[k])) {
						theKeys.push(dontEnums$2[k]);
					}
				}
			}
			return theKeys;
		};
	}
	var implementation$5 = keysShim$4;

	var slice$3 = Array.prototype.slice;


	var origKeys$2 = Object.keys;
	var keysShim$5 = origKeys$2 ? function keys(o) { return origKeys$2(o); } : implementation$5;

	var originalKeys$2 = Object.keys;

	keysShim$5.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArguments$3(object)) {
						return originalKeys$2(slice$3.call(object));
					}
					return originalKeys$2(object);
				};
			}
		} else {
			Object.keys = keysShim$5;
		}
		return Object.keys || keysShim$5;
	};

	var objectKeys$2 = keysShim$5;

	// modified from https://github.com/es-shims/es6-shim


	var canBeObject = function (obj) {
		return typeof obj !== 'undefined' && obj !== null;
	};
	var hasSymbols$5 = shams();
	var toObject = Object;
	var push = functionBind.call(Function.call, Array.prototype.push);
	var propIsEnumerable = functionBind.call(Function.call, Object.prototype.propertyIsEnumerable);
	var originalGetSymbols = hasSymbols$5 ? Object.getOwnPropertySymbols : null;

	var implementation$6 = function assign(target, source1) {
		if (!canBeObject(target)) { throw new TypeError('target must be an object'); }
		var objTarget = toObject(target);
		var s, source, i, props, syms, value, key;
		for (s = 1; s < arguments.length; ++s) {
			source = toObject(arguments[s]);
			props = objectKeys$2(source);
			var getSymbols = hasSymbols$5 && (Object.getOwnPropertySymbols || originalGetSymbols);
			if (getSymbols) {
				syms = getSymbols(source);
				for (i = 0; i < syms.length; ++i) {
					key = syms[i];
					if (propIsEnumerable(source, key)) {
						push(props, key);
					}
				}
			}
			for (i = 0; i < props.length; ++i) {
				key = props[i];
				value = source[key];
				if (propIsEnumerable(source, key)) {
					objTarget[key] = value;
				}
			}
		}
		return objTarget;
	};

	var lacksProperEnumerationOrder = function () {
		if (!Object.assign) {
			return false;
		}
		// v8, specifically in node 4.x, has a bug with incorrect property enumeration order
		// note: this does not detect the bug unless there's 20 characters
		var str = 'abcdefghijklmnopqrst';
		var letters = str.split('');
		var map = {};
		for (var i = 0; i < letters.length; ++i) {
			map[letters[i]] = letters[i];
		}
		var obj = Object.assign({}, map);
		var actual = '';
		for (var k in obj) {
			actual += k;
		}
		return str !== actual;
	};

	var assignHasPendingExceptions = function () {
		if (!Object.assign || !Object.preventExtensions) {
			return false;
		}
		// Firefox 37 still has "pending exception" logic in its Object.assign implementation,
		// which is 72% slower than our shim, and Firefox 40's native implementation.
		var thrower = Object.preventExtensions({ 1: 2 });
		try {
			Object.assign(thrower, 'xy');
		} catch (e) {
			return thrower[1] === 'y';
		}
		return false;
	};

	var polyfill$3 = function getPolyfill() {
		if (!Object.assign) {
			return implementation$6;
		}
		if (lacksProperEnumerationOrder()) {
			return implementation$6;
		}
		if (assignHasPendingExceptions()) {
			return implementation$6;
		}
		return Object.assign;
	};

	var shim$2 = function shimAssign() {
		var polyfill = polyfill$3();
		defineProperties_1(
			Object,
			{ assign: polyfill },
			{ assign: function () { return Object.assign !== polyfill; } }
		);
		return polyfill;
	};

	var polyfill$4 = polyfill$3();

	defineProperties_1(polyfill$4, {
		getPolyfill: polyfill$3,
		implementation: implementation$6,
		shim: shim$2
	});

	var object_assign = polyfill$4;

	var $getTime = callBound('Date.prototype.getTime');
	var gPO = Object.getPrototypeOf;
	var $objToString = callBound('Object.prototype.toString');

	var $Set$2 = GetIntrinsic('%Set%', true);
	var $mapHas$4 = callBound('Map.prototype.has', true);
	var $mapGet$1 = callBound('Map.prototype.get', true);
	var $mapSize = callBound('Map.prototype.size', true);
	var $setAdd = callBound('Set.prototype.add', true);
	var $setDelete = callBound('Set.prototype.delete', true);
	var $setHas$3 = callBound('Set.prototype.has', true);
	var $setSize = callBound('Set.prototype.size', true);

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414
	function setHasEqualElement(set, val1, opts, channel) {
	  var i = esGetIterator(set);
	  var result;
	  while ((result = i.next()) && !result.done) {
	    if (internalDeepEqual(val1, result.value, opts, channel)) { // eslint-disable-line no-use-before-define
	      // Remove the matching element to make sure we do not check that again.
	      $setDelete(set, result.value);
	      return true;
	    }
	  }

	  return false;
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439
	function findLooseMatchingPrimitives(prim) {
	  if (typeof prim === 'undefined') {
	    return null;
	  }
	  if (typeof prim === 'object') { // Only pass in null as object!
	    return void 0;
	  }
	  if (typeof prim === 'symbol') {
	    return false;
	  }
	  if (typeof prim === 'string' || typeof prim === 'number') {
	    // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.
	    return +prim === +prim; // eslint-disable-line no-implicit-coercion
	  }
	  return true;
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460
	function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
	  var altValue = findLooseMatchingPrimitives(prim);
	  if (altValue != null) {
	    return altValue;
	  }
	  var curB = $mapGet$1(b, altValue);
	  var looseOpts = object_assign({}, opts, { strict: false });
	  if (
	    (typeof curB === 'undefined' && !$mapHas$4(b, altValue))
	    // eslint-disable-next-line no-use-before-define
	    || !internalDeepEqual(item, curB, looseOpts, channel)
	  ) {
	    return false;
	  }
	  // eslint-disable-next-line no-use-before-define
	  return !$mapHas$4(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447
	function setMightHaveLoosePrim(a, b, prim) {
	  var altValue = findLooseMatchingPrimitives(prim);
	  if (altValue != null) {
	    return altValue;
	  }

	  return $setHas$3(b, altValue) && !$setHas$3(a, altValue);
	}

	// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533
	function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
	  var i = esGetIterator(set);
	  var result;
	  var key2;
	  while ((result = i.next()) && !result.done) {
	    key2 = result.value;
	    if (
	      // eslint-disable-next-line no-use-before-define
	      internalDeepEqual(key1, key2, opts, channel)
	      // eslint-disable-next-line no-use-before-define
	      && internalDeepEqual(item1, $mapGet$1(map, key2), opts, channel)
	    ) {
	      $setDelete(set, key2);
	      return true;
	    }
	  }

	  return false;
	}

	function internalDeepEqual(actual, expected, options, channel) {
	  var opts = options || {};

	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (opts.strict ? objectIs(actual, expected) : actual === expected) {
	    return true;
	  }

	  var actualBoxed = whichBoxedPrimitive(actual);
	  var expectedBoxed = whichBoxedPrimitive(expected);
	  if (actualBoxed !== expectedBoxed) {
	    return false;
	  }

	  // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
	  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
	    return opts.strict ? objectIs(actual, expected) : actual == expected; // eslint-disable-line eqeqeq
	  }

	  /*
	   * 7.4. For all other Object pairs, including Array objects, equivalence is
	   * determined by having the same number of owned properties (as verified
	   * with Object.prototype.hasOwnProperty.call), the same set of keys
	   * (although not necessarily the same order), equivalent values for every
	   * corresponding key, and an identical 'prototype' property. Note: this
	   * accounts for both named and indexed properties on Arrays.
	   */
	  // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration

	  var hasActual = channel.has(actual);
	  var hasExpected = channel.has(expected);
	  var sentinel;
	  if (hasActual && hasExpected) {
	    if (channel.get(actual) === channel.get(expected)) {
	      return true;
	    }
	  } else {
	    sentinel = {};
	  }
	  if (!hasActual) { channel.set(actual, sentinel); }
	  if (!hasExpected) { channel.set(expected, sentinel); }

	  // eslint-disable-next-line no-use-before-define
	  return objEquiv(actual, expected, opts, channel);
	}

	function isBuffer(x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
	    return false;
	  }
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') {
	    return false;
	  }

	  return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
	}

	function setEquiv(a, b, opts, channel) {
	  if ($setSize(a) !== $setSize(b)) {
	    return false;
	  }
	  var iA = esGetIterator(a);
	  var iB = esGetIterator(b);
	  var resultA;
	  var resultB;
	  var set;
	  while ((resultA = iA.next()) && !resultA.done) {
	    if (resultA.value && typeof resultA.value === 'object') {
	      if (!set) { set = new $Set$2(); }
	      $setAdd(set, resultA.value);
	    } else if (!$setHas$3(b, resultA.value)) {
	      if (opts.strict) { return false; }
	      if (!setMightHaveLoosePrim(a, b, resultA.value)) {
	        return false;
	      }
	      if (!set) { set = new $Set$2(); }
	      $setAdd(set, resultA.value);
	    }
	  }
	  if (set) {
	    while ((resultB = iB.next()) && !resultB.done) {
	      // We have to check if a primitive value is already matching and only if it's not, go hunting for it.
	      if (resultB.value && typeof resultB.value === 'object') {
	        if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
	          return false;
	        }
	      } else if (
	        !opts.strict
	        && !$setHas$3(a, resultB.value)
	        && !setHasEqualElement(set, resultB.value, opts.strict, channel)
	      ) {
	        return false;
	      }
	    }
	    return $setSize(set) === 0;
	  }
	  return true;
	}

	function mapEquiv(a, b, opts, channel) {
	  if ($mapSize(a) !== $mapSize(b)) {
	    return false;
	  }
	  var iA = esGetIterator(a);
	  var iB = esGetIterator(b);
	  var resultA;
	  var resultB;
	  var set;
	  var key;
	  var item1;
	  var item2;
	  while ((resultA = iA.next()) && !resultA.done) {
	    key = resultA.value[0];
	    item1 = resultA.value[1];
	    if (key && typeof key === 'object') {
	      if (!set) { set = new $Set$2(); }
	      $setAdd(set, key);
	    } else {
	      item2 = $mapGet$1(b, key);
	      if ((typeof item2 === 'undefined' && !$mapHas$4(b, key)) || !internalDeepEqual(item1, item2, opts, channel)) {
	        if (opts.strict) {
	          return false;
	        }
	        if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
	          return false;
	        }
	        if (!set) { set = new $Set$2(); }
	        $setAdd(set, key);
	      }
	    }
	  }

	  if (set) {
	    while ((resultB = iB.next()) && !resultB.done) {
	      key = resultB.value[0];
	      item2 = resultB.value[1];
	      if (key && typeof key === 'object') {
	        if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
	          return false;
	        }
	      } else if (
	        !opts.strict
	        && (!a.has(key) || !internalDeepEqual($mapGet$1(a, key), item2, opts, channel))
	        && !mapHasEqualEntry(set, a, key, item2, object_assign({}, opts, { strict: false }), channel)
	      ) {
	        return false;
	      }
	    }
	    return $setSize(set) === 0;
	  }
	  return true;
	}

	function objEquiv(a, b, opts, channel) {
	  /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5] */
	  var i, key;

	  if (typeof a !== typeof b) { return false; }
	  if (a == null || b == null) { return false; }

	  if ($objToString(a) !== $objToString(b)) { return false; }

	  if (isArguments$1(a) !== isArguments$1(b)) { return false; }

	  var aIsArray = isarray(a);
	  var bIsArray = isarray(b);
	  if (aIsArray !== bIsArray) { return false; }

	  // TODO: replace when a cross-realm brand check is available
	  var aIsError = a instanceof Error;
	  var bIsError = b instanceof Error;
	  if (aIsError !== bIsError) { return false; }
	  if (aIsError || bIsError) {
	    if (a.name !== b.name || a.message !== b.message) { return false; }
	  }

	  var aIsRegex = isRegex(a);
	  var bIsRegex = isRegex(b);
	  if (aIsRegex !== bIsRegex) { return false; }
	  if ((aIsRegex || bIsRegex) && (a.source !== b.source || regexp_prototype_flags(a) !== regexp_prototype_flags(b))) {
	    return false;
	  }

	  var aIsDate = isDateObject(a);
	  var bIsDate = isDateObject(b);
	  if (aIsDate !== bIsDate) { return false; }
	  if (aIsDate || bIsDate) { // && would work too, because both are true or both false here
	    if ($getTime(a) !== $getTime(b)) { return false; }
	  }
	  if (opts.strict && gPO && gPO(a) !== gPO(b)) { return false; }

	  if (whichTypedArray(a) !== whichTypedArray(b)) {
	    return false;
	  }

	  var aIsBuffer = isBuffer(a);
	  var bIsBuffer = isBuffer(b);
	  if (aIsBuffer !== bIsBuffer) { return false; }
	  if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
	    if (a.length !== b.length) { return false; }
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) { return false; }
	    }
	    return true;
	  }

	  if (typeof a !== typeof b) { return false; }

	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  // having the same number of owned properties (keys incorporates hasOwnProperty)
	  if (ka.length !== kb.length) { return false; }

	  // the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  // ~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i]) { return false; } // eslint-disable-line eqeqeq
	  }

	  // equivalent values for every corresponding key, and ~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!internalDeepEqual(a[key], b[key], opts, channel)) { return false; }
	  }

	  var aCollection = whichCollection(a);
	  var bCollection = whichCollection(b);
	  if (aCollection !== bCollection) {
	    return false;
	  }
	  if (aCollection === 'Set' || bCollection === 'Set') { // aCollection === bCollection
	    return setEquiv(a, b, opts, channel);
	  }
	  if (aCollection === 'Map') { // aCollection === bCollection
	    return mapEquiv(a, b, opts, channel);
	  }

	  return true;
	}

	var deepEqual = function deepEqual(a, b, opts) {
	  return internalDeepEqual(a, b, opts, sideChannel());
	};

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	var parseuri = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};

	/**
	 * Module dependencies.
	 */


	var debug = browser('socket.io-client:url');

	/**
	 * Module exports.
	 */

	var url_1 = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url (uri, loc) {
	  var obj = uri;

	  // default to window.location
	  loc = loc || (typeof location !== 'undefined' && location);
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' === typeof uri) {
	    if ('/' === uri.charAt(0)) {
	      if ('/' === uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' !== typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    } else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

	  return obj;
	}

	/**
	 * Helpers.
	 */

	var s$1 = 1000;
	var m$1 = s$1 * 60;
	var h$1 = m$1 * 60;
	var d$1 = h$1 * 24;
	var y$1 = d$1 * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms$1 = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse$2(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong$1(val) : fmtShort$1(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse$2(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y$1;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d$1;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h$1;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m$1;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s$1;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort$1(ms) {
	  if (ms >= d$1) {
	    return Math.round(ms / d$1) + 'd';
	  }
	  if (ms >= h$1) {
	    return Math.round(ms / h$1) + 'h';
	  }
	  if (ms >= m$1) {
	    return Math.round(ms / m$1) + 'm';
	  }
	  if (ms >= s$1) {
	    return Math.round(ms / s$1) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong$1(ms) {
	  return plural$1(ms, d$1, 'day') ||
	    plural$1(ms, h$1, 'hour') ||
	    plural$1(ms, m$1, 'minute') ||
	    plural$1(ms, s$1, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural$1(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	var debug$1 = createCommonjsModule(function (module, exports) {
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = ms$1;

	/**
	 * Active `debug` instances.
	 */
	exports.instances = [];

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */

	exports.formatters = {};

	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */

	function selectColor(namespace) {
	  var hash = 0, i;

	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }

	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function createDebug(namespace) {

	  var prevTime;

	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;

	    var self = debug;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);

	    var logFn = debug.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }

	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);
	  debug.destroy = destroy;

	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }

	  exports.instances.push(debug);

	  return debug;
	}

	function destroy () {
	  var index = exports.instances.indexOf(this);
	  if (index !== -1) {
	    exports.instances.splice(index, 1);
	    return true;
	  } else {
	    return false;
	  }
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  exports.names = [];
	  exports.skips = [];

	  var i;
	  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	  var len = split.length;

	  for (i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }

	  for (i = 0; i < exports.instances.length; i++) {
	    var instance = exports.instances[i];
	    instance.enabled = exports.enabled(instance.namespace);
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  if (name[name.length - 1] === '*') {
	    return true;
	  }
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}
	});
	var debug_1 = debug$1.coerce;
	var debug_2 = debug$1.disable;
	var debug_3 = debug$1.enable;
	var debug_4 = debug$1.enabled;
	var debug_5 = debug$1.humanize;
	var debug_6 = debug$1.instances;
	var debug_7 = debug$1.names;
	var debug_8 = debug$1.skips;
	var debug_9 = debug$1.formatters;

	var browser$1 = createCommonjsModule(function (module, exports) {
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug$1;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
	  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
	  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
	  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
	  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
	  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
	  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
	  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
	  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
	  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
	  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	    return true;
	  }

	  // Internet Explorer and Edge do not support colors.
	  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
	    return false;
	  }

	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return;

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit');

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }

	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	});
	var browser_1$1 = browser$1.log;
	var browser_2$1 = browser$1.formatArgs;
	var browser_3$1 = browser$1.save;
	var browser_4$1 = browser$1.load;
	var browser_5$1 = browser$1.useColors;
	var browser_6$1 = browser$1.storage;
	var browser_7$1 = browser$1.colors;

	var componentEmitter = createCommonjsModule(function (module) {
	/**
	 * Expose `Emitter`.
	 */

	{
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	}
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};
	});

	var toString$3 = {}.toString;

	var isarray$2 = Array.isArray || function (arr) {
	  return toString$3.call(arr) == '[object Array]';
	};

	var isBuffer$1 = isBuf;

	var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
	var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

	var isView = function (obj) {
	  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
	};

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
	          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
	}

	/*global Blob,File*/

	/**
	 * Module requirements
	 */



	var toString$4 = Object.prototype.toString;
	var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString$4.call(Blob) === '[object BlobConstructor]');
	var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString$4.call(File) === '[object FileConstructor]');

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	var deconstructPacket = function(packet) {
	  var buffers = [];
	  var packetData = packet.data;
	  var pack = packet;
	  pack.data = _deconstructPacket(packetData, buffers);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	function _deconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (isBuffer$1(data)) {
	    var placeholder = { _placeholder: true, num: buffers.length };
	    buffers.push(data);
	    return placeholder;
	  } else if (isarray$2(data)) {
	    var newData = new Array(data.length);
	    for (var i = 0; i < data.length; i++) {
	      newData[i] = _deconstructPacket(data[i], buffers);
	    }
	    return newData;
	  } else if (typeof data === 'object' && !(data instanceof Date)) {
	    var newData = {};
	    for (var key in data) {
	      newData[key] = _deconstructPacket(data[key], buffers);
	    }
	    return newData;
	  }
	  return data;
	}

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	var reconstructPacket = function(packet, buffers) {
	  packet.data = _reconstructPacket(packet.data, buffers);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	function _reconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (data && data._placeholder) {
	    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
	  } else if (isarray$2(data)) {
	    for (var i = 0; i < data.length; i++) {
	      data[i] = _reconstructPacket(data[i], buffers);
	    }
	  } else if (typeof data === 'object') {
	    for (var key in data) {
	      data[key] = _reconstructPacket(data[key], buffers);
	    }
	  }

	  return data;
	}

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	var removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((withNativeBlob && obj instanceof Blob) ||
	        (withNativeFile && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isarray$2(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (typeof obj === 'object' && !isBuffer$1(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	var binary = {
		deconstructPacket: deconstructPacket,
		reconstructPacket: reconstructPacket,
		removeBlobs: removeBlobs
	};

	var socket_ioParser = createCommonjsModule(function (module, exports) {
	/**
	 * Module dependencies.
	 */

	var debug = browser$1('socket.io-parser');





	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'ACK',
	  'ERROR',
	  'BINARY_EVENT',
	  'BINARY_ACK'
	];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	var ERROR_PACKET = exports.ERROR + '"encode error"';

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
	    encodeAsBinary(obj, callback);
	  } else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {

	  // first is type
	  var str = '' + obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
	    str += obj.attachments + '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' !== obj.nsp) {
	    str += obj.nsp + ',';
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    var payload = tryStringify(obj.data);
	    if (payload !== false) {
	      str += payload;
	    } else {
	      return ERROR_PACKET;
	    }
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	function tryStringify(str) {
	  try {
	    return JSON.stringify(str);
	  } catch(e){
	    return false;
	  }
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	componentEmitter(Decoder.prototype);

	/**
	 * Decodes an encoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function(obj) {
	  var packet;
	  if (typeof obj === 'string') {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  } else if (isBuffer$1(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  } else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var i = 0;
	  // look up type
	  var p = {
	    type: Number(str.charAt(0))
	  };

	  if (null == exports.types[p.type]) {
	    return error('unknown packet type ' + p.type);
	  }

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
	    var buf = '';
	    while (str.charAt(++i) !== '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) !== '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }

	  // look up namespace (if any)
	  if ('/' === str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' === c) break;
	      p.nsp += c;
	      if (i === str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i === str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    var payload = tryParse(str.substr(i));
	    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isarray$2(payload));
	    if (isPayloadValid) {
	      p.data = payload;
	    } else {
	      return error('invalid payload');
	    }
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	function tryParse(str) {
	  try {
	    return JSON.parse(str);
	  } catch(e){
	    return false;
	  }
	}

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(msg) {
	  return {
	    type: exports.ERROR,
	    data: 'parser error: ' + msg
	  };
	}
	});
	var socket_ioParser_1 = socket_ioParser.protocol;
	var socket_ioParser_2 = socket_ioParser.types;
	var socket_ioParser_3 = socket_ioParser.CONNECT;
	var socket_ioParser_4 = socket_ioParser.DISCONNECT;
	var socket_ioParser_5 = socket_ioParser.EVENT;
	var socket_ioParser_6 = socket_ioParser.ACK;
	var socket_ioParser_7 = socket_ioParser.ERROR;
	var socket_ioParser_8 = socket_ioParser.BINARY_EVENT;
	var socket_ioParser_9 = socket_ioParser.BINARY_ACK;
	var socket_ioParser_10 = socket_ioParser.Encoder;
	var socket_ioParser_11 = socket_ioParser.Decoder;

	var hasCors = createCommonjsModule(function (module) {
	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  module.exports = typeof XMLHttpRequest !== 'undefined' &&
	    'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}
	});

	var globalThis_browser = (function () {
	  if (typeof self !== 'undefined') {
	    return self;
	  } else if (typeof window !== 'undefined') {
	    return window;
	  } else {
	    return Function('return this')(); // eslint-disable-line no-new-func
	  }
	})();

	// browser shim for xmlhttprequest module




	var xmlhttprequest = function (opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCors)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }

	  if (!xdomain) {
	    try {
	      return new globalThis_browser[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
	    } catch (e) { }
	  }
	};

	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	var keys = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};

	var toString$5 = {}.toString;

	var isarray$3 = Array.isArray || function (arr) {
	  return toString$5.call(arr) == '[object Array]';
	};

	/* global Blob File */

	/*
	 * Module requirements.
	 */



	var toString$6 = Object.prototype.toString;
	var withNativeBlob$1 = typeof Blob === 'function' ||
	                        typeof Blob !== 'undefined' && toString$6.call(Blob) === '[object BlobConstructor]';
	var withNativeFile$1 = typeof File === 'function' ||
	                        typeof File !== 'undefined' && toString$6.call(File) === '[object FileConstructor]';

	/**
	 * Module exports.
	 */

	var hasBinary2 = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Supports Buffer, ArrayBuffer, Blob and File.
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary (obj) {
	  if (!obj || typeof obj !== 'object') {
	    return false;
	  }

	  if (isarray$3(obj)) {
	    for (var i = 0, l = obj.length; i < l; i++) {
	      if (hasBinary(obj[i])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
	    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
	    (withNativeBlob$1 && obj instanceof Blob) ||
	    (withNativeFile$1 && obj instanceof File)
	  ) {
	    return true;
	  }

	  // see: https://github.com/Automattic/has-binary/pull/4
	  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
	    return hasBinary(obj.toJSON(), true);
	  }

	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	var arraybuffer_slice = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};

	var after_1 = after;

	function after(count, callback, err_cb) {
	    var bail = false;
	    err_cb = err_cb || noop;
	    proxy.count = count;

	    return (count === 0) ? callback() : proxy

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count;

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true;
	            callback(err);
	            // future error callbacks will go to error handler
	            callback = err_cb;
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result);
	        }
	    }
	}

	function noop() {}

	/*! https://mths.be/utf8js v2.1.2 by @mathias */

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint, strict) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			if (strict) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
			return false;
		}
		return true;
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint, strict) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			if (!checkScalarValue(codePoint, strict)) {
				codePoint = 0xFFFD;
			}
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint, strict);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol(strict) {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol(strict)) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	var utf8 = {
		version: '2.1.2',
		encode: utf8encode,
		decode: utf8decode
	};

	var base64Arraybuffer = createCommonjsModule(function (module, exports) {
	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(){

	  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

	  // Use a lookup table to find the index.
	  var lookup = new Uint8Array(256);
	  for (var i = 0; i < chars.length; i++) {
	    lookup[chars.charCodeAt(i)] = i;
	  }

	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";

	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }

	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }

	    return base64;
	  };

	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;

	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }

	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);

	    for (i = 0; i < len; i+=4) {
	      encoded1 = lookup[base64.charCodeAt(i)];
	      encoded2 = lookup[base64.charCodeAt(i+1)];
	      encoded3 = lookup[base64.charCodeAt(i+2)];
	      encoded4 = lookup[base64.charCodeAt(i+3)];

	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }

	    return arraybuffer;
	  };
	})();
	});
	var base64Arraybuffer_1 = base64Arraybuffer.encode;
	var base64Arraybuffer_2 = base64Arraybuffer.decode;

	/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
	  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
	  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
	  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
	  false;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  return ary.map(function(chunk) {
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      return buf;
	    }

	    return chunk;
	  });
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary).forEach(function(part) {
	    bb.append(part);
	  });

	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	}
	function BlobConstructor(ary, options) {
	  return new Blob(mapArrayBufferViews(ary), options || {});
	}
	if (typeof Blob !== 'undefined') {
	  BlobBuilderConstructor.prototype = Blob.prototype;
	  BlobConstructor.prototype = Blob.prototype;
	}

	var blob = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();

	var browser$2 = createCommonjsModule(function (module, exports) {
	/**
	 * Module dependencies.
	 */







	var base64encoder;
	if (typeof ArrayBuffer !== 'undefined') {
	  base64encoder = base64Arraybuffer;
	}

	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */

	var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;

	/**
	 * Current protocol version.
	 */

	exports.protocol = 3;

	/**
	 * Packet types.
	 */

	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};

	var packetslist = keys(packets);

	/**
	 * Premade error packet.
	 */

	var err = { type: 'error', data: 'parser error' };

	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */



	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */

	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if (typeof supportsBinary === 'function') {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }

	  if (typeof utf8encode === 'function') {
	    callback = utf8encode;
	    utf8encode = null;
	  }

	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;

	  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (typeof blob !== 'undefined' && data instanceof blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }

	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }

	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];

	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
	  }

	  return callback('' + encoded);

	};

	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}

	/**
	 * Encode packet helpers for binary types
	 */

	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);

	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }

	  return callback(resultBuffer.buffer);
	}

	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var fr = new FileReader();
	  fr.onload = function() {
	    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}

	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }

	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob$1 = new blob([length.buffer, packet.data]);

	  return callback(blob$1);
	}

	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */

	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (typeof blob !== 'undefined' && packet.data instanceof blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }

	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += btoa(b64data);
	  return callback(message);
	};

	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */

	exports.decodePacket = function (data, binaryType, utf8decode) {
	  if (data === undefined) {
	    return err;
	  }
	  // String data
	  if (typeof data === 'string') {
	    if (data.charAt(0) === 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }

	    if (utf8decode) {
	      data = tryDecode(data);
	      if (data === false) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);

	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }

	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }

	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = arraybuffer_slice(data, 1);
	  if (blob && binaryType === 'blob') {
	    rest = new blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};

	function tryDecode(data) {
	  try {
	    data = utf8.decode(data, { strict: false });
	  } catch (e) {
	    return false;
	  }
	  return data;
	}

	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */

	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!base64encoder) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }

	  var data = base64encoder.decode(msg.substr(1));

	  if (binaryType === 'blob' && blob) {
	    data = new blob([data]);
	  }

	  return { type: type, data: data };
	};

	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */

	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary === 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }

	  var isBinary = hasBinary2(packets);

	  if (supportsBinary && isBinary) {
	    if (blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }

	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }

	  if (!packets.length) {
	    return callback('0:');
	  }

	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};

	/**
	 * Async array map using after
	 */

	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after_1(ary.length, done);

	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };

	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}

	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */

	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data !== 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }

	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var packet;
	  if (data === '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	  var length = '', n, msg;

	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);

	    if (chr !== ':') {
	      length += chr;
	      continue;
	    }

	    if (length === '' || (length != (n = Number(length)))) {
	      // parser error - ignoring payload
	      return callback(err, 0, 1);
	    }

	    msg = data.substr(i + 1, n);

	    if (length != msg.length) {
	      // parser error - ignoring payload
	      return callback(err, 0, 1);
	    }

	    if (msg.length) {
	      packet = exports.decodePacket(msg, binaryType, false);

	      if (err.type === packet.type && err.data === packet.data) {
	        // parser error in individual packet - ignoring payload
	        return callback(err, 0, 1);
	      }

	      var ret = callback(packet, i + n, l);
	      if (false === ret) return;
	    }

	    // advance cursor
	    i += n;
	    length = '';
	  }

	  if (length !== '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	};

	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */

	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }

	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);

	    var resultArray = new Uint8Array(totalLength);

	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }

	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }

	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;

	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });

	    return callback(resultArray.buffer);
	  });
	};

	/**
	 * Encode as Blob
	 */

	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }

	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;

	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;

	      if (blob) {
	        var blob$1 = new blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob$1);
	      }
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(new blob(results));
	  });
	};

	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */

	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var bufferTail = data;
	  var buffers = [];

	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';

	    for (var i = 1; ; i++) {
	      if (tailArray[i] === 255) break;

	      // 310 = char length of Number.MAX_VALUE
	      if (msgLength.length > 310) {
	        return callback(err, 0, 1);
	      }

	      msgLength += tailArray[i];
	    }

	    bufferTail = arraybuffer_slice(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);

	    var msg = arraybuffer_slice(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }

	    buffers.push(msg);
	    bufferTail = arraybuffer_slice(bufferTail, msgLength);
	  }

	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};
	});
	var browser_1$2 = browser$2.protocol;
	var browser_2$2 = browser$2.packets;
	var browser_3$2 = browser$2.encodePacket;
	var browser_4$2 = browser$2.encodeBase64Packet;
	var browser_5$2 = browser$2.decodePacket;
	var browser_6$2 = browser$2.decodeBase64Packet;
	var browser_7$2 = browser$2.encodePayload;
	var browser_8 = browser$2.decodePayload;
	var browser_9 = browser$2.encodePayloadAsArrayBuffer;
	var browser_10 = browser$2.encodePayloadAsBlob;
	var browser_11 = browser$2.decodePayloadAsBinary;

	/**
	 * Module dependencies.
	 */




	/**
	 * Module exports.
	 */

	var transport = Transport;

	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */

	function Transport (opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;
	  this.withCredentials = opts.withCredentials;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	  this.forceNode = opts.forceNode;

	  // results of ReactNative environment detection
	  this.isReactNative = opts.isReactNative;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	  this.localAddress = opts.localAddress;
	}

	/**
	 * Mix in `Emitter`.
	 */

	componentEmitter(Transport.prototype);

	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */

	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};

	/**
	 * Opens the transport.
	 *
	 * @api public
	 */

	Transport.prototype.open = function () {
	  if ('closed' === this.readyState || '' === this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }

	  return this;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.doClose();
	    this.onClose();
	  }

	  return this;
	};

	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	Transport.prototype.send = function (packets) {
	  if ('open' === this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};

	/**
	 * Called upon open
	 *
	 * @api private
	 */

	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};

	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function (data) {
	  var packet = browser$2.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};

	/**
	 * Called with a decoded packet.
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	var encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	var decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};

	var parseqs = {
		encode: encode,
		decode: decode
	};

	var componentInherit = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};

	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
	  , length = 64
	  , map = {}
	  , seed = 0
	  , i = 0
	  , prev;

	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode$1(num) {
	  var encoded = '';

	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);

	  return encoded;
	}

	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode$1(str) {
	  var decoded = 0;

	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length + map[str.charAt(i)];
	  }

	  return decoded;
	}

	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode$1(+new Date());

	  if (now !== prev) return seed = 0, prev = now;
	  return now +'.'+ encode$1(seed++);
	}

	//
	// Map each character to its index.
	//
	for (; i < length; i++) map[alphabet[i]] = i;

	//
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode$1;
	yeast.decode = decode$1;
	var yeast_1 = yeast;

	/**
	 * Module dependencies.
	 */






	var debug$2 = browser('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	var polling = Polling;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = (function () {
	  var XMLHttpRequest = xmlhttprequest;
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	componentInherit(Polling, transport);

	/**
	 * Transport name.
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling.prototype.doOpen = function () {
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling.prototype.pause = function (onPause) {
	  var self = this;

	  this.readyState = 'pausing';

	  function pause () {
	    debug$2('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug$2('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function () {
	        debug$2('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug$2('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function () {
	        debug$2('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling.prototype.poll = function () {
	  debug$2('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling.prototype.onData = function (data) {
	  var self = this;
	  debug$2('polling got data %s', data);
	  var callback = function (packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' === self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' === packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  browser$2.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' !== this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' === this.readyState) {
	      this.poll();
	    } else {
	      debug$2('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function () {
	  var self = this;

	  function close () {
	    debug$2('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' === this.readyState) {
	    debug$2('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug$2('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;
	  var callbackfn = function () {
	    self.writable = true;
	    self.emit('drain');
	  };

	  browser$2.encodePayload(packets, this.supportsBinary, function (data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast_1();
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // avoid port if default for schema
	  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
	     ('http' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/* global attachEvent */

	/**
	 * Module requirements.
	 */





	var debug$3 = browser('engine.io-client:polling-xhr');


	/**
	 * Module exports.
	 */

	var pollingXhr = XHR;
	var Request_1 = Request;

	/**
	 * Empty function
	 */

	function empty () {}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR (opts) {
	  polling.call(this, opts);
	  this.requestTimeout = opts.requestTimeout;
	  this.extraHeaders = opts.extraHeaders;

	  if (typeof location !== 'undefined') {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
	      port !== opts.port;
	    this.xs = opts.secure !== isSSL;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	componentInherit(XHR, polling);

	/**
	 * XHR supports binary
	 */

	XHR.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR.prototype.request = function (opts) {
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;
	  opts.withCredentials = this.withCredentials;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  opts.requestTimeout = this.requestTimeout;

	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR.prototype.doWrite = function (data, fn) {
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function (err) {
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR.prototype.doPoll = function () {
	  debug$3('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function (data) {
	    self.onData(data);
	  });
	  req.on('error', function (err) {
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request (opts) {
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined !== opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;
	  this.withCredentials = opts.withCredentials;
	  this.requestTimeout = opts.requestTimeout;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	componentEmitter(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function () {
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new xmlhttprequest(opts);
	  var self = this;

	  try {
	    debug$3('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}

	    if ('POST' === this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    try {
	      xhr.setRequestHeader('Accept', '*/*');
	    } catch (e) {}

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = this.withCredentials;
	    }

	    if (this.requestTimeout) {
	      xhr.timeout = this.requestTimeout;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function () {
	        self.onLoad();
	      };
	      xhr.onerror = function () {
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function () {
	        if (xhr.readyState === 2) {
	          try {
	            var contentType = xhr.getResponseHeader('Content-Type');
	            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
	              xhr.responseType = 'arraybuffer';
	            }
	          } catch (e) {}
	        }
	        if (4 !== xhr.readyState) return;
	        if (200 === xhr.status || 1223 === xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function () {
	            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
	          }, 0);
	        }
	      };
	    }

	    debug$3('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function () {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (typeof document !== 'undefined') {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function () {
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function (data) {
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function (err) {
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function (fromError) {
	  if ('undefined' === typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch (e) {}
	  }

	  if (typeof document !== 'undefined') {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function () {
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type');
	    } catch (e) {}
	    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
	      data = this.xhr.response || this.xhr.responseText;
	    } else {
	      data = this.xhr.responseText;
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function () {
	  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function () {
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	Request.requestsCount = 0;
	Request.requests = {};

	if (typeof document !== 'undefined') {
	  if (typeof attachEvent === 'function') {
	    attachEvent('onunload', unloadHandler);
	  } else if (typeof addEventListener === 'function') {
	    var terminationEvent = 'onpagehide' in globalThis_browser ? 'pagehide' : 'unload';
	    addEventListener(terminationEvent, unloadHandler, false);
	  }
	}

	function unloadHandler () {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}
	pollingXhr.Request = Request_1;

	/**
	 * Module requirements.
	 */





	/**
	 * Module exports.
	 */

	var pollingJsonp = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Noop.
	 */

	function empty$1 () { }

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling (opts) {
	  polling.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    callbacks = globalThis_browser.___eio = (globalThis_browser.___eio || []);
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (typeof addEventListener === 'function') {
	    addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty$1;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	componentInherit(JSONPPolling, polling);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  polling.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function (e) {
	    self.onError('jsonp poll error', e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  } else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;

	  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete () {
	    initIframe();
	    fn();
	  }

	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch (e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function () {
	      if (self.iframe.readyState === 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};

	/**
	 * Module dependencies.
	 */






	var debug$4 = browser('engine.io-client:websocket');

	var BrowserWebSocket, NodeWebSocket;

	if (typeof WebSocket !== 'undefined') {
	  BrowserWebSocket = WebSocket;
	} else if (typeof self !== 'undefined') {
	  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
	}

	if (typeof window === 'undefined') {
	  try {
	    NodeWebSocket = require$$1;
	  } catch (e) { }
	}

	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */

	var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

	/**
	 * Module exports.
	 */

	var websocket = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
	  this.protocols = opts.protocols;
	  if (!this.usingBrowserWebSocket) {
	    WebSocketImpl = NodeWebSocket;
	  }
	  transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	componentInherit(WS, transport);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function () {
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var uri = this.uri();
	  var protocols = this.protocols;
	  var opts = {
	    agent: this.agent,
	    perMessageDeflate: this.perMessageDeflate
	  };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }
	  if (this.localAddress) {
	    opts.localAddress = this.localAddress;
	  }

	  try {
	    this.ws =
	      this.usingBrowserWebSocket && !this.isReactNative
	        ? protocols
	          ? new WebSocketImpl(uri, protocols)
	          : new WebSocketImpl(uri)
	        : new WebSocketImpl(uri, protocols, opts);
	  } catch (err) {
	    return this.emit('error', err);
	  }

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'nodebuffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }

	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function () {
	  var self = this;

	  this.ws.onopen = function () {
	    self.onOpen();
	  };
	  this.ws.onclose = function () {
	    self.onClose();
	  };
	  this.ws.onmessage = function (ev) {
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function (e) {
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;

	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function (packet) {
	      browser$2.encodePacket(packet, self.supportsBinary, function (data) {
	        if (!self.usingBrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }

	          if (self.perMessageDeflate) {
	            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }

	        // Sometimes the websocket has already been closed but the browser didn't
	        // have a chance of informing us about it yet, in that case send will
	        // throw an error
	        try {
	          if (self.usingBrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e) {
	          debug$4('websocket closed before onclose event');
	        }

	        --total || done();
	      });
	    })(packets[i]);
	  }

	  function done () {
	    self.emit('flush');

	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function () {
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function () {
	  transport.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function () {
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
	    ('ws' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast_1();
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function () {
	  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
	};

	/**
	 * Module dependencies
	 */






	/**
	 * Export transports.
	 */

	var polling_1 = polling$1;
	var websocket_1 = websocket;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling$1 (opts) {
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (typeof location !== 'undefined') {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname !== location.hostname || port !== opts.port;
	    xs = opts.secure !== isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new xmlhttprequest(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new pollingXhr(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new pollingJsonp(opts);
	  }
	}

	var transports = {
		polling: polling_1,
		websocket: websocket_1
	};

	var indexOf$1 = [].indexOf;

	var indexof = function(arr, obj){
	  if (indexOf$1) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

	/**
	 * Module dependencies.
	 */



	var debug$5 = browser('engine.io-client:socket');





	/**
	 * Module exports.
	 */

	var socket = Socket;

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket (uri, opts) {
	  if (!(this instanceof Socket)) return new Socket(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' === typeof uri) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri(opts.host).host;
	  }

	  this.secure = null != opts.secure ? opts.secure
	    : (typeof location !== 'undefined' && 'https:' === location.protocol);

	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (typeof location !== 'undefined' ? location.hostname : 'localhost');
	  this.port = opts.port || (typeof location !== 'undefined' && location.port
	      ? location.port
	      : (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.withCredentials = false !== opts.withCredentials;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.transportOptions = opts.transportOptions || {};
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.prevBufferLen = 0;
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
	  this.forceNode = !!opts.forceNode;

	  // detect ReactNative environment
	  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

	  // other options for Node.js or ReactNative client
	  if (typeof self === 'undefined' || this.isReactNative) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }

	    if (opts.localAddress) {
	      this.localAddress = opts.localAddress;
	    }
	  }

	  // set on handshake
	  this.id = null;
	  this.upgrades = null;
	  this.pingInterval = null;
	  this.pingTimeout = null;

	  // set on heartbeat
	  this.pingIntervalTimer = null;
	  this.pingTimeoutTimer = null;

	  this.open();
	}

	Socket.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	componentEmitter(Socket.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket.protocol = browser$2.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket.Socket = Socket;
	Socket.Transport = transport;
	Socket.transports = transports;
	Socket.parser = browser$2;

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket.prototype.createTransport = function (name) {
	  debug$5('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = browser$2.protocol;

	  // transport name
	  query.transport = name;

	  // per-transport options
	  var options = this.transportOptions[name] || {};

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports[name]({
	    query: query,
	    socket: this,
	    agent: options.agent || this.agent,
	    hostname: options.hostname || this.hostname,
	    port: options.port || this.port,
	    secure: options.secure || this.secure,
	    path: options.path || this.path,
	    forceJSONP: options.forceJSONP || this.forceJSONP,
	    jsonp: options.jsonp || this.jsonp,
	    forceBase64: options.forceBase64 || this.forceBase64,
	    enablesXDR: options.enablesXDR || this.enablesXDR,
	    withCredentials: options.withCredentials || this.withCredentials,
	    timestampRequests: options.timestampRequests || this.timestampRequests,
	    timestampParam: options.timestampParam || this.timestampParam,
	    policyPort: options.policyPort || this.policyPort,
	    pfx: options.pfx || this.pfx,
	    key: options.key || this.key,
	    passphrase: options.passphrase || this.passphrase,
	    cert: options.cert || this.cert,
	    ca: options.ca || this.ca,
	    ciphers: options.ciphers || this.ciphers,
	    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
	    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
	    extraHeaders: options.extraHeaders || this.extraHeaders,
	    forceNode: options.forceNode || this.forceNode,
	    localAddress: options.localAddress || this.localAddress,
	    requestTimeout: options.requestTimeout || this.requestTimeout,
	    protocols: options.protocols || void (0),
	    isReactNative: this.isReactNative
	  });

	  return transport;
	};

	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function () {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket.prototype.setTransport = function (transport) {
	  debug$5('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug$5('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport
	  .on('drain', function () {
	    self.onDrain();
	  })
	  .on('packet', function (packet) {
	    self.onPacket(packet);
	  })
	  .on('error', function (e) {
	    self.onError(e);
	  })
	  .on('close', function () {
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket.prototype.probe = function (name) {
	  debug$5('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 });
	  var failed = false;
	  var self = this;

	  Socket.priorWebsocketSuccess = false;

	  function onTransportOpen () {
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug$5('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' === msg.type && 'probe' === msg.data) {
	        debug$5('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

	        debug$5('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' === self.readyState) return;
	          debug$5('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug$5('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport () {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  // Handle any error that happens while probing
	  function onerror (err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug$5('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose () {
	    onerror('transport closed');
	  }

	  // When the socket is closed while we're probing
	  function onclose () {
	    onerror('socket closed');
	  }

	  // When the socket is upgraded while we're probing
	  function onupgrade (to) {
	    if (transport && to.name !== transport.name) {
	      debug$5('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  // Remove all listeners on the transport and on self
	  function cleanup () {
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();
	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket.prototype.onOpen = function () {
	  debug$5('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
	    debug$5('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('opening' === this.readyState || 'open' === this.readyState ||
	      'closing' === this.readyState) {
	    debug$5('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(JSON.parse(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug$5('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if ('closed' === this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' === self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug$5('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api private
	*/

	Socket.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function () {
	    self.emit('ping');
	  });
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket.prototype.onDrain = function () {
	  this.writeBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' !== this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug$5('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket.prototype.write =
	Socket.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, options, fn) {
	  if ('function' === typeof data) {
	    fn = data;
	    data = undefined;
	  }

	  if ('function' === typeof options) {
	    fn = options;
	    options = null;
	  }

	  if ('closing' === this.readyState || 'closed' === this.readyState) {
	    return;
	  }

	  options = options || {};
	  options.compress = false !== options.compress;

	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    if (this.writeBuffer.length) {
	      this.once('drain', function () {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  function close () {
	    self.onClose('forced close');
	    debug$5('socket closing - telling transport to close');
	    self.transport.close();
	  }

	  function cleanupAndClose () {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }

	  function waitForUpgrade () {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug$5('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug$5('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);

	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i < j; i++) {
	    if (~indexof(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};

	var lib$3 = socket;

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	var parser$1 = browser$2;
	lib$3.parser = parser$1;

	var toArray_1 = toArray;

	function toArray(list, index) {
	    var array = [];

	    index = index || 0;

	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i];
	    }

	    return array
	}

	/**
	 * Module exports.
	 */

	var on_1 = on;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on (obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function () {
	      obj.removeListener(ev, fn);
	    }
	  };
	}

	/**
	 * Slice reference.
	 */

	var slice$4 = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	var componentBind = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice$4.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice$4.call(arguments)));
	  }
	};

	var socket$1 = createCommonjsModule(function (module, exports) {
	/**
	 * Module dependencies.
	 */






	var debug = browser('socket.io-client:socket');



	/**
	 * Module exports.
	 */

	module.exports = exports = Socket;

	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */

	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  connecting: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1,
	  ping: 1,
	  pong: 1
	};

	/**
	 * Shortcut to `Emitter#emit`.
	 */

	var emit = componentEmitter.prototype.emit;

	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */

	function Socket (io, nsp, opts) {
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	  this.flags = {};
	  if (opts && opts.query) {
	    this.query = opts.query;
	  }
	  if (this.io.autoConnect) this.open();
	}

	/**
	 * Mix in `Emitter`.
	 */

	componentEmitter(Socket.prototype);

	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */

	Socket.prototype.subEvents = function () {
	  if (this.subs) return;

	  var io = this.io;
	  this.subs = [
	    on_1(io, 'open', componentBind(this, 'onopen')),
	    on_1(io, 'packet', componentBind(this, 'onpacket')),
	    on_1(io, 'close', componentBind(this, 'onclose'))
	  ];
	};

	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */

	Socket.prototype.open =
	Socket.prototype.connect = function () {
	  if (this.connected) return this;

	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' === this.io.readyState) this.onopen();
	  this.emit('connecting');
	  return this;
	};

	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.send = function () {
	  var args = toArray_1(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.emit = function (ev) {
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }

	  var args = toArray_1(arguments);
	  var packet = {
	    type: (this.flags.binary !== undefined ? this.flags.binary : hasBinary2(args)) ? socket_ioParser.BINARY_EVENT : socket_ioParser.EVENT,
	    data: args
	  };

	  packet.options = {};
	  packet.options.compress = !this.flags || false !== this.flags.compress;

	  // event ack callback
	  if ('function' === typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }

	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }

	  this.flags = {};

	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.packet = function (packet) {
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};

	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */

	Socket.prototype.onopen = function () {
	  debug('transport is open - connecting');

	  // write connect packet if necessary
	  if ('/' !== this.nsp) {
	    if (this.query) {
	      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
	      debug('sending connect packet with query %s', query);
	      this.packet({type: socket_ioParser.CONNECT, query: query});
	    } else {
	      this.packet({type: socket_ioParser.CONNECT});
	    }
	  }
	};

	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */

	Socket.prototype.onclose = function (reason) {
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};

	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onpacket = function (packet) {
	  var sameNamespace = packet.nsp === this.nsp;
	  var rootNamespaceError = packet.type === socket_ioParser.ERROR && packet.nsp === '/';

	  if (!sameNamespace && !rootNamespaceError) return;

	  switch (packet.type) {
	    case socket_ioParser.CONNECT:
	      this.onconnect();
	      break;

	    case socket_ioParser.EVENT:
	      this.onevent(packet);
	      break;

	    case socket_ioParser.BINARY_EVENT:
	      this.onevent(packet);
	      break;

	    case socket_ioParser.ACK:
	      this.onack(packet);
	      break;

	    case socket_ioParser.BINARY_ACK:
	      this.onack(packet);
	      break;

	    case socket_ioParser.DISCONNECT:
	      this.ondisconnect();
	      break;

	    case socket_ioParser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};

	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onevent = function (packet) {
	  var args = packet.data || [];
	  debug('emitting event %j', args);

	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }

	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};

	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */

	Socket.prototype.ack = function (id) {
	  var self = this;
	  var sent = false;
	  return function () {
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray_1(arguments);
	    debug('sending ack %j', args);

	    self.packet({
	      type: hasBinary2(args) ? socket_ioParser.BINARY_ACK : socket_ioParser.ACK,
	      id: id,
	      data: args
	    });
	  };
	};

	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onack = function (packet) {
	  var ack = this.acks[packet.id];
	  if ('function' === typeof ack) {
	    debug('calling ack %s with %j', packet.id, packet.data);
	    ack.apply(this, packet.data);
	    delete this.acks[packet.id];
	  } else {
	    debug('bad ack %s', packet.id);
	  }
	};

	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */

	Socket.prototype.onconnect = function () {
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};

	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */

	Socket.prototype.emitBuffered = function () {
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];

	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};

	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */

	Socket.prototype.ondisconnect = function () {
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};

	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */

	Socket.prototype.destroy = function () {
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }

	  this.io.destroy(this);
	};

	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.close =
	Socket.prototype.disconnect = function () {
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: socket_ioParser.DISCONNECT });
	  }

	  // remove socket from pool
	  this.destroy();

	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};

	/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.compress = function (compress) {
	  this.flags.compress = compress;
	  return this;
	};

	/**
	 * Sets the binary flag
	 *
	 * @param {Boolean} whether the emitted data contains binary
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.binary = function (binary) {
	  this.flags.binary = binary;
	  return this;
	};
	});

	/**
	 * Expose `Backoff`.
	 */

	var backo2 = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};

	/**
	 * Module dependencies.
	 */







	var debug$6 = browser('socket.io-client:manager');



	/**
	 * IE6+ hasOwnProperty
	 */

	var has$4 = Object.prototype.hasOwnProperty;

	/**
	 * Module exports
	 */

	var manager = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager (uri, opts) {
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' === typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new backo2({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  var _parser = opts.parser || socket_ioParser;
	  this.encoder = new _parser.Encoder();
	  this.decoder = new _parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function () {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has$4.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function () {
	  for (var nsp in this.nsps) {
	    if (has$4.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.generateId(nsp);
	    }
	  }
	};

	/**
	 * generate `socket.id` for the given `nsp`
	 *
	 * @param {String} nsp
	 * @return {String}
	 * @api private
	 */

	Manager.prototype.generateId = function (nsp) {
	  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
	};

	/**
	 * Mix in `Emitter`.
	 */

	componentEmitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function (v) {
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function (v) {
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function (v) {
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function (v) {
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function (v) {
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function (v) {
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function () {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};

	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open =
	Manager.prototype.connect = function (fn, opts) {
	  debug$6('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug$6('opening %s', this.uri);
	  this.engine = lib$3(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on_1(socket, 'open', function () {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on_1(socket, 'error', function (data) {
	    debug$6('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug$6('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function () {
	      debug$6('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function () {
	  debug$6('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on_1(socket, 'data', componentBind(this, 'ondata')));
	  this.subs.push(on_1(socket, 'ping', componentBind(this, 'onping')));
	  this.subs.push(on_1(socket, 'pong', componentBind(this, 'onpong')));
	  this.subs.push(on_1(socket, 'error', componentBind(this, 'onerror')));
	  this.subs.push(on_1(socket, 'close', componentBind(this, 'onclose')));
	  this.subs.push(on_1(this.decoder, 'decoded', componentBind(this, 'ondecoded')));
	};

	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */

	Manager.prototype.onping = function () {
	  this.lastPing = new Date();
	  this.emitAll('ping');
	};

	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */

	Manager.prototype.onpong = function () {
	  this.emitAll('pong', new Date() - this.lastPing);
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function (data) {
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function (err) {
	  debug$6('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function (nsp, opts) {
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new socket$1(this, nsp, opts);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function () {
	      socket.id = self.generateId(nsp);
	    });

	    if (this.autoConnect) {
	      // manually call here since connecting event is fired before listening
	      onConnecting();
	    }
	  }

	  function onConnecting () {
	    if (!~indexof(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }

	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function (socket) {
	  var index = indexof(this.connecting, socket);
	  if (~index) this.connecting.splice(index, 1);
	  if (this.connecting.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function (packet) {
	  debug$6('writing packet %j', packet);
	  var self = this;
	  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function (encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function () {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function () {
	  debug$6('cleanup');

	  var subsLength = this.subs.length;
	  for (var i = 0; i < subsLength; i++) {
	    var sub = this.subs.shift();
	    sub.destroy();
	  }

	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close =
	Manager.prototype.disconnect = function () {
	  debug$6('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' === this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function (reason) {
	  debug$6('onclose');

	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);

	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function () {
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug$6('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug$6('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function () {
	      if (self.skipReconnect) return;

	      debug$6('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function (err) {
	        if (err) {
	          debug$6('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug$6('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function () {
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};

	var lib$4 = createCommonjsModule(function (module, exports) {
	/**
	 * Module dependencies.
	 */




	var debug = browser('socket.io-client');

	/**
	 * Module exports.
	 */

	module.exports = exports = lookup;

	/**
	 * Managers cache.
	 */

	var cache = exports.managers = {};

	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */

	function lookup (uri, opts) {
	  if (typeof uri === 'object') {
	    opts = uri;
	    uri = undefined;
	  }

	  opts = opts || {};

	  var parsed = url_1(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var path = parsed.path;
	  var sameNamespace = cache[id] && path in cache[id].nsps;
	  var newConnection = opts.forceNew || opts['force new connection'] ||
	                      false === opts.multiplex || sameNamespace;

	  var io;

	  if (newConnection) {
	    debug('ignoring socket cache for %s', source);
	    io = manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = manager(source, opts);
	    }
	    io = cache[id];
	  }
	  if (parsed.query && !opts.query) {
	    opts.query = parsed.query;
	  }
	  return io.socket(parsed.path, opts);
	}

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = socket_ioParser.protocol;

	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */

	exports.connect = lookup;

	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */

	exports.Manager = manager;
	exports.Socket = socket$1;
	});
	var lib_1$2 = lib$4.managers;
	var lib_2$1 = lib$4.protocol;
	var lib_3$1 = lib$4.connect;
	var lib_4$1 = lib$4.Manager;
	var lib_5$1 = lib$4.Socket;

	var config = {
	  apiUrl: `https://159.89.164.25:3000` 
	};

	const $ = document.querySelector.bind(document);
	const $$ = document.querySelectorAll.bind(document);
	const log = console.log;
	const warn = console.warn;
	const err = console.error;


	//
	//  all the references we use internally to manage call state,
	// to make it easy to tinker from the js console. for example:
	//
	//Client.camVideoProducer.paused
	//
	const myPeerId = uuidv4();
	exports.currentActiveSpeaker = {};
	  exports.lastPollSyncData = {};
	  exports.consumers = [];

	//
	// entry point -- called by document.body.onload
	//

	// window.addEventListener('DOMContentLoaded', () => {
	//   main();
	// });

	// Adds support for Promise to socket.io-client
	const socketPromise = function (socket) {
	  return function request(type, data = {}) {
	    return new Promise((resolve) => {
	      socket.emit(type, data, resolve);
	    });
	  }
	};

	async function main() {
	  console.log(`starting up ... my peerId is ${myPeerId}`);
	  try {
	    exports.device = new lib_1$1();

	    const opts = {
	      path: '/server',
	      transports: ['websocket'],
	    };

	    const serverUrl = config.apiUrl;

	    exports.socket = lib$4(serverUrl, opts);
	    exports.socket.request = socketPromise(exports.socket);

	  } catch (e) {
	    if (e.name === 'UnsupportedError') {
	      console.error('browser not supported for video calls');
	      return;
	    } else {
	      console.error(e);
	    }
	  }

	  // use sendBeacon to tell the server we're disconnecting when
	  // the page unloads
	  window.addEventListener('unload', () => sig('leave', {}, true));
	}

	//
	// meeting control actions
	//

	async function joinRoom() {
	  if (exports.joined) {
	    return;
	  }

	  log('join room');
	  $('#join-control').style.display = 'none';

	  try {
	    // signal that we're a new peer and initialize our
	    // mediasoup-client device, if this is our first time connecting
	    let { routerRtpCapabilities } = await sig('join');

	    if (!exports.device.loaded) {
	      await exports.device.load({ routerRtpCapabilities });
	    }
	    exports.joined = true;
	    $('#leave-room').style.display = 'initial';
	  } catch (e) {
	    console.error(e);
	    return;
	  }

	  // super-simple signaling: let's poll at 1-second intervals
	  exports.pollingInterval = setInterval(async () => {
	    let { error } = await pollAndUpdate();
	    if (error) {
	      clearInterval(exports.pollingInterval);
	      err(error);
	    }
	  }, 30000);
	}

	async function sendCameraStreams() {
	  log('send camera streams');
	  $('#send-camera').style.display = 'none';

	  // make sure we've joined the room and started our camera. these
	  // functions don't do anything if they've already been called this
	  // session
	  await joinRoom();
	  await startCamera();

	  // create a transport for outgoing media, if we don't already have one
	  if (!exports.sendTransport) {
	    exports.sendTransport = await createTransport('send');
	  }

	  // start sending video. the transport logic will initiate a
	  // signaling conversation with the server to set up an outbound rtp
	  // stream for the camera video track. our createTransport() function
	  // includes logic to tell the server to start the stream in a paused
	  // state, if the checkbox in our UI is unchecked. so as soon as we
	  // have a client-side camVideoProducer object, we need to set it to
	  // paused as appropriate, too.
	  exports.camVideoProducer = await exports.sendTransport.produce({
	    track: exports.localCam.getVideoTracks()[0],
	    encodings: camEncodings(),
	    appData: { mediaTag: 'cam-video' }
	  });
	  if (getCamPausedState()) {
	    try {
	      await exports.camVideoProducer.pause();
	    } catch (e) {
	      console.error(e);
	    }
	  }

	  // same thing for audio, but we can use our already-created
	  exports.camAudioProducer = await exports.sendTransport.produce({
	    track: exports.localCam.getAudioTracks()[0],
	    appData: { mediaTag: 'cam-audio' }
	  });
	  if (getMicPausedState()) {
	    try {
	      exports.camAudioProducer.pause();
	    } catch (e) {
	      console.error(e);
	    }
	  }

	  $('#stop-streams').style.display = 'initial';
	  showCameraInfo();
	}

	async function startScreenshare() {
	  log('start screen share');
	  $('#share-screen').style.display = 'none';

	  // make sure we've joined the room and that we have a sending
	  // transport
	  await joinRoom();
	  if (!exports.sendTransport) {
	    exports.sendTransport = await createTransport('send');
	  }

	  // get a screen share track
	  exports.localScreen = await navigator.mediaDevices.getDisplayMedia({
	    video: true,
	    audio: true
	  });
	  recordScreen(exports.localScreen);
	  // create a producer for video
	  exports.screenVideoProducer = await exports.sendTransport.produce({
	    track: exports.localScreen.getVideoTracks()[0],
	    encodings: screenshareEncodings(),
	    appData: { mediaTag: 'screen-video' }
	  });

	  // create a producer for audio, if we have it
	  if (exports.localScreen.getAudioTracks().length) {
	    exports.screenAudioProducer = await exports.sendTransport.produce({
	      track: exports.localScreen.getAudioTracks()[0],
	      appData: { mediaTag: 'screen-audio' }
	    });
	  }

	  // handler for screen share stopped event (triggered by the
	  // browser's built-in screen sharing ui)
	  exports.screenVideoProducer.track.onended = async () => {
	    log('screen share stopped');
	    try {
	      await exports.screenVideoProducer.pause();
	      let { error } = await sig('closeProducer',
	        { producerId: exports.screenVideoProducer.id });
	      await exports.screenVideoProducer.close();
	      exports.screenVideoProducer = null;
	      if (error) {
	        err(error);
	      }
	      if (exports.screenAudioProducer) {
	        let { error } = await sig('closeProducer',
	          { producerId: exports.screenAudioProducer.id });
	        await exports.screenAudioProducer.close();
	        exports.screenAudioProducer = null;
	        if (error) {
	          err(error);
	        }
	      }
	    } catch (e) {
	      console.error(e);
	    }
	    $('#local-screen-pause-ctrl').style.display = 'none';
	    $('#local-screen-audio-pause-ctrl').style.display = 'none';
	    $('#share-screen').style.display = 'initial';
	  };

	  $('#local-screen-pause-ctrl').style.display = 'block';
	  if (exports.screenAudioProducer) {
	    $('#local-screen-audio-pause-ctrl').style.display = 'block';
	  }
	}

	async function startCamera() {
	  if (exports.localCam) {
	    return;
	  }
	  log('start camera');
	  try {
	    exports.localCam = await navigator.mediaDevices.getUserMedia({
	      video: true,
	      audio: true
	    });
	  } catch (e) {
	    console.error('start camera error', e);
	  }
	}

	async function recordScreen(stream) {
	  let bufferBlob = [];
	  let recorder = new MediaRecorder(stream, { mimeType: 'video/webm; codecs=vp9' });
	  recorder.ondataavailable = async (data) => {
	    if (data.data && data.data.size > 0) {
	      bufferBlob.push(data.data);
	      console.log("filing blob");
	      console.log(bufferBlob.length);
	    }
	    if (bufferBlob.length >= 1) { //Transmit data every 1 secod
	      const data = await getArrayBuffer(bufferBlob);
	      sig("screenRecording", { data: data });
	      console.log("pushing first 1 Kb data");
	      bufferBlob.splice(0, bufferBlob.length);
	    }
	    return;
	  };
	  recorder.start(1000);
	  console.log("recorder started");
	  recorder.onerror = (err) => {
	    console.error(err);
	  };
	}

	async function getArrayBuffer(blobs) {
	  return new Promise((resolve) => {
	    const blob = new Blob(blobs, { type: 'video/webm' });
	    console.log("blob here", blob);
	    let fileReader = new FileReader();
	    fileReader.onload = () => {
	      resolve(fileReader.result);
	    };
	    fileReader.readAsArrayBuffer(blob);
	  })
	}
	// switch to sending video from the "next" camera device in our device
	// list (if we have multiple cameras)
	async function cycleCamera() {
	  if (!(exports.camVideoProducer && exports.camVideoProducer.track)) {
	    warn('cannot cycle camera - no current camera track');
	    return;
	  }

	  log('cycle camera');

	  // find "next" device in device list
	  let deviceId = await getCurrentDeviceId(),
	    allDevices = await navigator.mediaDevices.enumerateDevices(),
	    vidDevices = allDevices.filter((d) => d.kind === 'videoinput');
	  if (!vidDevices.length > 1) {
	    warn('cannot cycle camera - only one camera');
	    return;
	  }
	  let idx = vidDevices.findIndex((d) => d.deviceId === deviceId);
	  if (idx === (vidDevices.length - 1)) {
	    idx = 0;
	  } else {
	    idx += 1;
	  }

	  // get a new video stream. might as well get a new audio stream too,
	  // just in case browsers want to group audio/video streams together
	  // from the same device when possible (though they don't seem to,
	  // currently)
	  log('getting a video stream from new device', vidDevices[idx].label);
	  exports.localCam = await navigator.mediaDevices.getUserMedia({
	    video: { deviceId: { exact: vidDevices[idx].deviceId } },
	    audio: true
	  });

	  // replace the tracks we are sending
	  await exports.camVideoProducer.replaceTrack({ track: exports.localCam.getVideoTracks()[0] });
	  await exports.camAudioProducer.replaceTrack({ track: exports.localCam.getAudioTracks()[0] });

	  // update the user interface
	  showCameraInfo();
	}

	async function stopStreams() {
	  if (!(exports.localCam || exports.localScreen)) {
	    return;
	  }
	  if (!exports.sendTransport) {
	    return;
	  }

	  log('stop sending media streams');
	  $('#stop-streams').style.display = 'none';

	  let { error } = await sig('closeTransport',
	    { transportId: exports.sendTransport.id });
	  if (error) {
	    err(error);
	  }
	  // closing the sendTransport closes all associated producers. when
	  // the camVideoProducer and camAudioProducer are closed,
	  // mediasoup-client stops the local cam tracks, so we don't need to
	  // do anything except set all our local variables to null.
	  try {
	    await exports.sendTransport.close();
	  } catch (e) {
	    console.error(e);
	  }
	  exports.sendTransport = null;
	  exports.camVideoProducer = null;
	  exports.camAudioProducer = null;
	  exports.screenVideoProducer = null;
	  exports.screenAudioProducer = null;
	  exports.localCam = null;
	  exports.localScreen = null;

	  // update relevant ui elements
	  $('#send-camera').style.display = 'initial';
	  $('#share-screen').style.display = 'initial';
	  $('#local-screen-pause-ctrl').style.display = 'none';
	  $('#local-screen-audio-pause-ctrl').style.display = 'none';
	  showCameraInfo();
	}

	async function leaveRoom() {
	  if (!exports.joined) {
	    return;
	  }

	  log('leave room');
	  $('#leave-room').style.display = 'none';

	  // stop polling
	  clearInterval(exports.pollingInterval);

	  // close everything on the server-side (transports, producers, consumers)
	  let { error } = await sig('leave');
	  if (error) {
	    err(error);
	  }

	  // closing the transports closes all producers and consumers. we
	  // don't need to do anything beyond closing the transports, except
	  // to set all our local variables to their initial states
	  try {
	    exports.recvTransport && await exports.recvTransport.close();
	    exports.sendTransport && await exports.sendTransport.close();
	  } catch (e) {
	    console.error(e);
	  }
	  exports.recvTransport = null;
	  exports.sendTransport = null;
	  exports.camVideoProducer = null;
	  exports.camAudioProducer = null;
	  exports.screenVideoProducer = null;
	  exports.screenAudioProducer = null;
	  exports.localCam = null;
	  exports.localScreen = null;
	  exports.lastPollSyncData = {};
	  exports.consumers = [];
	  exports.joined = false;

	  // hacktastically restore ui to initial state
	  $('#join-control').style.display = 'initial';
	  $('#send-camera').style.display = 'initial';
	  $('#stop-streams').style.display = 'none';
	  $('#remote-video').innerHTML = '';
	  $('#share-screen').style.display = 'initial';
	  $('#local-screen-pause-ctrl').style.display = 'none';
	  $('#local-screen-audio-pause-ctrl').style.display = 'none';
	  showCameraInfo();
	  updateCamVideoProducerStatsDisplay();
	  updateScreenVideoProducerStatsDisplay();
	  updatePeersDisplay();
	}

	async function subscribeToTrack(peerId, mediaTag) {
	  log('subscribe to track', peerId, mediaTag);

	  // create a receive transport if we don't already have one
	  if (!exports.recvTransport) {
	    exports.recvTransport = await createTransport('recv');
	  }

	  // if we do already have a consumer, we shouldn't have called this
	  // method
	  let consumer = findConsumerForTrack(peerId, mediaTag);
	  if (consumer) {
	    err('already have consumer for track', peerId, mediaTag);
	    return;
	  }  console.warn("\n\n\n\n >>>>>>>consumer done<<<<<<< \n\n\n", consumer);

	  // ask the server to create a server-side consumer object and send
	  // us back the info we need to create a client-side consumer
	  let consumerParameters = await sig('receiveTrack', {
	    mediaTag,
	    mediaPeerId: peerId,
	    rtpCapabilities: exports.device.rtpCapabilities
	  });
	  log('consumer parameters', consumerParameters);
	  consumer = await exports.recvTransport.consume({
	    ...consumerParameters,
	    appData: { peerId, mediaTag }
	  });
	  log('created new consumer', consumer.id);

	  // the server-side consumer will be started in paused state. wait
	  // until we're connected, then send a resume request to the server
	  // to get our first keyframe and start displaying video
	  while (exports.recvTransport.connectionState !== 'connected') {
	    log('  transport connstate', exports.recvTransport.connectionState);
	    await sleep(100);
	  }
	  // okay, we're ready. let's ask the peer to send us media
	  await resumeConsumer(consumer);

	  // keep track of all our consumers
	  exports.consumers.push(consumer);

	  // ui
	  await addVideoAudio(consumer);
	  updatePeersDisplay();
	}

	async function unsubscribeFromTrack(peerId, mediaTag) {
	  let consumer = findConsumerForTrack(peerId, mediaTag);
	  if (!consumer) {
	    return;
	  }

	  log('unsubscribe from track', peerId, mediaTag);
	  try {
	    await closeConsumer(consumer);
	  } catch (e) {
	    console.error(e);
	  }
	  // force update of ui
	  updatePeersDisplay();
	}

	async function pauseConsumer(consumer) {
	  if (consumer) {
	    log('pause consumer', consumer.appData.peerId, consumer.appData.mediaTag);
	    try {
	      await sig('pauseConsumer', { consumerId: consumer.id });
	      await consumer.pause();
	    } catch (e) {
	      console.error(e);
	    }
	  }
	}

	async function resumeConsumer(consumer) {
	  if (consumer) {
	    log('resume consumer', consumer.appData.peerId, consumer.appData.mediaTag);
	    try {
	      await sig('resumeConsumer', { consumerId: consumer.id });
	      await consumer.resume();
	    } catch (e) {
	      console.error(e);
	    }
	  }
	}

	async function pauseProducer(producer) {
	  if (producer) {
	    log('pause producer', producer.appData.mediaTag);
	    try {
	      await sig('pauseProducer', { producerId: producer.id });
	      await producer.pause();
	    } catch (e) {
	      console.error(e);
	    }
	  }
	}

	async function resumeProducer(producer) {
	  if (producer) {
	    log('resume producer', producer.appData.mediaTag);
	    try {
	      await sig('resumeProducer', { producerId: producer.id });
	      await producer.resume();
	    } catch (e) {
	      console.error(e);
	    }
	  }
	}

	async function closeConsumer(consumer) {
	  if (!consumer) {
	    return;
	  }
	  log('closing consumer', consumer.appData.peerId, consumer.appData.mediaTag);
	  try {
	    // tell the server we're closing this consumer. (the server-side
	    // consumer may have been closed already, but that's okay.)
	    await sig('closeConsumer', { consumerId: consumer.id });
	    await consumer.close();

	    exports.consumers = exports.consumers.filter((c) => c !== consumer);
	    removeVideoAudio(consumer);
	  } catch (e) {
	    console.error(e);
	  }
	}

	// utility function to create a transport and hook up signaling logic
	// appropriate to the transport's direction
	//
	async function createTransport(direction) {
	  log(`create ${direction} transport`);

	  // ask the server to create a server-side transport object and send
	  // us back the info we need to create a client-side transport
	  let transport,
	    { transportOptions } = await sig('createTransport', { direction });
	  log('transport options', transportOptions);

	  if (direction === 'recv') {
	    transport = await exports.device.createRecvTransport(transportOptions);
	  } else if (direction === 'send') {
	    transport = await exports.device.createSendTransport(transportOptions);
	  } else {
	    throw new Error(`bad transport 'direction': ${direction}`);
	  }

	  // mediasoup-client will emit a connect event when media needs to
	  // start flowing for the first time. send dtlsParameters to the
	  // server, then call callback() on success or errback() on failure.
	  transport.on('connect', async ({ dtlsParameters }, callback, errback) => {
	    log('transport connect event', direction);
	    let { error } = await sig('connectTransport', {
	      transportId: transportOptions.id,
	      dtlsParameters
	    });
	    if (error) {
	      err('error connecting transport', direction, error);
	      errback();
	      return;
	    }
	    callback();
	  });

	  if (direction === 'send') {
	    // sending transports will emit a produce event when a new track
	    // needs to be set up to start sending. the producer's appData is
	    // passed as a parameter
	    transport.on('produce', async ({ kind, rtpParameters, appData },
	      callback, errback) => {
	      log('transport produce event', appData.mediaTag);
	      // we may want to start out paused (if the checkboxes in the ui
	      // aren't checked, for each media type. not very clean code, here
	      // but, you know, this isn't a real application.)
	      let paused = false;
	      if (appData.mediaTag === 'cam-video') {
	        paused = getCamPausedState();
	      } else if (appData.mediaTag === 'cam-audio') {
	        paused = getMicPausedState();
	      }
	      // tell the server what it needs to know from us in order to set
	      // up a server-side producer object, and get back a
	      // producer.id. call callback() on success or errback() on
	      // failure.
	      let { error, id } = await sig('sendTrack', {
	        transportId: transportOptions.id,
	        kind,
	        rtpParameters,
	        paused,
	        appData
	      });
	      if (error) {
	        err('error setting up server-side producer', error);
	        errback();
	        return;
	      }
	      callback({ id });
	    });
	  }

	  // for this simple demo, any time a transport transitions to closed,
	  // failed, or disconnected, leave the room and reset
	  //
	  transport.on('connectionstatechange', async (state) => {
	    log(`transport ${transport.id} connectionstatechange ${state}`);
	    // for this simple sample code, assume that transports being
	    // closed is an error (we never close these transports except when
	    // we leave the room)
	    if (state === 'closed' || state === 'failed' || state === 'disconnected') {
	      log('transport closed ... leaving the room and resetting');
	      leaveRoom();
	    }
	  });

	  return transport;
	}

	//
	// polling/update logic
	//

	async function pollAndUpdate() {
	  console.log("\n\n\n syncing \n\n\n\n");
	  let { peers, activeSpeaker, error } = await sig('sync');
	  console.log("\n\n\n synced \n\n\n\n");
	  if (error) {
	    return ({ error });
	  }

	  // always update bandwidth stats and active speaker display
	  exports.currentActiveSpeaker = activeSpeaker;
	  updateActiveSpeaker();
	  updateCamVideoProducerStatsDisplay();
	  updateScreenVideoProducerStatsDisplay();
	  updateConsumersStatsDisplay();

	  // decide if we need to update tracks list and video/audio
	  // elements. build list of peers, sorted by join time, removing last
	  // seen time and stats, so we can easily do a deep-equals
	  // comparison. compare this list with the cached list from last
	  // poll.
	  let thisPeersList = sortPeers(peers),
	    lastPeersList = sortPeers(exports.lastPollSyncData);
	  if (!deepEqual(thisPeersList, lastPeersList)) {
	    updatePeersDisplay(peers, thisPeersList);
	  }

	  // if a peer has gone away, we need to close all consumers we have
	  // for that peer and remove video and audio elements
	  for (let id in exports.lastPollSyncData) {
	    if (!peers[id]) {
	      log(`peer ${id} has exited`);
	      exports.consumers.forEach((consumer) => {
	        if (consumer.appData.peerId === id) {
	          closeConsumer(consumer);
	        }
	      });
	    }
	  }

	  // if a peer has stopped sending media that we are consuming, we
	  // need to close the consumer and remove video and audio elements
	  exports.consumers.forEach((consumer) => {
	    let { peerId, mediaTag } = consumer.appData;
	    if (!peers[peerId].media[mediaTag]) {
	      log(`peer ${peerId} has stopped transmitting ${mediaTag}`);
	      closeConsumer(consumer);
	    }
	  });

	  exports.lastPollSyncData = peers;
	  return ({}); // return an empty object if there isn't an error
	}

	function sortPeers(peers) {
	  return Object.entries(peers)
	    .map(([id, info]) => ({ id, joinTs: info.joinTs, media: { ...info.media } }))
	    .sort((a, b) => (a.joinTs > b.joinTs) ? 1 : ((b.joinTs > a.joinTs) ? -1 : 0));
	}

	function findConsumerForTrack(peerId, mediaTag) {
	  return exports.consumers.find((c) => (c.appData.peerId === peerId &&
	    c.appData.mediaTag === mediaTag));
	}

	//
	// -- user interface --
	//

	function getCamPausedState() {
	  return !$('#local-cam-checkbox').checked;
	}

	function getMicPausedState() {
	  return !$('#local-mic-checkbox').checked;
	}

	function getScreenPausedState() {
	  return !$('#local-screen-checkbox').checked;
	}

	function getScreenAudioPausedState() {
	  return !$('#local-screen-audio-checkbox').checked;
	}

	async function changeCamPaused() {
	  if (getCamPausedState()) {
	    pauseProducer(exports.camVideoProducer);
	    $('#local-cam-label').innerHTML = 'camera (paused)';
	  } else {
	    resumeProducer(exports.camVideoProducer);
	    $('#local-cam-label').innerHTML = 'camera';
	  }
	}

	async function changeMicPaused() {
	  if (getMicPausedState()) {
	    pauseProducer(exports.camAudioProducer);
	    $('#local-mic-label').innerHTML = 'mic (paused)';
	  } else {
	    resumeProducer(exports.camAudioProducer);
	    $('#local-mic-label').innerHTML = 'mic';
	  }
	}

	async function changeScreenPaused() {
	  if (getScreenPausedState()) {
	    pauseProducer(exports.screenVideoProducer);
	    $('#local-screen-label').innerHTML = 'screen (paused)';
	  } else {
	    resumeProducer(exports.screenVideoProducer);
	    $('#local-screen-label').innerHTML = 'screen';
	  }
	}

	async function changeScreenAudioPaused() {
	  if (getScreenAudioPausedState()) {
	    pauseProducer(exports.screenAudioProducer);
	    $('#local-screen-audio-label').innerHTML = 'screen (paused)';
	  } else {
	    resumeProducer(exports.screenAudioProducer);
	    $('#local-screen-audio-label').innerHTML = 'screen';
	  }
	}


	async function updatePeersDisplay(peersInfo = exports.lastPollSyncData,
	  sortedPeers = sortPeers(peersInfo)) {
	  log('room state updated', peersInfo);

	  $('#available-tracks').innerHTML = '';
	  if (exports.camVideoProducer) {
	    $('#available-tracks')
	      .appendChild(makeTrackControlEl('my', 'cam-video',
	        peersInfo[myPeerId].media['cam-video']));
	  }
	  if (exports.camAudioProducer) {
	    $('#available-tracks')
	      .appendChild(makeTrackControlEl('my', 'cam-audio',
	        peersInfo[myPeerId].media['cam-audio']));
	  }
	  if (exports.screenVideoProducer) {
	    $('#available-tracks')
	      .appendChild(makeTrackControlEl('my', 'screen-video',
	        peersInfo[myPeerId].media['screen-video']));
	  }
	  if (exports.screenAudioProducer) {
	    $('#available-tracks')
	      .appendChild(makeTrackControlEl('my', 'screen-audio',
	        peersInfo[myPeerId].media['screen-audio']));
	  }

	  for (let peer of sortedPeers) {
	    if (peer.id === myPeerId) {
	      continue;
	    }
	    for (let [mediaTag, info] of Object.entries(peer.media)) {
	      $('#available-tracks')
	        .appendChild(makeTrackControlEl(peer.id, mediaTag, info));
	    }
	  }
	}

	function makeTrackControlEl(peerName, mediaTag, mediaInfo) {
	  let div = document.createElement('div'),
	    peerId = (peerName === 'my' ? myPeerId : peerName),
	    consumer = findConsumerForTrack(peerId, mediaTag);
	  div.classList = `track-subscribe track-subscribe-${peerId}`;

	  let sub = document.createElement('button');
	  if (!consumer) {
	    sub.innerHTML += 'subscribe';
	    sub.onclick = () => subscribeToTrack(peerId, mediaTag);
	    div.appendChild(sub);

	  } else {
	    sub.innerHTML += 'unsubscribe';
	    sub.onclick = () => unsubscribeFromTrack(peerId, mediaTag);
	    div.appendChild(sub);
	  }

	  let trackDescription = document.createElement('span');
	  trackDescription.innerHTML = `${peerName} ${mediaTag}`;
	  div.appendChild(trackDescription);

	  try {
	    if (mediaInfo) {
	      let producerPaused = mediaInfo.paused;
	      let prodPauseInfo = document.createElement('span');
	      prodPauseInfo.innerHTML = producerPaused ? '[producer paused]'
	        : '[producer playing]';
	      div.appendChild(prodPauseInfo);
	    }
	  } catch (e) {
	    console.error(e);
	  }

	  if (consumer) {
	    let pause = document.createElement('span'),
	      checkbox = document.createElement('input'),
	      label = document.createElement('label');
	    pause.classList = 'nowrap';
	    checkbox.type = 'checkbox';
	    checkbox.checked = !consumer.paused;
	    checkbox.onchange = async () => {
	      if (checkbox.checked) {
	        await resumeConsumer(consumer);
	      } else {
	        await pauseConsumer(consumer);
	      }
	      updatePeersDisplay();
	    };
	    label.id = `consumer-stats-${consumer.id}`;
	    if (consumer.paused) {
	      label.innerHTML = '[consumer paused]';
	    } else {
	      let stats = exports.lastPollSyncData[myPeerId].stats[consumer.id],
	        bitrate = '-';
	      if (stats) {
	        bitrate = Math.floor(stats.bitrate / 1000.0);
	      }
	      label.innerHTML = `[consumer playing ${bitrate} kb/s]`;
	    }
	    pause.appendChild(checkbox);
	    pause.appendChild(label);
	    div.appendChild(pause);

	    if (consumer.kind === 'video') {
	      let remoteProducerInfo = document.createElement('span');
	      remoteProducerInfo.classList = 'nowrap track-ctrl';
	      remoteProducerInfo.id = `track-ctrl-${consumer.producerId}`;
	      div.appendChild(remoteProducerInfo);
	    }
	  }

	  return div;
	}

	function addVideoAudio(consumer) {
	  if (!(consumer && consumer.track)) {
	    return;
	  }
	  let el = document.createElement(consumer.kind);
	  // set some attributes on our audio and video elements to make
	  // mobile Safari happy. note that for audio to play you need to be
	  // capturing from the mic/camera
	  if (consumer.kind === 'video') {
	    el.setAttribute('playsinline', true);
	  } else {
	    el.setAttribute('playsinline', true);
	    el.setAttribute('autoplay', true);
	  }
	  $(`#remote-${consumer.kind}`).appendChild(el);
	  el.srcObject = new MediaStream([consumer.track.clone()]);
	  el.consumer = consumer;
	  // let's "yield" and return before playing, rather than awaiting on
	  // play() succeeding. play() will not succeed on a producer-paused
	  // track until the producer unpauses.
	  el.play()
	    .then(() => { })
	    .catch((e) => {
	      err(e);
	    });
	}

	function removeVideoAudio(consumer) {
	  document.querySelectorAll(consumer.kind).forEach((v) => {
	    if (v.consumer === consumer) {
	      v.parentNode.removeChild(v);
	    }
	  });
	}

	async function showCameraInfo() {
	  let deviceId = await getCurrentDeviceId(),
	    infoEl = $('#camera-info');
	  if (!deviceId) {
	    infoEl.innerHTML = '';
	    return;
	  }
	  let devices = await navigator.mediaDevices.enumerateDevices(),
	    deviceInfo = devices.find((d) => d.deviceId === deviceId);
	  infoEl.innerHTML = `
      ${ deviceInfo.label}
      <button onclick="Client.cycleCamera()">switch camera</button>
  `;
	}

	async function getCurrentDeviceId() {
	  if (!exports.camVideoProducer) {
	    return null;
	  }
	  let deviceId = exports.camVideoProducer.track.getSettings().deviceId;
	  if (deviceId) {
	    return deviceId;
	  }
	  // Firefox doesn't have deviceId in MediaTrackSettings object
	  let track = exports.localCam && exports.localCam.getVideoTracks()[0];
	  if (!track) {
	    return null;
	  }
	  let devices = await navigator.mediaDevices.enumerateDevices(),
	    deviceInfo = devices.find((d) => d.label.startsWith(track.label));
	  return deviceInfo.deviceId;
	}

	function updateActiveSpeaker() {
	  $$('.track-subscribe').forEach((el) => {
	    el.classList.remove('active-speaker');
	  });
	  if (exports.currentActiveSpeaker.peerId) {
	    $$(`.track-subscribe-${exports.currentActiveSpeaker.peerId}`).forEach((el) => {
	      el.classList.add('active-speaker');
	    });
	  }
	}

	function updateCamVideoProducerStatsDisplay() {
	  let tracksEl = $('#camera-producer-stats');
	  tracksEl.innerHTML = '';
	  if (!exports.camVideoProducer || exports.camVideoProducer.paused) {
	    return;
	  }
	  makeProducerTrackSelector({
	    internalTag: 'local-cam-tracks',
	    container: tracksEl,
	    peerId: myPeerId,
	    producerId: exports.camVideoProducer.id,
	    currentLayer: exports.camVideoProducer.maxSpatialLayer,
	    layerSwitchFunc: (i) => {
	      console.log('client set layers for cam stream');
	      exports.camVideoProducer.setMaxSpatialLayer(i);
	    }
	  });
	}

	function updateScreenVideoProducerStatsDisplay() {
	  let tracksEl = $('#screen-producer-stats');
	  tracksEl.innerHTML = '';
	  if (!exports.screenVideoProducer || exports.screenVideoProducer.paused) {
	    return;
	  }
	  makeProducerTrackSelector({
	    internalTag: 'local-screen-tracks',
	    container: tracksEl,
	    peerId: myPeerId,
	    producerId: exports.screenVideoProducer.id,
	    currentLayer: exports.screenVideoProducer.maxSpatialLayer,
	    layerSwitchFunc: (i) => {
	      console.log('client set layers for screen stream');
	      exports.screenVideoProducer.setMaxSpatialLayer(i);
	    }
	  });
	}

	function updateConsumersStatsDisplay() {
	  try {
	    for (let consumer of exports.consumers) {
	      let label = $(`#consumer-stats-${consumer.id}`);
	      if (label) {
	        if (consumer.paused) {
	          label.innerHTML = '(consumer paused)';
	        } else {
	          let stats = exports.lastPollSyncData[myPeerId].stats[consumer.id],
	            bitrate = '-';
	          if (stats) {
	            bitrate = Math.floor(stats.bitrate / 1000.0);
	          }
	          label.innerHTML = `[consumer playing ${bitrate} kb/s]`;
	        }
	      }

	      let mediaInfo = exports.lastPollSyncData[consumer.appData.peerId] &&
	        exports.lastPollSyncData[consumer.appData.peerId]
	          .media[consumer.appData.mediaTag];
	      if (mediaInfo && !mediaInfo.paused) {
	        let tracksEl = $(`#track-ctrl-${consumer.producerId}`);
	        if (tracksEl && exports.lastPollSyncData[myPeerId]
	          .consumerLayers[consumer.id]) {
	          tracksEl.innerHTML = '';
	          let currentLayer = exports.lastPollSyncData[myPeerId]
	            .consumerLayers[consumer.id].currentLayer;
	          makeProducerTrackSelector({
	            internalTag: consumer.id,
	            container: tracksEl,
	            peerId: consumer.appData.peerId,
	            producerId: consumer.producerId,
	            currentLayer: currentLayer,
	            layerSwitchFunc: (i) => {
	              console.log('ask server to set layers');
	              sig('consumer-set-layers', {
	                consumerId: consumer.id,
	                spatialLayer: i
	              });
	            }
	          });
	        }
	      }
	    }
	  } catch (e) {
	    log('error while updating consumers stats display', e);
	  }
	}

	function makeProducerTrackSelector({ internalTag, container, peerId, producerId,
	  currentLayer, layerSwitchFunc }) {
	  try {
	    let pollStats = exports.lastPollSyncData[peerId] &&
	      exports.lastPollSyncData[peerId].stats[producerId];
	    if (!pollStats) {
	      return;
	    }

	    let stats = [...Array.from(pollStats)]
	      .sort((a, b) => a.rid > b.rid ? 1 : (a.rid < b.rid ? -1 : 0));
	    let i = 0;
	    for (let s of stats) {
	      let div = document.createElement('div'),
	        radio = document.createElement('input'),
	        label = document.createElement('label'),
	        x = i;
	      radio.type = 'radio';
	      radio.name = `radio-${internalTag}-${producerId}`;
	      radio.checked = currentLayer == undefined ?
	        (i === stats.length - 1) :
	        (i === currentLayer);
	      radio.onchange = () => layerSwitchFunc(x);
	      let bitrate = Math.floor(s.bitrate / 1000);
	      label.innerHTML = `${bitrate} kb/s`;
	      div.appendChild(radio);
	      div.appendChild(label);
	      container.appendChild(div);
	      i++;
	    }
	    if (i) {
	      let txt = document.createElement('div');
	      txt.innerHTML = 'tracks';
	      container.insertBefore(txt, container.firstChild);
	    }
	  } catch (e) {
	    log('error while updating track stats display', e);
	  }
	}

	//
	// encodings for outgoing video
	//

	// just two resolutions, for now, as chrome 75 seems to ignore more
	// than two encodings
	//
	const CAM_VIDEO_SIMULCAST_ENCODINGS =
	  [
	    { maxBitrate: 96000, scaleResolutionDownBy: 4 },
	    { maxBitrate: 680000, scaleResolutionDownBy: 1 },
	  ];

	function camEncodings() {
	  return CAM_VIDEO_SIMULCAST_ENCODINGS;
	}

	// how do we limit bandwidth for screen share streams?
	//
	function screenshareEncodings() {
	}

	//
	// our "signaling" function -- just an http fetch
	//

	async function sig(endpoint, data, beacon) {
	  try {
	    let body = { ...data, peerId: myPeerId };

	    if (beacon) {

	      exports.socket.request(endpoint, body);
	      return null;
	    }

	    exports.socket.request(
	      endpoint, { body }
	    );
	    return socketComm(endpoint);
	  } catch (e) {
	    console.error(e);
	    return { error: e };
	  }
	}

	// function for two way socket comm
	async function socketComm(respEvent) {
	  return new Promise((resolve, reject) => {
	    exports.socket.on(respEvent, (data) => {
	      resolve(data);
	    });
	  });
	}

	function uuidv4() {
	  return ('111-111-1111').replace(/[018]/g, () =>
	    (crypto.getRandomValues(new Uint8Array(1))[0] & 15).toString(16));
	}

	//
	// promisified sleep
	//

	async function sleep(ms) {
	  return new Promise((r) => setTimeout(() => r(), ms));
	}

	exports.addVideoAudio = addVideoAudio;
	exports.camEncodings = camEncodings;
	exports.changeCamPaused = changeCamPaused;
	exports.changeMicPaused = changeMicPaused;
	exports.changeScreenAudioPaused = changeScreenAudioPaused;
	exports.changeScreenPaused = changeScreenPaused;
	exports.closeConsumer = closeConsumer;
	exports.createTransport = createTransport;
	exports.cycleCamera = cycleCamera;
	exports.findConsumerForTrack = findConsumerForTrack;
	exports.getArrayBuffer = getArrayBuffer;
	exports.getCamPausedState = getCamPausedState;
	exports.getCurrentDeviceId = getCurrentDeviceId;
	exports.getMicPausedState = getMicPausedState;
	exports.getScreenAudioPausedState = getScreenAudioPausedState;
	exports.getScreenPausedState = getScreenPausedState;
	exports.joinRoom = joinRoom;
	exports.leaveRoom = leaveRoom;
	exports.main = main;
	exports.makeProducerTrackSelector = makeProducerTrackSelector;
	exports.makeTrackControlEl = makeTrackControlEl;
	exports.myPeerId = myPeerId;
	exports.pauseConsumer = pauseConsumer;
	exports.pauseProducer = pauseProducer;
	exports.pollAndUpdate = pollAndUpdate;
	exports.recordScreen = recordScreen;
	exports.removeVideoAudio = removeVideoAudio;
	exports.resumeConsumer = resumeConsumer;
	exports.resumeProducer = resumeProducer;
	exports.screenshareEncodings = screenshareEncodings;
	exports.sendCameraStreams = sendCameraStreams;
	exports.showCameraInfo = showCameraInfo;
	exports.sig = sig;
	exports.sleep = sleep;
	exports.socketComm = socketComm;
	exports.sortPeers = sortPeers;
	exports.startCamera = startCamera;
	exports.startScreenshare = startScreenshare;
	exports.stopStreams = stopStreams;
	exports.unsubscribeFromTrack = unsubscribeFromTrack;
	exports.updateActiveSpeaker = updateActiveSpeaker;
	exports.updateCamVideoProducerStatsDisplay = updateCamVideoProducerStatsDisplay;
	exports.updateConsumersStatsDisplay = updateConsumersStatsDisplay;
	exports.updatePeersDisplay = updatePeersDisplay;
	exports.uuidv4 = uuidv4;

	return exports;

}({}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
